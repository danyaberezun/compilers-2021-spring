-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun spaceBrackets (a, b) {
  a |> lift (inbr (s ("("), b, s (")")))
}

fun binop (op) {
  [s (op), fun (x, op, y) { Binop (op, x, y)}]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s ("("), exp, s (")")]);


var exp = memo $ eta expr ({
  [Left, {binop ("!!")}],
  [Left, {binop ("&&")}],
  [Nona, {
    binop ("=="),
    binop ("!="),
    binop ("<="),
    binop ("<"),
    binop (">="),
    binop (">")
  }],
  [Left, {
    binop ("+"), 
    binop ("-")
  }],
  [Left, {
    binop ("*"), 
    binop ("/"), 
    binop ("%")
  }]
}, primary);

var stmt = memo $ eta syntax (kSkip                           {Skip}          |
                              x=spaceBrackets [kRead, lident] {Read (x)}      |
                              x=spaceBrackets [kWrite, exp]   {Write (x)}     | 
                              x=lident s [":="] y=exp         {Assn (x, y)});
   
var stmtSequence = memo $ eta syntax (x=stmt s [";"] y=stmtSequence {Seq (x, y)} | stmt);

-- Public top-level parser
public parse = stmtSequence;  
