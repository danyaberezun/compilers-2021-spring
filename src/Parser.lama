-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;
import STM;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- AST environment
fun createEnv (id) {
  fun freshName () {
    [createEnv (id+1), sprintf ("_tmp%d", id)]
  }

  [freshName]
}

fun emptyEnv () {
  createEnv (0)
}

fun freshName (env) {
  env [0] ()
}

-- Attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Cond --- a value unknown at compile-time where would be used (except for Weak)
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

fun assertConst (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> v => fun (v) {Skip}
  | Val  -> v => fun (v) {Imm (v)}
  | Weak -> v => fun (v) {Const (v)}
  | Cond -> v => fun (v) {Const (v)}
  esac
}

fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> v => fun (v) {Ignore (v)}
  | Weak -> v => fun (v) {case v of 
              Call (v, args, _) -> Call (v, args, Tail)
            | _ -> v
            esac}
  | _    -> v
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, vl, loc) {
  case atr of
    Void -> vl
  | Val  -> error ("value expected", loc)
  | Weak -> vl => fun (vl) {Seq (vl, Imm (0))}
  | Cond -> error ("value expected", loc)
  | Ref  -> error ("reference expected", loc)
  esac
}

fun assertRef (atr, v, loc) {
  case atr of
    Ref  -> v => fun (v) {Ref (v)}
  | Void -> returnST (Skip)
  | _    -> v => fun (v) {Var (v)}
  esac
}

fun assertIf (atr, [c, b0, b1], loc) {
  case atr of
    Val -> chainST ({c (Val), b0 (Cond), b1 (Cond)}) => fun ({c, b0, b1}) {If (c, b0, b1)}
  | _   -> chainST ({c (Val), b0 (atr),  b1 (atr)} )   => fun ({c, b0, b1}) {If (c, b0, b1)}
  esac 
}

fun assertF (f, v, loc) {
  fun (a) {
    f (a, v, loc)
  }
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, l (Val) =>> fun (l) {
                                            r (Val) =>  fun (r) {
                                              Binop (op, l, r)
                                            }}, loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

fun inbr (l, e, r) {
  syntax (-l e -r)
}

fun inpar (p) {
  inbr (s ("("), p, s (")"))
}   

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandVarDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  fun expandValDefs (defs, expr) {
    foldr (fun ([defs, expr], [ident, value]) {     
             [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
           },
           [{}, expr],
           defs)
  }
  
  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Func (_, _, _) -> [f : defs, expr]
             | Val (ds) ->
                 case expandValDefs (ds, expr) of
                   [ds, expr] -> [Val (ds) : defs, expr]
                 esac
             | Var (ds) ->             
                 case expandVarDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

-- Helper AST function: reifies pattern bindings into scope
-- definitions and assignments; takes an returns lists of
-- pattern-branch pairs
fun reifyPatternBindings (matched, brs) {
  map (
    fun ([pat, br]) {      
      fun collectBindings (path, p) {
        fun collectList (path, ps) {
          case
            foldl (fun ([acc, i], p) {
                     [collectBindings (i : path, p) : acc, i+1]                      
                   },
                   [{}, 0],
                   ps) of
            [acc, _] -> flatten (acc)
          esac            
        }
        
        case p of
          Sexp  (_, ps)   -> collectList (path, ps)
        | Array (ps)      -> collectList (path, ps)
        | Named (name, p) -> [name, path] : collectBindings (path, p)
        |  _              -> {}
        esac
      }

      case collectBindings ({}, pat) of
        {}       -> [pat, br]
      | bindings ->
           [pat,
             expandScope (
               {Val (map (
                      fun ([name, path]) {
                        [name, foldr (fun (p, i) {Elem (p, Imm (i))}, Var (matched), path)]
                      },
                      bindings))},
               br
             )]
      esac
    },
    brs
  )
}

var
  primary = memo $ eta syntax (
    -- array constant
    loc=pos x=inbr[s("["), list0(syntax (e=exp {e(Val)})), s("]")] {
      assertF (assertValue, chainST (x) => fun (x) {Array (x)}, loc)} |
                                      
    -- string constant
    loc=pos x=strlit {assertF (assertValue, returnST $ String (x), loc)} |
                                      
    -- character literal
    loc=pos x=chrlit {assertF (assertConst, returnST $ x, loc)} |
                                      
    -- decimal constant
    loc=pos x=decimal {assertF (assertConst, returnST $ stringInt (x), loc)} |
                                      
    -- identifier
    loc=pos x=lident args=inpar[list0(syntax(e=exp {e(Val)}))]? {
      fun (a) {
        case args of
          None -> assertRef (a, returnST (x), loc)
        | Some (args) -> assertValue (a, chainST (args) => fun (args) {Call (x, args, Just)}, loc)
        esac}
    } |

    -- S-expression
    loc=pos x=uident args=inpar[list0(syntax(e=exp {e (Val)}))]? {
      fun (a) {
        assertValue (a, case args of
                          None        -> returnST $ Sexp (x, {})
                        | Some (args) -> chainST (args) => fun (args) {Sexp (x, args)}
                        esac, loc)}
    } |
  
    inpar[scopeExpr] |
    loc=pos kSkip { assertF (assertVoid, returnST $ Skip, loc) } |
    kWhile expr=exp kDo loc=pos body=scopeExpr kOd { assertF (assertVoid, chainST ({expr (Val), body (Void)}) => fun ({expr, body}) {While (expr, body)}, loc) } |
    kDo loc=pos body=scopeExpr kWhile expr=exp kOd { assertF (assertVoid, chainST ({expr (Val), body (Void)}) => fun ({expr, body}) {
      distributeScope (body, fun (body) {DoWhile (body, expr)})
    }, loc)} |
    kIf cond=exp kThen body=scopeExpr elfs=elifs { assertF (assertIf, [cond, body, elfs], loc) } |
    kFor init=scopeExpr s[","] cond=exp s[","] inc=exp kDo loc=pos body=scopeExpr kOd {
      assertF (assertVoid, chainST ({init (Void), cond (Val), body (Void), inc (Void)}) => fun ({init, cond, body, inc}) {
        distributeScope (init, fun (init) {Seq (init, While (cond, Seq (body, inc)))})
      }, loc)
    } |
    loc=pos kCase expr=exp kOf cs=caseCases kEsac {
      fun (atr) {
        case unzip (cs) of [ps, es] ->
          chainST (expr (Val) : map (fun (c) {c (case atr of Val -> Cond | _ -> atr esac)}, es)) => fun (expr : es) {
            Case (expr, zip (ps, es))
          }
        esac
      }
    }),

  caseCases = memo $ eta syntax (
    p=pattern s["->"] e=scopeExpr s["|"] cs=caseCases {[p, e] : cs} |
    p=pattern s["->"] e=scopeExpr {{[p, e]}}
  ),

  pattern = memo $ eta syntax (consPattern | simplePattern),
  consPattern = memo $ eta syntax (c=simplePattern s[":"] p=pattern {
      case [c, p] of [[c, dc], [p, dp]] -> [ConsPattern (c, p), dc +++ dp] esac
    }),
  simplePattern = memo $ eta syntax (
    s["_"] {[Wildcard, {}]} |
    sexprPattern |
    arrayPattern |
    listPattern |
    n=lident p=(-s["@"] pattern)? {case p of None -> [Named (n), {Var ({n})}] | Some ([p, defs]) -> [NamedPattern (n, p), Var ({n}) : defs] esac} |
    d=decimal {[Decimal (stringInt (d)), {}]} |
    s=strlit {[String (s), {}]}|
    c=chrlit {[Char (c), {}]} |
    s["true"] {[True, {}]} |
    s["false"] {[False, {}]} |
    inpar[pattern] |
    s["#"] n=(s["box"] | s["val"] | s["str"] | s["array"] | s["sexp"] | s["fun"]) {[Type (n), {}]}
  ),

  sexprPattern = memo $ eta syntax (
    n=uident as=(inpar[list (syntax (pattern))])? {
      case as of
        None -> [Sexp (n, {}), {}]
      | Some (as) -> case unzip (as) of [as, defs] -> [Sexp (n, as), flatten (defs)] esac
      esac
    }
  ),

  arrayPattern = memo $ eta syntax (
    p=inbr[s ("["), list0 (syntax (pattern)), s ("]")] {case unzip (p) of [ps, defs] -> [Array (ps), flatten (defs)] esac}
  ),

  listPattern = memo $ eta syntax (
    p=inbr[s ("{"), list0 (syntax (pattern)), s ("}")] {case unzip (p) of [ps, defs] -> [List (ps), flatten (defs)] esac}
  ),
    
  elifs = memo $ eta syntax (
    kElif cond=exp kThen body=scopeExpr elfs=elifs { assertF (assertIf, [cond, body, elfs], loc) } |
    -kElse scopeExpr -kFi |
    loc=pos kFi { assertF (assertVoid, returnST $ Skip, loc) }), 
   

  basic = memo $ eta (
    expr ({[Right, {[s (":="), fun (l, loc, r) {
                                 fun (a) {assertValue (a, l (Ref) =>> fun (l) {
                                                          r (Val) =>  fun (r) {
                                                          Assn (l, r)
                                                          }},
                                                        loc)
                                 }
                               }]}],
           [Left , map (binop, {"!!"})],
           [Left , map (binop, {"&&"})],
           [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
           [Left , map (binop, {"+", "-"})],
           [Left , map (binop, {"*", "/", "%"})]
          },
          postfix)
  ),
  
  postfix = memo $ eta syntax (
    loc=pos e=primary ps=(i=inbr[s("["), exp, s("]")] {Index (i (Cond))})* {
      fun (a) {
        foldl (fun (e, p) {                                                                            
                 case p of                                                                                   
                   Index (i) ->
                    fun (a) {
                      case a of
                        Ref -> e (Val) =>> fun (e) {
                               i       =>  fun (i) {
                                 ElemRef (e, i)
                               }} 
                      | _   -> assertValue (a, e (Val) =>> fun (e) {
                                               i       =>  fun (i) {
                                               Elem (e, i)
                                               }},
                                            loc)
                      esac
                    }
                 esac                                                                            
               }, e, ps) (a)
      }}
  ),
  
  scopeExpr  = memo $ eta syntax (ds=definition* e=exp? {
    fun (a) {
      fun (e) {
        case ds of
          {} -> e
        | _  -> chainST (ds) =>> fun (ds) {
                e            =>  fun (e)  {
                  expandScope (ds, e)
                }}
        esac
      }
      (case e of 
        Some (e) -> e (a)
      | _        -> returnST $ Skip
      esac)
    }}                                                                  
  ),
  
  definition = memo $ eta syntax (
    kVar ds=list[syntax (x=lident e=(-s["="] basic)? {case e of
                                                        None -> returnST $ [x, None]
                                                      | Some (e) ->
                                                          e (Val) => fun (e) {[x, Some (e)]}
                                                      esac})] s[";"] {
      chainST (ds) => fun (ds) {Var (ds)}
    } |
    kVal ds=list[syntax (x=lident s["="] e=basic {e (Val) => fun (e) {[x, e]}})] s[";"] {
      chainST (ds) => fun (ds) {Val (ds)}
    } |  
    kFun name=lident args=inbr[s("("), list0 (lident), s(")")] body=inbr[s("{"), scopeExpr, s("}")] {
      body (Weak) => fun (body) {Func (name, args, body)}
    }
  ),
  
  exp = memo $ eta syntax (
    basic
  | s1=basic s[";"] s2=exp {
     fun (a) {
       s1 (Void) =>> fun (s1) {
       s2 (a)    =>  fun (s2) {
         Seq (s1, s2)
       }}
     }
   }
  );

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void) (emptyEnv ()) [1]});
