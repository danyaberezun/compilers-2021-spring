-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun inpar (p) {
  inbr (s ("("), p, s (")"))
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]);

fun ctrBins (ops) {
  map (fun (op) {
    [s (op), fun (l, op, r) { Binop (op, l, r) }]
  }, ops)
}

var exp = memo $ eta expr ({
  [Left, ctrBins ({"!!"})],
  [Left, ctrBins ({"&&"})],
  [Nona, ctrBins ({"<", "<=", ">", ">=", "==", "!="})],
  [Left, ctrBins ({"+", "-"})],
  [Left, ctrBins ({"*", "/", "%"})]
}, primary);

var stmt = memo $ eta syntax (
  kSkip { Skip } 
| kWrite from=inpar[exp] { Write (from) } 
| kRead to=inpar[lident] { Read (to) } 
| to=lident s[":="] from=exp { Assn (to, from) }
);

var stmts = memo $ eta syntax (
  c=stmt s[";"] r=stmts { Seq (c, r) }
| stmt
);
   

-- Public top-level parser
public parse = stmts;

