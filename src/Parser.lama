-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

var exprsList =  {
		[Left, funcExprSymb({"&&"})],
		[Left, funcExprSymb({"!!"})],
        	[Nona, funcExprSymb({"=="})],
		[Nona, funcExprSymb({"!="})],
		[Nona, funcExprSymb({"<"})],
		[Nona, funcExprSymb({"<="})],
		[Nona, funcExprSymb({">"})],
		[Nona, funcExprSymb({">="})],
        	[Left, funcExprSymb({"+"})],
		[Left, funcExprSymb({"-"})],
		[Left, funcExprSymb({"*", "/", "%"})]
      }; 



-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 arrInbr[exp]),

	exp = memo $ eta expr (exprsList, primary);

fun arrInbr (i) {
  inbr (s ("("), i, s (")"))
}

fun funcExprSymb(expr){
    map(funcExpr,expr)
}

fun funcExpr(op) {
  [s(op), fun (l, op, r) {Binop (op, l, r)}]
}
var stmt = memo $ eta syntax(  kSkip                                |
			       kRead i=arrInbr[lident] {Read (i)}   |
			       kWrite i=arrInbr[exp] {Write (i)}    |
                               x1=lident s[":="] 
			       x2=exp {Assn (x1, x2)});    
   

-- Public top-level parser
public parse = memo $ eta syntax (x1=stmt s[";"] x2=parse {Seq (x1, x2)} | stmt);
    
   