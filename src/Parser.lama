-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

var comma = s (",");

fun binop(op) {
  [s (op), fun (l, op, r) {Binop (op, l, r)}]
}

fun handleOpt(some) {
	case some of
		Some (value) -> value
	|	_ -> Skip
	esac	 
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
      exp = memo $ eta (expr ({
      	[Left, { binop ("!!") }],
      	[Left, { binop ("&&") }],
      	[Nona, map(binop, {"==", "!=", ">", ">=", "<", "<="})],
        [Left, map(binop, {"+", "-"})],
        [Left, map(binop, {"*", "/", "%"})]
      }, primary));

var stmt = memo $ eta syntax (singleStmt | 
							  stmt1=singleStmt token[";"] stmt2=stmt {Seq (stmt1, stmt2)}
							  );

var singleStmt = memo $ eta syntax (x=lident s[":="] expr=exp {Assn (x, expr)} 					|
							  kSkip {Skip}														|
							  kRead x=inbr[s("("), lident, s(")")]  {Read (x)} 					|
							  kWrite expr=inbr[s("("), exp, s(")")]  {Write (expr)}				|	
							  kWhile expr=exp kDo body=stmt kOd {While (expr, body)}			|
							  kDo body=stmt kWhile expr=exp kOd {DoWhile (body, expr)}			|
							  kFor s1=stmt comma expr=exp comma s2=stmt kDo body=stmt kOd { Seq(s1, While(expr, Seq (body, s2)))} |
							  kIf expr=exp kThen ifTrue=stmt ifFalse=(elsePart)? kFi {If (expr, ifTrue, handleOpt (ifFalse))} |
							  end
							  );

var elsePart = memo $ eta syntax (kElif expr=exp kThen ifTrue=stmt ifFalse=(elsePart)? {If (expr, ifTrue, handleOpt (ifFalse))} |						   		  
								 -kElse stmt
						   		 );

-- Public top-level parser
public parse = stmt;
