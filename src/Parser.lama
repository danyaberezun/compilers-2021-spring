-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun inParentheses (parser) {
  inbr (s ("("), parser, s (")"))
}

fun binop (operations) {
  map (fun (operation) {[s (operation), fun (l, _, r) {Binop (operation, l, r)}]}, operations)
}

-- Primary expression
var primary = memo $ eta syntax (
    x=decimal {Const (stringInt (x))}
  | x=lident  {Var (x)}
  | inParentheses[exp]
);

var exp = memo $ eta expr ({
  [Left, binop ({"!!"})],
  [Left, binop ({"&&"})],
  [Nona, binop ({"==", "!=", "<", ">", "<=", ">="})],
  [Left, binop ({"+", "-"})],
  [Left, binop ({"*", "/", "%"})]
}, primary);

var stmt = memo $ eta syntax (
    kSkip {Skip}
  | to=lident s[":="] from=exp {Assn (to, from)}
  | kRead to=inParentheses[lident] {Read (to)}
  | kWrite from=inParentheses[exp] {Write (from)}
);

var stmts = memo $ eta syntax (
    stmt
  | s1=stmt s[";"] s2=stmts {Seq (s1, s2)}
);

-- Public top-level parser
public parse = stmts;
