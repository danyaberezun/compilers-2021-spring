-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun inbrWrap (p) {
  inbr (s ("("), p, s(")"))
}

fun binop (op) {
  [s (op), fun (l, unused, r) { Binop (op, l, r) }]
}

-- Primary expression
var primary = memo $ eta syntax (
        x=decimal { Const (stringInt (x)) }
      | x=lident  { Var (x) }
      | inbrWrap[exp]
);

var exp = memo $ eta (expr ({
        [Left, { binop ("!!") }],
        [Left, { binop ("&&") }],
        [Nona, map (binop, { "==", "!=", "<", ">", "<=", ">=" })],
        [Left, map (binop, { "+", "-" })],
        [Left, map (binop, { "*", "/", "%" })]
}, primary));

var stmt1 = memo $ eta syntax (
    kSkip {Skip}
  | x=lident s[":="] e=exp { Assn (x, e) }
  | kRead x=inbrWrap[lident] { Read (x) }
  | kWrite e=inbrWrap[exp] { Write (e) }
);

var stmt = memo $ eta syntax (
    stmt1 | s1=stmt1 s[";"] s2=stmt { Seq (s1, s2) }
);

-- Public top-level parser
public parse = stmt;
