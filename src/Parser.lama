-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | Val  -> v
  | Weak -> v
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | Ref  -> error ("reference expected", loc)
  | Weak -> Seq (v, Const (0))
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Var (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

fun funcCond (i, c, btIf, btElse) {
                                     (case i of
                                         Ref -> If (c (Val), btIf (Ref), btElse (Ref))
                                       | Void -> If (c (Val), btIf (Void), btElse (Void))
									   | Val  -> If (c (Val), btIf (Val), btElse (Val))
                                       | _ ->  If (c (Val), btIf (Weak), btElse (Weak))
                                     esac)
                                   }

fun funcExpr(mode, x, y){
     case mode of
     "idn" -> (case x of
	  Ref  -> Ref (y) |
	  Void -> Ignore (Var (y)) |
          _    -> Var (y)
     	  esac) |
      "elif" ->	(case x of
          Ref  -> y (Ref) |
          Void -> y (Void) |
          Val  -> y (Val) |
		  _ -> y (Weak)
         esac)
     esac
}

var point = s(",");
var rBck = s(")");
var lBck = s("(");
var eq = s (":=");
var simpleEq = s ("=");
var scln = s(";");
var lFBck = s("{");
var rFBck = s("}");

fun funcVoid(k ,x) {
     if x
	then fun (i) { assertVoid (i, k, x) }
     else
	fun (i) { assertVoid (i, k) }
     fi
}
 
var primary  = memo $ eta syntax (
                                 -- array constant
                                      loc=pos x=inbr[s("["), list0(syntax (e=exp {e(Val)})), s("]")] {fun (a) {assertValue (a, Array (x), loc)}}    |
                                      
                                      -- string constant
                                      loc=pos x=strlit                                               {fun (a) {assertValue (a, String (x), loc)}}   |
                                      
                                      -- character literal
                                      loc=pos x=chrlit                                               {fun (a) {assertValue (a, Const (x), loc)}}    |
								 inbr[lBck, scopeExpr, rBck] |
								 x=pos y=decimal    {fun (i) {assertValue (i, Const (stringInt (y)), x)}}    |
								 x=pos y=lident
                                          args=inbr[lBck, list0(syntax (expr=exp {expr (Val)})), rBck] {
                                    fun (i) {
                                        assertValue (i, Call (y, args), x)
                                    }
                                  }   |
								 x=pos y=lident     {fun (i) {
                                                          funcExpr("idn", i, y)
                                                        }}    |
								 x=pos kSkip { funcVoid(Skip, x)}                             				   |
								 whileSynt		|
								 ifSynt | 
								 kFor init=scopeExpr point c=exp point post=exp x=pos kDo crp=scopeExpr kOd {
                                    fun (i) {
                                      case init (Void) of
                                        Scope (defs, initExpr) ->
                                        assertVoid (i, Scope (defs, Seq (initExpr,
                                                                    While (c (Val),
                                                                           Seq (crp (Void), post (Void))))),
                                                    x)
                                      esac
                                    }
                                 }),
	scopeExpr = memo $ eta syntax (defs=sent expr=exp {
                                       fun (a) {
                                         expandScope (defs, expr (a))
                                       }
                                     } |
                                     expr=exp {
                                       fun (a) {
                                         Scope({}, expr (a))
                                       }
                                     }),
      basic      = memo $ eta (expr ({[Right, {[s (":="),
                                                fun (l, loc, r) {
                                                  fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                               }]}],
                                      [Left , map (binop, {"!!"})],
                                      [Left , map (binop, {"&&"})],
                                      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                      [Left , map (binop, {"+", "-"})],
                                      [Left , map (binop, {"*", "/", "%"})]
                                     },
                                     postfix)),
      postfix    = memo $ eta syntax (loc=pos e=primary ps=(i=inbr[s("["), exp, s("]")] {Index (i (Val))})* {
                                                                               fun (a) {foldl (fun (e, p) {
                                                                                 case p of
                                                                                   Index (i) ->
                                                                                     fun (a) {
                                                                                       case a of
                                                                                         Ref -> ElemRef (e (Val), i)
                                                                                       | _   -> assertValue (a, Elem (e (Val), i), loc)
                                                                                       esac
                                                                                     }
                                                                                 esac
                                                                               }, e, ps) (a)
                                                              }}
                                     ),
      definition = memo $ eta syntax (kVar ds=list[syntax (lident (s["="] e=basic {e (Val)})?)] s[";"] {Local (ds)} |
                                      kFun name=lident
                                           args=inbr[s("("), list0 (lident), s(")")]
                                           body=inbr[s("{"), scopeExpr, s("}")] {
                                           Fun (name, args, body (Weak))
                                      }
                                     ),                                    
      exp        = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
var ifSynt = memo $ syntax (x=pos kIf c=exp kThen btIf=exp btElse=seqIf {
                                   fun(i){funcCond(i, c, btIf, btElse)}
                                 } );
var seqIf  = memo $ eta syntax (x=pos kFi {funcVoid(Skip, x)}                               |
                                  x=pos kElif c=exp kThen btIf=exp btElse=seqIf {
                                    fun(i){funcCond(i, c, btIf, btElse)}
                                  }                                                                              |
                                  x=pos kElse btElse=exp kFi {
                                    fun (i) {
                                      funcExpr("elif", i, btElse)
                                    }
                                  });

var  whileSynt = memo $ eta syntax(x=pos kWhile c=exp kDo crp=scopeEx kOd {
					funcVoid(While (c (Val), crp (Void)), x)
                                 }                                                                                |
                                 x=pos kDo crp=scopeEx kWhile c=exp kOd {
                                     fun (i) {
                                      case crp (Void) of
                                        Scope (defs, bodyExpr) -> assertVoid (i,
                                                                              Scope (defs,
                                                                                     DoWhile (bodyExpr, c (Val))))
                                      esac
                                    }
                                 }),
								 scopeEx = memo $ eta syntax (defs=sent expr=exp {
                                       fun (a) {
                                         expandScope (defs, expr (a))
                                       }
                                     } |
                                     expr=exp {
                                       fun (a) {
                                         Scope({}, expr (a))
                                       }
                                     });
var basL = list(memo $ eta syntax (x=lident simpleEq expr=basic {[x, Some (expr (Val))]} |
                                      x=lident {[x, None]}));
var sent = memo $ eta syntax (df | x1=df x2=sent {x1+++x2});
var df  = memo $ eta syntax (kVar x=basL scln {{Var (x)}} |
                                      kFun fName=lident args=inbr[lBck, list0(lident), rBck] h=inbr[lFBck,
                                          scopeEx, rFBck] {
                                        {Fun (fName, args, h (Weak))}
                                      });
