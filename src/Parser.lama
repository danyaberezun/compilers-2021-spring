-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
    fun (a) {
      assertValue (a, Binop (op, l (Val), r (Val)), loc)
    }
  }]
}

fun assertVoidFun(token, loc) {
  fun (attr) { assertVoid(attr, token, loc) }
}

fun assertValueFun(token, loc) {
  fun (attr) { assertValue(attr, token, loc) }
}

var ifParser = memo $ eta syntax(
      loc=pos kIf cond=exprParser kThen body=exprParser tail=ifTailParser { 
        fun (attr) {
          If(cond(Val), body(attr), tail(attr)) 
        }
      }
    ),
    ifTailParser = memo $ eta syntax(
      kElif cond=exprParser kThen body=exprParser tail=ifTailParser { 
        fun (attr) {
          If(cond(Val), body(attr), tail(attr)) 
        }
      } |
      -kElse exprParser -kFi |
      kFi { fun (attr) { Skip } }
    );

var primaryParser = memo $ eta syntax (
      -- decimal constant
      loc=pos x=decimal {
        -- fun (attr) {assertValue (attr, Const (stringInt (x)), loc)}
        assertValueFun(Const(stringInt (x)), loc)
      } |
      -- identifier
      x=lident {
        fun (attr) {
          case attr of
            Ref  -> Ref (x)
          | Void -> Ignore (Var (x))
          | _    -> Var (x)
          esac
      }} |
      -- Brackets
      inbr[s("("), exprParser, s(")")] |
      -- Skip
      loc=pos kSkip { 
        assertVoidFun(Skip, loc)
      } |
      -- Read
      loc=pos kRead x=inbr[s("("), lident, s(")")] {
        assertVoidFun(Read(x), loc)
      } |
      -- Write
      loc=pos kWrite e=inbr[s("("), exprParser, s(")")] { 
        assertVoidFun(Write(e(Val)), loc)
      } |
      -- While
      loc=pos kWhile cond=exprParser kDo body=exprParser kOd { 
        assertVoidFun(While(cond(Val), body(Void)), loc)
      } |
      -- Do
      loc=pos kDo body=exprParser kWhile cond=exprParser kOd { 
        assertVoidFun(DoWhile(body(Void), cond(Val)), loc)
      } |
      -- For
      loc=pos kFor init=exprParser s[","] cond=exprParser s[","] incr=exprParser kDo body=exprParser kOd { 
        assertVoidFun(Seq(init(Void), While(cond(Val), Seq(body(Void), incr(Void)))))
      } |
      -- If
      ifParser
    ),
    basicParser = memo $ eta (expr ({
      [Right, {[s (":="), fun (l, loc, r) {
        -- fun (attr) {assertValue (attr, Assn (l (Ref), r (Val)), loc)}
        assertValueFun(Assn (l (Ref), r (Val)), loc)
      }]}],
      [Left , map (binop, {"!!"})],
      [Left , map (binop, {"&&"})],
      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
      [Left , map (binop, {"+", "-"})],
      [Left , map (binop, {"*", "/", "%"})]
    }, primaryParser)),
    exprParser = memo $ eta syntax (
      basicParser | 
      s1=basicParser s[";"] s2=exprParser {
        fun (attr) {Seq (s1 (Void), s2 (attr))}
    });

-- Public top-level parser
public parse = syntax (s=exprParser {s (Void)});
