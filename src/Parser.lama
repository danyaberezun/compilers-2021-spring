-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Auxiliary function to calculate binary expression
fun binOp (op) {
  [syntax (pos -s[op]), fun (l, loc, r) { 
    fun (a) {
      assertValue (a, Binop (op, l (Val), r (Val)), loc)
    }
  }]
}

-- Primary expression
var primary = memo $ eta syntax (
  loc = pos x = decimal {fun (a) {assertValue (a, Const (stringInt (x)), loc)}} |

            x = lident  {fun (a) {
              case a of
                Ref  -> Ref (x)
              | Void -> Ignore (Var (x))
              | _    -> Var (x)
              esac
            }} |

  inbr[s("("), exp, s(")")] |
  loc = pos kSkip {fun (a){assertVoid(a, Skip, loc)}} |
  loc = pos kRead  x = inbr[s("("), exp, s(")")] {fun (a){assertVoid (a, Read (x (Ref)), loc)}} |
  loc = pos kWrite e = inbr[s("("), exp, s(")")] {fun (a){assertVoid (a, Write (e (Val)), loc)}} |

  controlFlow
),

  basic = memo $ eta (expr ({[Right, {[s (":="), fun (l, loc, r) { fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)} }]}],
                             [Left , map (binOp, {"!!", "&&"})],
                             [Nona , map (binOp, {"==", "!=", "<", ">", "<=", ">="})],
                             [Left , map (binOp, {"+", "-"})],
                             [Left , map (binOp, {"*", "/", "%"})]
                            }, primary)
  ),

  exp = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

var elseStmt = memo $ eta syntax (
   loc=pos kFi {fun (a){Skip}} |
   kElse s2=exp kFi {fun (a){s2(a)}} |
   kElif e=exp kThen s1=exp s2=elseStmt {fun (a){If (e(Val), s1(a), s2(a))}}
  ),

  controlFlow = memo $ eta syntax (
    loc = pos kWhile e = exp kDo s = exp kOd {fun (a){assertVoid(a, While (e (Val), s (Void)), loc)}} | 
    loc = pos kIf e = exp kThen s1 = exp s2 = elseStmt {fun (a){If (e (Val), s1 (a), s2(a))}} |
    loc = pos kDo s = exp kWhile e = exp kOd {fun (a){assertVoid(a, Seq (s(Void), While (e(Val), s(Void))), loc)}} |
    loc = pos kFor s1 = exp s[","] e = exp s[","] s2 = exp kDo s3 = exp kOd {fun (a){assertVoid(a, Seq (s1(Void), While (e(Val), Seq (s3(Void), s2(Void) ))), loc)  }}
  );

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
