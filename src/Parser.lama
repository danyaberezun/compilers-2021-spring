-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (v, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun inRoundBrackets(p) {
  inbr(s ("("), p, s (")"))
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Var (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

var binopParsers = {
  [Right, {[s (":="), fun (l, loc, r) {
                        fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                      }]}],
  [Left , map (binop, {"!!"})],
  [Left , map (binop, {"&&"})],
  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
  [Left , map (binop, {"+", "-"})],
  [Left , map (binop, {"*", "/", "%"})]
};

var primary = memo $ eta syntax (
  loc=pos n=decimal {
    fun (atr) {
      assertValue (atr, Const (stringInt (n)), loc)
    }
  } |
  loc=pos func=lident args=inRoundBrackets[list0 (argParser)] {
    fun (atr) {
      assertValue (atr, Call (func, args), loc)
    }
  } |
  loc=pos x=lident {
    fun (atr) {
      case atr of
        Ref -> Ref (x)
      | Void -> Ignore (Var (x))
      | _ -> Var (x)
      esac
    }
  } |
  loc=pos kSkip {
    fun (atr) {
      assertVoid (atr, Skip, loc)
    }
  } |
  loc=pos kRead e=inRoundBrackets[exp] {
    fun (atr) {
      assertVoid (atr, Read (e (Ref)), loc)
    }
  } |  
  loc=pos kWrite e=inRoundBrackets[exp] {
    fun (atr) {
      assertVoid(atr, Write (e (Val)), loc)
    }
  } |
  kIf cond=exp kThen body=scopeExpr elseTail=elsePart {
    fun (atr) {
      If (cond (Val), body (atr), elseTail (atr))
    }
  } |
  loc=pos kWhile cond=exp kDo body=scopeExpr kOd {
    fun (atr) {
      assertVoid(atr, While (cond (Val), body (Void)), loc)
    }
  } |
  loc=pos kDo body=scopeExpr kWhile cond=exp kOd {
    fun (atr) {
      distributeScope(
        body (Void), 
        fun (loopBody) {
          assertVoid(atr, DoWhile (loopBody, cond (Val)), loc)
        }
      )
    }
  } |
 loc=pos kFor init=scopeExpr s[","] cond=exp s[","] step=exp kDo body=scopeExpr kOd {
   fun (atr) {
      var fullBody = Seq (body (Void), step (Void));
      var whilePart = While (cond (Val), fullBody);
      distributeScope(
        init (Void),
        fun (initPart) {
          assertVoid(atr, Seq (initPart, whilePart), loc)
        }
      )
    }
  } | 
  inRoundBrackets[scopeExpr]
),
argParser = memo$ eta syntax (arg=exp {arg (Val)}),
elsePart = memo $ eta syntax (
  kElif cond=exp kThen body=scopeExpr elseTail=elsePart {
    fun (atr) {
      If (cond (Val), body (atr), elseTail (atr))
    }
  } |
  kElse body=scopeExpr kFi {
    body
  } |
  loc=pos kFi {
    fun (atr) {
      assertVoid (atr, Skip, loc)
    }
  }
),
varDef = memo $ eta syntax (
  x=lident {
    [x, None]
  } |
  x=lident s["="] init=basic {
    [x, Some (init (Val))]
  }
),
genericDef = memo $ eta syntax (
  s["var"] varDefs=list[varDef] s[";"] {
    Var (varDefs)
  } |
  s["fun"] funName=lident args=inRoundBrackets[list0 (lident)] s["{"] body=scopeExpr s["}"] {
    Fun (funName, args, body (Weak))
  }
),
defenitions = memo $ eta syntax (
  headDef=genericDef tailDefs=defenitions {
    headDef : tailDefs
  } |
  headDef=genericDef {
    {headDef}
  }
),
scopeExpr = memo $ eta syntax (
  defs=defenitions e=exp {
    fun (atr) {
      expandScope (defs, e (atr))
    }
  } |
  e=exp {
    fun (atr) {
      Scope ({}, e (atr))
    }
  }
),
basic = memo $ eta (expr (binopParsers, primary)),
exp = memo $ eta syntax (
  basic |
  s1=basic s[";"] s2=exp {
    fun (atr) {
      Seq (s1 (Void), s2 (atr))
    }
  }
);

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
