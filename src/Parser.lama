-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

fun branchOrSkip (opt, a) {
  case opt of
    None -> Skip
  | Some (v) -> v (a)
  esac
}

var ifPart = memo $ eta syntax (
        loc=pos -kIf cond=exp -kThen ifBranch=exp elseBranches=elsePart? -kFi { fun (a) { If (cond (Val), ifBranch (a), branchOrSkip (elseBranches, a)) } }
      ),
    elsePart = memo $ eta syntax (
        loc=pos -kElif cond=exp -kThen elifBranch=exp tail=elsePart? { fun (a) { If (cond (Val), elifBranch (a), branchOrSkip (tail, a)) } } |
        -kElse elseBranch=exp
      ),
    whileDo = memo $ eta syntax (
        loc=pos -kWhile cond=exp -kDo loopCode=exp -kOd { fun (a) { assertVoid (a, While (cond (Val), loopCode (Void)), loc) } }
      ),
    doWhile = memo $ eta syntax (
        loc=pos-kDo loopCode=exp -kWhile cond=exp -kOd { fun (a) { assertVoid (a, DoWhile (loopCode (Void), cond (Val)), loc) } }
      ),
    forExpr = memo $ eta syntax (
        loc=pos -kFor start=exp s[","] cond=exp s[","] ending=exp -kDo loopCode=exp -kOd
        { fun (a) { assertVoid (a, Seq (start (Void), While (cond (Val), Seq (loopCode (Void), ending (Void)))), loc) } }
      ),
    primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                  -- identifier
                                  x=lident {fun (a) {
                                              case a of
                                                Ref  -> Ref (x)
                                              | Void -> Ignore (Var (x))
                                              | _    -> Var (x)
                                              esac
                                            }} |
                                  -s["("] exp -s[")"] |
                                  loc=pos -kSkip { fun (a) { assertVoid (a, Skip, loc) } } |
                                  loc=pos -kRead s["("] name=exp s[")"] { fun (a) { assertVoid (a, Read (name (Ref)), loc) }} |
                                  loc=pos -kWrite s["("] res=exp s[")"] { fun (a) { assertVoid (a, Write (res (Val)), loc) } } |
                                  ifPart |
                                  whileDo | doWhile | forExpr
                                  ),
    basic = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),
    exp = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});


-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
