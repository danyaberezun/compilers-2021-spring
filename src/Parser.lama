-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;
import STM;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- AST environment
fun createEnv (id) {
  fun freshName () {
    [createEnv (id+1), sprintf ("_tmp%d", id)]
  }

  [freshName]
}

fun emptyEnv () {
  createEnv (0)
}

fun freshName (env) {
  env [0] ()
}

-- Attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, vl, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> vl => fun (vl) {Ignore (vl)}
  | _    -> vl
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, vl, loc) {
  case atr of
    Void -> vl
  | Val  -> error ("value expected", loc)
  | Weak -> vl => fun (vl) {Seq (vl, Const (0))}
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, l (Val) =>> fun (l) {
                                            r (Val) =>  fun (r) {
                                              Binop (op, l, r)
                                            }}, loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandVarDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  fun expandValDefs (defs, expr) {
    foldr (fun ([defs, expr], [ident, value]) {     
             [ident : defs, Seq (Ignore (Assn (ident, value)), expr)]
           },
           [{}, expr],
           defs)
  }
  
  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Val (ds) ->
                 case expandValDefs (ds, expr) of
                   [ds, expr] -> [Val (ds) : defs, expr]
                 esac
             | Var (ds) ->             
                 case expandVarDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

-- Helper AST function: reifies pattern bindings into scope
-- definitions and assignments; takes an returns lists of
-- pattern-branch pairs
fun reifyPatternBindings (matched, brs) {
  map (
    fun ([pat, br]) {      
      fun collectBindings (path, p) {
        fun collectList (path, ps) {
          case
            foldl (fun ([acc, i], p) {
                     [collectBindings (i : path, p) : acc, i+1]                      
                   },
                   [{}, 0],
                   ps) of
            [acc, _] -> flatten (acc)
          esac            
        }
        
        case p of
          Sexp  (_, ps)   -> collectList (path, ps)
        | Array (ps)      -> collectList (path, ps)
        | Named (name, p) -> [name, path] : collectBindings (path, p)
        |  _              -> {}
        esac
      }

      case collectBindings ({}, pat) of
        {}       -> [pat, br]
      | bindings ->
           [pat,
             expandScope (
               {Val (map (
                      fun ([name, path]) {
                        [name, foldr (fun (p, i) {Elem (p, Const (i))}, Var (matched), path)]
                      },
                      bindings))},
               br
             )]
      esac
    },
    brs
  )
}

var
  primary = memo $ eta syntax (
    -- array constant
    loc=pos x=inbr[s("["), list0(syntax (e=exp {e(Val)})), s("]")] {
      fun (a) {assertValue (a, chainST (x) => fun (x) {Array (x)}, loc)}
    } |
                                      
    -- string constant
    loc=pos x=strlit {
      fun (a) {assertValue (a, returnST $ String (x), loc)}
    } |
                                      
    -- character literal
    loc=pos x=chrlit {
      fun (a) {assertValue (a, returnST $ Const (x), loc)}
    } |
                                      
    -- decimal constant
    loc=pos x=decimal {
      fun (a) {assertValue (a, returnST $ Const (stringInt (x)), loc)}
    } |
                                      
    -- identifier
    loc=pos x=lident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? {
      fun (a) {
        case args of
          None -> returnST $ case a of
                               Ref  -> Ref (x)
                             | Void -> Ignore (Var (x))
                             | _    -> Var (x)
                             esac
        | Some (args) -> assertValue (a, chainST (args) => fun (args) {Call (x, args)}, loc)
        esac}
    } |

    -- S-expression
    loc=pos x=uident args=inbr[s("("), list0(syntax(e=exp {e (Val)})), s(")")]? {
      fun (a) {
        assertValue (a, case args of
                          None        -> returnST $ Sexp (x, {})
                        | Some (args) -> chainST (args) => fun (args) {Sexp (x, args)}
                        esac, loc)}
    } |
  
    inbr[s("("), scopeExpr, s(")")] |
    loc=pos kSkip {fun (a){assertVoid(a, returnST $ Skip, loc)}} |
    controlFlow),
   

  basic = memo $ eta (
    expr ({[Right, {[s (":="), fun (l, loc, r) {
                                 fun (a) {assertValue (a, l (Ref) =>> fun (l) {
                                                          r (Val) =>  fun (r) {
                                                          Assn (l, r)
                                                          }},
                                                        loc)
                                 }
                               }]}],
           [Left , map (binop, {"!!"})],
           [Left , map (binop, {"&&"})],
           [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
           [Left , map (binop, {"+", "-"})],
           [Left , map (binop, {"*", "/", "%"})]
          },
          postfix)
  ),
  
  postfix = memo $ eta syntax (
    loc=pos e=primary ps=(i=inbr[s("["), exp, s("]")] {Index (i (Val))})* {
      fun (a) {
        foldl (fun (e, p) {                                                                            
                 case p of                                                                                   
                   Index (i) ->
                    fun (a) {
                      case a of
                        Ref -> e (Val) =>> fun (e) {
                               i       =>  fun (i) {
                                 ElemRef (e, i)
                               }} 
                      | _   -> assertValue (a, e (Val) =>> fun (e) {
                                               i       =>  fun (i) {
                                               Elem (e, i)
                                               }},
                                            loc)
                      esac
                    }
                 esac                                                                            
               }, e, ps) (a)
      }}
  ),
  
  scopeExpr  = memo $ eta syntax (ds=definition* e=exp? {
    fun (a) {
      fun (e) {
        case ds of
          {} -> e
        | _  -> chainST (ds) =>> fun (ds) {
                e            =>  fun (e)  {
                  expandScope (ds, e)
                }}
        esac
      }
      (case e of 
        Some (e) -> e (a)
      | _        -> returnST $ Skip
      esac)
    }}                                                                  
  ),
  
  definition = memo $ eta syntax (
    kVar ds=list[syntax (x=lident e=(-s["="] basic)? {case e of
                                                        None -> returnST $ [x, None]
                                                      | Some (e) ->
                                                          e (Val) => fun (e) {[x, Some (e)]}
                                                      esac})] s[";"] {
      chainST (ds) => fun (ds) {Var (ds)}
    } |
    kVal ds=list[syntax (x=lident s["="] e=basic {e (Val) => fun (e) {[x, e]}})] s[";"] {
      chainST (ds) => fun (ds) {Val (ds)}
    } |  
    kFun name=lident args=inbr[s("("), list0 (lident), s(")")] body=inbr[s("{"), scopeExpr, s("}")] {
      body (Weak) => fun (body) {Fun (name, args, body)}
    }
  ),
  
  exp = memo $ eta syntax (
    basic
  | s1=basic s[";"] s2=exp {
     fun (a) {
       s1 (Void) =>> fun (s1) {
       s2 (a)    =>  fun (s2) {
         Seq (s1, s2)
       }}
     }
   }
  );

var elseStmt = memo $ eta syntax (
   loc=pos kFi {fun (a){returnST $ Skip}} |
   kElse s2=exp kFi {fun (a){s2(a)}} |
   kElif e=exp kThen s1=exp s2=elseStmt {fun (a){ chainST({e (Val), s1 (a), s2(a)}) => fun ({e,s1,s2}){If (e, s1, s2)}  }}
  ),


 controlFlow = memo $ eta syntax (
	  loc=pos kWhile e=exp kDo s=scopeExpr kOd {fun (a){assertVoid(a, chainST({e (Val), s (Void)}) => fun ({e, s}){While (e, s)}, loc) }} |  
	  loc=pos kIf e=exp kThen s1=scopeExpr s2=elseStmt {fun (a){ chainST({e (Val), s1 (a), s2(a)}) => fun ({e,s1,s2}){If (e, s1, s2)}  }} |

    loc=pos kDo s=scopeExpr kWhile e=exp kOd {genDoWhileScope(s, e, loc) } |

    loc=pos kFor s1=scopeExpr s[","] e=exp s[","] s2=exp kDo s3=scopeExpr kOd {genForScope(s1, e, s2, s3, loc)} |

    loc=pos kCase e=exp kOf ps=patterns kEsac { genCase(e, ps, loc) }
),

  patterns = memo $ eta syntax (
    p=pattern s["->"] e=scopeExpr s["|"] cs=patterns {[p, e] : cs} |
    p=pattern s["->"] e=scopeExpr {{[p, e]}}
  ),

  pattern = memo $ eta syntax (
      s["_"] {[Wildcard, {}]}
    | x=decimal {[Decimal (stringInt(x)), {}]} 

    | x=lident args=(-s["@"] pattern)? {
        case args of
          None -> [Named (x), {Var ({x})}]
        | Some ([args, defs]) -> [NamedPattern (x, args), Var({x}):defs]
        esac
      }
    | args=inbr[s("["), list(syntax(pattern)), s("]")] {
        case args of
          args ->
            case unzip (args) of
              [args, defs] -> [ Array(args), foldl(fun(t,a){a+++t},{},defs)]
            esac
        esac
      }
    | x=uident args=inbr[s("("), list0(syntax(pattern)), s(")")]? {
        case args of
          None -> [Sexp (x, {}), {}]
        | Some (args) -> 
            case unzip (args) of 
              [args, defs] -> [Sexp (x, args), foldl(fun(t, a){a+++t},{},defs)]
            esac
        esac
      }
    
  );

fun genCase(e, ps, loc){
  fun (a){
    case unzip(ps) of [p, s] ->
      chainST(
        e (Val) : map (fun(b){b(a)},s)
      )=>
      fun (e : s){
        Case (e, zip (p, s))
      }
    esac

  } 
}

fun genForScope(s1, e, s2, s3, loc){

  fun genExpr(exp1, exp2, e, s2){
    Seq (exp1, While (e, Seq (exp2, s2 )))
  }

  fun (a) {
    assertVoid(
      a,
      chainST({s1 (Void), e (Val), s2 (Void), s3 (Void)})=>fun({s1, e, s2, s3}){
        case s1 of
          Scope (defs1, exp1) ->
            case s3 of 
              Scope (defs2, exp2) -> Scope (defs1+++defs2, genExpr(exp1, exp2, e, s2))
            | exp2 -> Scope (defs1, genExpr(exp1, exp2, e, s2)) 
            esac
        | exp1 ->
            case s3 of 
              Scope (defs2, exp2) -> Scope (defs2, genExpr(exp1, exp2, e, s2))
            | exp2 -> genExpr(exp1, exp2, e, s2) 
            esac
        esac
      },
      loc
    )
  }
}

fun genDoWhileScope (s, e, loc){
  fun (a) { 
    assertVoid(
      a, 
      chainST({s (Void), e (Val)}) => fun ({s, e}){
        case s of
          Scope (def, exp) -> Scope (def, Seq (exp, While (e, exp)))
        | exp -> Seq (exp, While (e, exp))
        esac
      },
      loc
    )
  }
}
-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void) (emptyEnv ()) [1]});
