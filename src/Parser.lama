-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

fun assertRef (atr, v, loc) {
  case atr of
    Ref  -> Ref (v)
  | Void -> Skip
  | _    -> Var (v)
  esac
}

fun assertF (f, v, loc) {
  fun (a) {
    f (a, v, loc)
  }
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun inpar (p) {
  inbr (s ("("), p, s (")"))
}

var primary  = memo $ eta syntax (
                                  loc=pos x=decimal { assertF (assertValue, Const (stringInt (x)), loc) } |
                                  loc=pos x=lident { assertF (assertRef, x, loc) } |
                                  inpar[exp] |
                                  loc=pos kSkip { assertF (assertVoid, Skip, loc) } |
                                  loc=pos kWrite from=inpar[exp] { assertF (assertVoid, Write (from (Val)), loc) } |
                                  loc=pos kRead to=inpar[exp] { assertF (assertVoid, Read (to (Ref)), loc) } |
                                  kWhile expr=exp kDo loc=pos body=exp kOd { assertF (assertVoid, While (expr (Val), body (Void)), loc) } |
                                  kDo loc=pos body=exp kWhile expr=exp kOd { assertF (assertVoid, DoWhile (body (Void), expr (Val)), loc) } |
                                  kIf cond=exp kThen body=exp elfs=elifs { fun (a) { If (cond (Val), body (a), elfs (a)) } } |
                                  kFor init=exp s[","] cond=exp s[","] inc=exp kDo loc=pos body=exp kOd { assertF (assertVoid, Seq (init (Void), While (cond (Val), Seq (body (Void), inc (Void)))), loc) }),
    elifs = memo $ eta syntax (
                                kElif cond=exp kThen body=exp elfs=elifs { fun (a) { If (cond (Val), body (a), elfs (a)) } } |
                                -kElse exp -kFi |
                                loc=pos kFi { assertF (assertVoid, Skip, loc) }),
    basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),
    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
