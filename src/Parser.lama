-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | Val  -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | Ref  -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Public top-level parser
-- public parse = stmtSeq;
--=======
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

var primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal    {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |
                                  -- identifier
                                  loc=pos x=lident     {fun (a) {
                                                          case a of
                                                              Ref  -> Ref (x)
                                                            | Void -> Ignore (Var (x))
                                                            | _    -> Var (x)
                                                          esac
                                                        }}                                                         |
                                 -- (exp)
                                 inbr[s ("("), exp, s (")")]                                                       |
                                 loc=pos kRead x=inbr[s ("("), exp, s (")")] {fun (a) {
                                                                                assertVoid (a, Read (x (Ref)), loc)
                                                                             }}                                    |
                                 loc=pos kWrite x=inbr[s ("("), exp, s (")")] {fun (a) {
                                                                                 assertVoid (a, Write (x (Val)), loc)
                                                                              }}                                   |
                                 loc=pos kSkip {fun (a) { assertVoid (a, Skip, loc) }}                             |
                                 loc=pos kIf cond=exp kThen ifBr=exp elseBr=ifChain {
                                   fun (a) {
                                     case a of
                                         Ref -> If (cond (Val), ifBr (Ref), elseBr (Ref))
                                       | Void -> If (cond (Val), ifBr (Void), elseBr (Void))
                                       | Val ->  If (cond (Val), ifBr (Val), elseBr (Val))
                                     esac
                                   }
                                 }                                                                                 |
                                 loc=pos kWhile cond=exp kDo body=exp kOd {
                                   fun (a) {
                                     assertVoid (a, While (cond (Val), body (Void)), loc)
                                   }
                                 }                                                                                |
                                 loc=pos kDo body=exp kWhile cond=exp kOd {
                                    fun (a) {
                                      assertVoid (a, DoWhile (body (Void), cond (Val)))
                                    }
                                 }                                                                                |
                                 kFor init=exp s[","] cond=exp s[","] post=exp loc=pos kDo body=exp kOd {
                                    fun (a) {
                                      assertVoid (a, Seq (init (Void),
                                                  While (cond (Val), Seq (body (Void), post (Void)))),
                                                  loc)
                                    }
                                 }),
    ifChain  = memo $ eta syntax (loc=pos kFi {fun (a) {assertVoid (a, Skip, loc)}}                               |
                                  loc=pos kElif cond=exp kThen ifBr=exp elseBr=ifChain {
                                    fun (a) {
                                      case a of
                                          Ref  -> If (cond (Val), ifBr (Ref), elseBr (Ref))
                                        | Void -> If (cond (Val), ifBr (Void), elseBr (Void))
                                        | Val  -> If (cond (Val), ifBr (Val), elseBr (Val))
                                      esac
                                    }
                                  }                                                                              |
                                  loc=pos kElse elseBr=exp kFi {
                                    fun (a) {
                                      case a of
                                          Ref  -> elseBr (Ref)
                                        | Void -> elseBr (Void)
                                        | Val  -> elseBr (Val)
                                      esac
                                    }
                                  }),
    basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),
    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
