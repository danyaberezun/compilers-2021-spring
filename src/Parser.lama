-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (v, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Var (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}


fun branchOrSkip (opt, a, loc) {
  case opt of
    None -> assertVoid (a, Skip, loc)
  | Some (v) -> v (a)
  esac
}

fun pushVar (xs) {
  map (fun (x) { x (Var) }, xs)
}

var ifPart = memo $ eta syntax (
        loc=pos -kIf cond=exp -kThen ifBranch=scopeExpr elseBranches=elsePart? -kFi { fun (a) { If (cond (Val), ifBranch (a), branchOrSkip (elseBranches, a, loc)) } }
      ),
    elsePart = memo $ eta syntax (
        loc=pos -kElif cond=exp -kThen elifBranch=scopeExpr tail=elsePart? { fun (a) { If (cond (Val), elifBranch (a), branchOrSkip (tail, a, loc)) } } |
        -kElse elseBranch=scopeExpr
      ),
    whileDo = memo $ eta syntax (
        loc=pos -kWhile cond=exp -kDo loopCode=scopeExpr -kOd { fun (a) { assertVoid (a, While (cond (Val), loopCode (Void)), loc) } }
      ),
    doWhile = memo $ eta syntax (
        loc=pos-kDo loopCode=scopeExpr -kWhile cond=exp -kOd { fun (a) { assertVoid (a, distributeScope (loopCode (Void), fun (loopCode) { DoWhile (loopCode, cond (Val)) }), loc) } }
      ),
    forExpr = memo $ eta syntax (
        loc=pos -kFor start=scopeExpr s[","] cond=exp s[","] ending=exp -kDo loopCode=scopeExpr -kOd
        { fun (a) { assertVoid (a, distributeScope (start (Void), fun (start) { Seq (start, While (cond (Val), Seq (loopCode (Void), ending (Void)))) }), loc) } }
      ),
    primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                  -- identifier
                                  x=lident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]?
                                           {fun (a) {
                                              case args of
                                                None -> case a of
                                                          Ref  -> Ref (x)
                                                        | Void -> Ignore (Var (x))
                                                        | _    -> Var (x)
                                                        esac
                                              | Some (args) -> assertValue (a, Call (x, args))
                                              esac
                                            }} |
                                  -s["("] scopeExpr -s[")"] |
                                  loc=pos -kSkip { fun (a) { assertVoid (a, Skip, loc) } } |
                                  loc=pos -kRead s["("] name=exp s[")"] { fun (a) { assertVoid (a, Read (name (Ref)), loc) }} |
                                  loc=pos -kWrite s["("] res=exp s[")"] { fun (a) { assertVoid (a, Write (res (Val)), loc) } } |
                                  ifPart |
                                  whileDo | doWhile | forExpr |
                                  loc=pos name=lident s["("] args=list0[exp] s[")"] { fun (a) { assertValue (a, Call (name, pushVar (args))) } }
                                  ),
    basic = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),
    exp = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}}),
    defVar = memo $ eta syntax (
                                name=lident s["="] value=basic { [name, Some (value (Var))] } |
                                name=lident { [name, None] } 
                               ),
    oneDef = memo $ eta syntax (
                              -kVar vars=list[defVar] s[";"] { Var (vars) } |
                              -kFun name=lident s["("] args=list0[lident] s[")"] s["{"] body=scopeExpr s["}"] { Fun (name, args, body (Weak)) }
                             ),
    scopeExpr = memo $ eta syntax (
                                    loc=pos defs=oneDef* body=exp? {
                                        fun (a) { 
                                          case defs of
                                            {} -> branchOrSkip (body, a)
                                          | _ -> expandScope (defs, branchOrSkip (body, a, loc))
                                          esac 
                                        } }
                                  );

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
