-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, vl, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (vl)
  | _    -> vl
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, vl, loc) {
  case atr of
    Void -> vl
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (vl, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Var (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

fun spaceBrackets (a, b) {
  a |> lift (inbr (s ("("), b, s (")")))
}

var decimalConst = memo $ eta syntax (loc=pos x=decimal { fun (a) { assertValue (a, Const (stringInt (x)), loc) } });
var stringLit    = memo $ eta syntax (loc=pos x=strlit { fun (a) { assertValue (a, String (x), loc) } });
var charLit      = memo $ eta syntax (loc=pos x=chrlit { fun (a) { assertValue (a, Const (x), loc) } });
var arrayConst   = memo $ eta syntax (loc=pos x=inbr[s("["), list0(syntax (e=exprSeq {e(Val)})), s("]")] { fun (a) { assertValue (a, Array (x), loc) } });
var identExpr    = memo $ eta syntax (loc=pos x=lident args=inbr[s("("), list0(syntax(e=exprSeq {e(Val)})), s(")")]? {
  fun (a) {
    case args of
      None -> case a of
                Ref  -> Ref (x)
              | Void -> Ignore (Var (x))
              | _    -> Var (x)
              esac
    | Some (args) -> assertValue (a, Call (x, args), pos)
    esac
  }
});

var skipExpr    =  memo $ eta syntax (loc=pos kSkip { fun (a) { assertVoid (a, Skip, loc) } });

-- var readExpr    =  memo $ eta syntax (loc=pos x=spaceBrackets [kRead, lident] { fun (a) { assertVoid (a, Read (x), loc) } });
-- var writeExpr   =  memo $ eta syntax (loc=pos x=spaceBrackets [kWrite, basicExpr] { fun (a) { assertVoid (a, Write (x (Val)), loc) } });

var whileExpr   =  memo $ eta syntax (loc=pos kWhile x=basicExpr kDo y=scopeExpr kOd {
  fun (a) {
    assertVoid (a, While (x (Val), y (Void)), loc)
  }
});

var doWhileExpr =  memo $ eta syntax (kDo x=scopeExpr kWhile y=basicExpr kOd {
  fun (a) {
    assertVoid (a, distributeScope (x (Void), fun (e) { DoWhile (e, y (Val)) }), loc)
  }
 });

var ifExpr      =  memo $ eta syntax (kIf x=basicExpr kThen y=scopeExpr z=ifVariation {
  fun (a) {
    If (x (Val), y (a), z (a))
  }
});
var ifVariation =  memo $ eta syntax (
  loc=pos kFi { fun (a) { assertVoid (a, Skip, pos) } } |
  kElse x=scopeExpr kFi {x}  |
  kElif x=basicExpr kThen y=scopeExpr z=ifVariation { fun (a) { If (x (Val), y (a), z (a)) } }
);

var forExpr     =  memo $ eta syntax (loc=pos kFor x=scopeExpr s[","] y=basicExpr s[","] z=exprSeq kDo w=scopeExpr kOd {
  fun (a) {
    distributeScope (x (Void), fun (e) { assertVoid (a, Seq (e, While (y (Val), Seq (w (Void), z (Void)))), loc) })
  }
});

var primaryExpr =  memo $ eta syntax (
  decimalConst |
  stringLit    |
  charLit      |
  arrayConst   |
  identExpr    |
  skipExpr     |
  whileExpr    |
  doWhileExpr  |
  ifExpr       |
  forExpr      |
  inbr[s ("("), scopeExpr, s (")")]
);

var postfixExpr = memo $ eta syntax (loc=pos e=primaryExpr ps=(i=inbr[s("["), exprSeq, s("]")] {Index (i (Val))})* {
  fun (a) {foldl (fun (e, p) {
    case p of
      Index (i) ->
        fun (a) {
          case a of
            Ref -> ElemRef (e (Val), i)
          | _   -> assertValue (a, Elem (e (Val), i), loc)
          esac
        }
    esac
  }, e, ps) (a)
  }
});

var basicExpr   =  memo $ eta expr ({
  [Right, {[s (":="), fun (l, loc, r) { fun (a) { assertValue (a, Assn (l (Ref), r (Val)), loc) } } ]}],
  [Left , map (binop, {"!!"})],
  [Left , map (binop, {"&&"})],
  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
  [Left , map (binop, {"+", "-"})],
  [Left , map (binop, {"*", "/", "%"})]},
  postfixExpr
);

var varExpr      = memo $ eta syntax (kVar vars=list[varVariation] s[";"] {Var (vars)});
var varVariation = memo $ eta syntax (x=lident {[x, None]} | x=lident s["="] y=basicExpr {[x, Some (y (Val))]});

var funExpr      = memo $ eta syntax (
  loc=pos kFun f=lident s["("] args=list0[lident] s[")"] s["{"] e=scopeExpr s["}"] {Fun (f, args, e (Weak))}
);

var exprSeq      = memo $ eta syntax (basicExpr | s1=basicExpr s[";"] s2=exprSeq { fun (a) { Seq (s1 (Void), s2 (a)) } });

var scopeExpr    = memo $ eta syntax (
  defs=def* e=exprSeq { fun (a) { expandScope (defs, e (a)) } }   |
  defs=def*           { fun (a) { expandScope (defs, Skip) } }
);
var def          = memo $ eta syntax (varExpr | funExpr);

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
