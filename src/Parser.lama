-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [s (op), fun (l, _, r) {Binop (op, l , r)}]
}
-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta (expr ({[Left, map (binop, {"!!"})],
        [Left, map (binop, {"&&"})],
        [Nona, map (binop, {"==", "!=", "<", ">", "<=", ">="})],
        [Left, map (binop, {"+", "-"})],
        [Left, map (binop, {"*", "/", "%"})]
      }, primary));

var simpleStmt = memo $ eta syntax (
    kSkip { Skip } |
    x=lident s[":="] e=exp { Assn (x, e) } |
    kRead x=inbr[s("("), lident, s(")")] { Read (x) } |
    kDo s=stmt kWhile e=exp kOd { DoWhile (s, e) } |
    kWrite e=inbr[s("("), exp, s(")")] { Write (e) } |
    kIf e=exp kThen s1=stmt s2=elseParser { If (e, s1, s2) } |
    kWhile e=exp kDo s=stmt kOd { While(e, s) } |
    kDo s=stmt kWhile e=exp kOd { DoWhile(s, e) } |
    kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd { Seq (s1, While (e, Seq (s3, s2))) }),
  stmt = memo $ eta syntax (simpleStmt | s1=simpleStmt s[";"] s2=stmt { Seq (s1, s2) }),
  elseParser = memo $ eta syntax (
    kElif e=exp kThen s1=stmt s2=elseParser { If (e, s1, s2) } |
    kElse s=stmt kFi { s } |
    kFi { Skip }
);

-- Public top-level parser
public parse = stmt;
