-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binOp (op) {
	[s (op), fun (l, _, r) {Binop (op, l, r)}]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta (expr ({
      		[Left, map (binOp, {"!!"})],
      		[Left, map (binOp, {"&&"})],
      		[Nona, map (binOp, {"==", "!=", "<", "<=", ">", ">="})],
      		[Left, map (binOp, {"+", "-"})],
      		[Left, map (binOp, {"*", "/", "%"})]
      	},
      	primary
      ));

var elseParser = memo $ eta syntax (
    kElif e=exp kThen s_0=stmt s_1=elseParser { If (e, s_0, s_1) } |
    kElse s=stmt kFi { s } |
    kFi { Skip }
);

var one_stmt = memo $ eta syntax (
		kSkip {Skip} 
	|	x=lident s[":="] e=exp {Assn (x, e)}
	|	kRead x=inbr[s("("), lident, s(")")] {Read(x)}
	|	kWrite e=inbr[s("("), exp, s(")")] {Write(e)}
	|   kIf e=exp kThen s_0=stmt s_1=elseParser { If (e, s_0, s_1) }
    |   kWhile e=exp kDo s=stmt kOd { While(e, s) }
    |   kDo s=stmt kWhile e=exp kOd { DoWhile(s, e) }
    |   kFor s_0=stmt s[","] e=exp s[","] s_1=stmt kDo s_2=stmt kOd { Seq (s_0, While (e, Seq (s_2, s_1))) }
);

var stmt = memo $ eta syntax (one_stmt | s_0=one_stmt s[";"] s_1=stmt {Seq (s_0, s_1)});
   

-- Public top-level parser
public parse = stmt;
