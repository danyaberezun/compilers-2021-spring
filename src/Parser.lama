-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}


var else_fun = memo $ eta syntax (loc = pos kElif x=exp kThen y=exp 			{fun (a) {If (x (Val), y (a), Skip)}} |
				  loc = pos kElif x=exp kThen y=exp z=else_fun		{fun (a) {If (x (Val), y (a), z (a))}} |
				  kElse x=exp {x});

var primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal                                 		{fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |
                                  -- identifier
                                  x=lident                                          		{fun (a) {
                                                                                       			case a of
                                                                                         			Ref  -> Ref (x)
                                                                                       				| Void -> Ignore (Var (x))
                                                                                       				| _    -> Var (x)
                                                                                       			esac
                                                                                    		}} |
				  inbr[s("("), exp, s(")")]  					 |
                                  loc = pos kSkip 						{fun (a) {assertVoid (a, Skip, loc)}} |
				  loc = pos kRead y=inbr[s("("), exp, s(")")] 			{fun (a) {assertVoid (a, Read (y (Ref)), loc)}} |
				  loc = pos kWrite y=inbr[s("("), exp, s(")")] 			{fun (a) {assertVoid (a, Write (y (Val)), loc)}} |
				  loc = pos kIf x=exp kThen y=exp kFi 				{fun (a) {If(x(Val), y(a), Skip)}} |
				  loc = pos kIf x=exp kThen y=exp z=else_fun kFi 		{fun (a) {If(x(Val), y(a), z(a))}} |
				  loc = pos kWhile x=exp kDo y=exp kOd				{fun (a) {assertVoid (a, While (x (Val), y (Void)), loc)}} | 
				  loc = pos kDo y=exp kWhile x=exp kOd				{fun (a) {assertVoid (a, DoWhile (y (Void), x (Val)), loc)}} |
				  loc = pos kFor x=exp s[","] y=exp s[","] z=exp kDo w=exp kOd	{fun (a) {assertVoid (a, Seq(x(Void), While (y (Val), Seq(w (Void), z (Void)))), loc)}} --|
				  --$(failure ("the rest of primary parsing is not implemented\n"))
				  ),
    basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
				                                   },
                                 primary)),
    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});


-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
