-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

fun spaceBrackets (a, b) {
  a |> lift (inbr (s ("("), b, s (")")))
}

var decimalExpr = memo $ eta syntax (loc=pos x=decimal { fun (a) { assertValue (a, Const (stringInt (x)), loc) } });

var lidentExpr  = memo $ eta syntax (x=lident {
  fun (a) {
     case a of
       Ref  -> Ref (x)
     | Void -> Ignore (Var (x))
     | _    -> Var (x)
     esac
  }
});

var skipExpr    = memo $ eta syntax (loc=pos kSkip { fun (a) { assertVoid (a, Skip, loc) } });

var readExpr    = memo $ eta syntax (loc=pos x=spaceBrackets [kRead, lident] { fun (a) { assertVoid (a, Read (x), loc) } });

var writeExpr   = memo $ eta syntax (loc=pos x=spaceBrackets [kWrite, basicExpr] { fun (a) { assertVoid (a, Write (x (Val)), loc) } });

var whileExpr   = memo $ eta syntax (loc=pos kWhile x=basicExpr kDo y=exprSeq kOd { fun (a) { assertVoid (a, While (x (Val), y (Void)), loc) } });

var doWhileExpr = memo $ eta syntax (kDo x=exprSeq kWhile y=basicExpr kOd { fun (a) { assertVoid (a, DoWhile (x (Void), y (Val)), loc) } });

var ifExpr      = memo $ eta syntax (kIf x=basicExpr kThen y=exprSeq z=ifVariation { fun (a) { If (x (Val), y (a), z (a)) } });
var ifVariation = memo $ eta syntax (
  kFi { fun (a) { Skip } } |
  kElse x=exprSeq kFi {x}  |
  kElif x=basicExpr kThen y=exprSeq z=ifVariation { fun (a) { If (x (Val), y (a), z (a)) } }
);

var forExpr     = memo $ eta syntax (loc=pos kFor x=exprSeq s[","] y=basicExpr s[","] z=exprSeq kDo w=exprSeq kOd {
  fun (a) { 
    assertVoid (a, Seq (x (Void), While (y (Val), Seq (w (Void), z (Void)))), loc) 
  }
});

var primaryExpr = memo $ eta syntax (
  decimalExpr |
  lidentExpr  | 
  skipExpr    |
  readExpr    |
  writeExpr   |
  whileExpr   |
  doWhileExpr |
  ifExpr      |
  forExpr     |
  inbr[s ("("), exprSeq, s (")")]
);

var basicExpr   = memo $ eta expr ({
  [Right, {[s (":="), fun (l, loc, r) { fun (a) { assertValue (a, Assn (l (Ref), r (Val)), loc) } } ]}],
  [Left , map (binop, {"!!"})],
  [Left , map (binop, {"&&"})],
  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
  [Left , map (binop, {"+", "-"})],
  [Left , map (binop, {"*", "/", "%"})]},
  primaryExpr
);

var exprSeq = memo $ eta syntax (basicExpr | s1=basicExpr s[";"] s2=exprSeq { fun (a) { Seq (s1 (Void), s2 (a)) } });

-- Public top-level parser
public parse = syntax (s=exprSeq {s (Void)});
