-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;
import STM;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- AST environment
fun createEnv (id) {
  fun freshName () {
    [createEnv (id+1), sprintf ("_tmp%d", id)]
  }

  [freshName]
}

fun emptyEnv () {
  createEnv (0)
}

fun freshName (env) {
  env [0] ()
}

-- Attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, vl, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> vl => fun (vl) {Ignore (vl)}
  | _    -> vl
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, vl, loc) {
  case atr of
    Void -> vl
  | Val  -> error ("value expected", loc)
  | Weak -> vl => fun (vl) {Seq (vl, Const (0))}
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, l (Val) =>> fun (l) {
                                            r (Val) =>  fun (r) {
                                              Binop (op, l, r)
                                            }}, loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }
  
  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Var (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

-- Helper AST function: reifies pattern bindings into scope
-- definitions and assignments; takes an returns lists of
-- pattern-branch pairs
fun reifyPatternBindings (matched, brs) {
  -- failure ("""%s""", brs.string);
  map (
    fun ([pat, br]) {      
      fun collectBindings (path, p) {
        fun collectList (path, ps) {
          case
            foldl (fun ([acc, i], p) {
                     [collectBindings (i : path, p) : acc, i+1]                      
                   },
                   [{}, 0],
                   ps) of
            [acc, _] -> flatten (acc)
          esac            
        }
        
        case p of
          Sexp  (_, ps)   -> collectList (path, ps)
        | Array (ps)      -> collectList (path, ps)
        | Named (name, p) -> [name, path] : collectBindings (path, p)
        |  _              -> {}
        esac
      }

      case collectBindings ({}, pat) of
        {}       -> [pat, br]
      | bindings ->
           [pat,
             expandScope (
               {Var (map (
                      fun ([name, path]) {
                        [name, Some (foldr (fun (p, i) {Elem (p, Const (i))}, Var (matched), path))]
                      },
                      bindings))},
               br
             )]
      esac
    },
    brs
  )
}

fun branchOrSkip (opt, a, loc) {
  case opt of
    None -> assertVoid (a, returnST $ Skip, loc)
  | Some (v) -> v (a)
  esac
}

fun pushA (xs, a) {
  map (fun (x) { x (a) }, xs)
}

fun pushVal (xs) {
  pushA (xs, Val)
}

var ifPart = memo $ eta syntax (
        loc=pos -kIf cond=exp -kThen ifBranch=scopeExpr elseBranches=elsePart? -kFi { fun (a) { 
          chainST ({cond (Val), ifBranch (a), branchOrSkip (elseBranches, a, loc)}) => fun ({cond, ifBranch, elsePart}) { If (cond, ifBranch, elsePart) } } }
      ),
    elsePart = memo $ eta syntax (
        loc=pos -kElif cond=exp -kThen elifBranch=scopeExpr tail=elsePart? { fun (a) { 
          chainST ({cond (Val), elifBranch (a), branchOrSkip (tail, a, loc)}) => fun ({cond, elifBranch, elseBranch}) {If (cond, elifBranch, elseBranch) }} } |
        -kElse elseBranch=scopeExpr
      ),
    whileDo = memo $ eta syntax (
        loc=pos -kWhile cond=exp -kDo loopCode=scopeExpr -kOd { fun (a) { assertVoid (a, 
            chainST ({cond (Val), loopCode (Void)}) => fun ({cond, loopCode}) {While (cond, loopCode)}, loc) } }
      ),
    doWhile = memo $ eta syntax (
        loc=pos-kDo loopCode=scopeExpr -kWhile cond=exp -kOd { fun (a) { assertVoid (a, 
            chainST ({loopCode (Void), cond (Val)}) => fun ({loopCode, cond}) {distributeScope (loopCode, fun (loopCode) { DoWhile (loopCode, cond) })}, loc) } }
      ),
    forExpr = memo $ eta syntax (
        loc=pos -kFor start=scopeExpr s[","] cond=exp s[","] ending=exp -kDo loopCode=scopeExpr -kOd
        { fun (a) { assertVoid (a, 
            chainST ({start (Void), cond (Val), loopCode (Void), ending (Void)}) =>
              fun ({start, cond, loopCode, ending}) {distributeScope (start, fun (start) { Seq (start, While (cond, Seq (loopCode, ending))) }) }, loc) } }
      ),
    pattern = memo $ eta syntax (
      x=decimal { Const (stringInt (x))} |
      -s["_"] { Wildcard } |
      -s["["] xs=list0[pattern] -s["]"] { Array (xs) } |
      x=uident args=(-s["("] list0[pattern] -s[")"])? {
           Sexp (x, case args of None -> {} | Some (args) -> args esac)
      } |
      name=lident p=(-s["@"] pattern)? {
          Named (name, case p of None -> Wildcard | Some (p) -> p esac)
      }
      ),
    oneCase = memo $ eta syntax (
        p=pattern -s["->"] e=scopeExpr { fun (a) { e (a) => fun (e) {[p, e]} }}
      ),
    caseExpr = memo $ eta syntax (
        loc=pos -kCase scrutinee=exp -kOf cases=listBy[oneCase, s("|")] -kEsac
          { fun (a) {
              -- failure ("""%s""", cases.string);
              scrutinee (Val) =>> fun (scrutinee) {
                chainST (pushA (cases, a)) =>> fun (cases) {
                  freshName => fun (var_name) {
                    var ass = Assn (Ref (var_name), scrutinee);
                    var defs = {Var ({var_name})};
                    var exprs =  Seq (Ignore (ass), Case (var_name, reifyPatternBindings (var_name, cases)));
                    Scope (defs, exprs)
                  }
                }
              }
            }
          }
      ),
    primary  = memo $ eta syntax (
                                  -- array constant
                                  loc=pos x=inbr[s("["), list0(syntax (e=exp {e(Val)})), s("]")] {
                                    fun (a) {assertValue (a, chainST (x) => fun (x) {Array (x)}, loc)}
                                  } |
                                                                    
                                  -- string constant
                                  loc=pos x=strlit {
                                    fun (a) {assertValue (a, returnST $ String (x), loc)}
                                  } |
                                                                    
                                  -- character literal
                                  loc=pos x=chrlit {
                                    fun (a) {assertValue (a, returnST $ Const (x), loc)}
                                  } |
                                                                    
                                  -- decimal constant
                                  loc=pos x=decimal {
                                    fun (a) {assertValue (a, returnST $ Const (stringInt (x)), loc)}
                                  } |
                                  
                                  -- identifier
                                  loc=pos x=lident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? {
                                    fun (a) {
                                      case args of
                                        None -> returnST $ case a of
                                                            Ref  -> Ref (x)
                                                          | Void -> Ignore (Var (x))
                                                          | _    -> Var (x)
                                                          esac
                                      | Some (args) -> assertValue (a, chainST (args) => fun (args) {Call (x, args)}, loc)
                                      esac}
                                  } |
                                  
                                  -- index
                                  loc=pos e=primary -s["["] i=basic -s["]"]
                                    {fun (a) {case a of
                                                Ref -> chainST ({e (Val), i (Val)}) => fun ({e, i}) { ElemRef (e, i) }
                                              | _   -> assertValue (a, chainST ({e (Val), i (Val)}) => fun ({e, i}) { Elem (e, i) }, loc)
                                              esac}} |
                                  -- S-expression
                                  loc=pos x=uident args=inbr[s("("), list0(syntax(e=exp {e (Val)})), s(")")]? {
                                    fun (a) {
                                      assertValue (a, case args of
                                                        None        -> returnST $ Sexp (x, {})
                                                      | Some (args) -> chainST (args) => fun (args) {Sexp (x, args)}
                                                      esac, loc)}
                                  } |
                                  -s["("] scopeExpr -s[")"] |
                                  loc=pos -kSkip { fun (a) { assertVoid (a, returnST $ Skip, loc) } } |
                                  ifPart |
                                  whileDo | doWhile | forExpr | caseExpr),

      basic = memo $ eta (expr ({[Right, {[s (":="), fun (l, loc, r) {
                                                      fun (a) {assertValue (a, l (Ref) =>> fun (l) {
                                                                                r (Val) =>  fun (r) {
                                                                                Assn (l, r)
                                                                                }},
                                                                              loc)
                                                      }
                                                    }]}],
                                [Left , map (binop, {"!!"})],
                                [Left , map (binop, {"&&"})],
                                [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                [Left , map (binop, {"+", "-"})],
                                [Left , map (binop, {"*", "/", "%"})]
                                },
                                primary)
                        ),
  
      
          definition = memo $ eta syntax (
        kVar ds=list[syntax (x=lident e=(-s["="] basic)? {case e of
                                                            None -> returnST $ [x, None]
                                                          | Some (e) ->
                                                              e (Val) => fun (e) {[x, Some (e)]}
                                                          esac})] s[";"] {
          chainST (ds) => fun (ds) {Var (ds)}
        } |
        kVal ds=list[syntax (x=lident s["="] e=basic {e (Val) => fun (e) {[x, e]}})] s[";"] {
          chainST (ds) => fun (ds) {Val (ds)}
        } |  
        kFun name=lident args=inbr[s("("), list0 (lident), s(")")] body=inbr[s("{"), scopeExpr, s("}")] {
          body (Weak) => fun (body) {Fun (name, args, body)}
        }
      ),
      
      exp = memo $ eta syntax (
        basic
      | s1=basic s[";"] s2=exp {
        fun (a) {
          
          s1 (Void) =>> fun (s1) {
          s2 (a)    =>  fun (s2) {
            Seq (s1, s2)
          }}
        }
      }
      ),
        scopeExpr  = memo $ eta syntax (ds=definition* e=exp? {
                                        fun (a) {
                                          
                                          fun (e) {
                                            case ds of
                                              {} -> e
                                            | _  -> chainST (ds) =>> fun (ds) {
                                                    e            =>  fun (e)  {
                                                      expandScope (ds, e)
                                                    }}
                                            esac
                                          }
                                          (
                                            case e of 
                                            Some (e) -> e (a)
                                          | _        -> returnST $ Skip
                                          esac)
                                        }}                                                                  
      );
-- Public top-level parser
public parse = syntax (s=scopeExpr {var x = s (Void) (emptyEnv ()) [1];
                                    x -- failure ("""%s""", x.string)
                                    });
