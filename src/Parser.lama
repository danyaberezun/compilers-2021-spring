-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun cvtbinop (ops) {
  map (fun (op) { [s(op), fun (x, _, y) {Binop (op, x, y)}] }, ops)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
    exp = memo $ eta expr ({
      [Left, cvtbinop ({"!!"})],
      [Left, cvtbinop ({"&&"})],
      [Nona, cvtbinop ({"<", "<=", ">", ">=", "==", "!="})],
      [Left, cvtbinop ({"+", "-"})],
      [Left, cvtbinop ({"*", "/", "%"})]
    }, primary);



var stmt = memo $ eta syntax (
  rarg=lident s[":="] warg=exp {Assn (rarg, warg)}
  | kSkip { Skip }
  | kWrite warg=inbr [s ("("), exp, s (")")] { Write (warg) }
  | kRead rarg=inbr [s ("("), lident, s (")")] { Read (rarg) } 
);

var stmtoparse = memo $ eta syntax (
    stmt
  | fst = stmt s [";"] scd = stmtoparse {Seq (fst, scd)}
);

-- Public top-level parser
public parse = stmtoparse;             
