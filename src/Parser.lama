-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}


fun binop (op) {
  [s(op), fun (x, _, y) {Binop (op, x, y)}]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]), 
    exp = memo $ eta (expr ({
      [Left, map (binop, {"!!"})],
      [Left, map (binop, {"&&"})],
      [Nona, map (binop, {"==", "!=", ">", "<", ">=", "<="})],
      [Left, map (binop, {"+", "-"})],
      [Left, map (binop, {"*", "/", "%"})]
    }, primary
));


var onestmt = memo $ eta syntax (
     varName=lident s[":="] expr=exp {Assn (varName, expr)}
  |  kSkip {Skip} 
  |  kRead varName=inbr [s ("("), lident, s (")")] {Read (varName)}
  |  kWrite expr=inbr [s ("("), exp, s (")")] {Write (expr)}
);

var stmt = memo $ eta syntax (
    onestmt 
  | one=onestmt s [";"] others=stmt {Seq (one, others)}
);
   

-- Public top-level parser
public parse = stmt;
             
