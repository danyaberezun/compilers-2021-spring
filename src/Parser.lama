-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binopExpr(op) {
  [s(op), fun (l, op, r) {Binop (op, l, r)}]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s ("("), exp, s (")")]),
      exp = memo $ eta expr ({
                               [Left, map(binopExpr,{"&&", "!!"})],
                               [Nona, map(binopExpr,{"==", "!=", "<", "<=", ">", ">="})],
                               [Left, map(binopExpr,{"+", "-"})],
                               [Left, map(binopExpr,{"*", "/", "%"})]
                             },
                             primary);

var stmtSeq = memo $ eta syntax (stmt                              |
                                 x=stmt s[";"] y=stmtSeq {Seq (x, y)}),
      stmt = memo $ eta syntax(kRead x=inbr[s ("("), lident, s (")")] {Read (x)}   |
                               kWrite x=inbr[s ("("), exp, s (")")] {Write (x)}    |
                               kSkip                                               |
                               x=lident s[":="] y=exp {Assn (x, y)});
   

-- Public top-level parser
public parse = stmtSeq;
             
