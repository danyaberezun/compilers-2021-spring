-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]);
var exp = memo $ eta (expr ({
                            [Left, {[s("!!"), fun (l, _, r) {Binop ("!!", l, r)}]}],
                            [Left, {[s("&&"), fun (l, _, r) {Binop ("&&", l, r)}]}],
                            [Nona, {[s("<"),  fun (l, _, r) {Binop ("<", l, r)}],
                                    [s(">"),  fun (l, _, r) {Binop (">", l, r)}],
                                    [s("<="), fun (l, _, r) {Binop ("<=", l, r)}],
                                    [s(">="), fun (l, _, r) {Binop (">=", l, r)}],
                                    [s("=="), fun (l, _, r) {Binop ("==", l, r)}],
                                    [s("!="), fun (l, _, r) {Binop ("!=", l, r)}]
                                   }],
                            [Left, {[s("+"), fun (l, _, r) {Binop ("+", l, r)}],
                                    [s("-"), fun (l, _, r) {Binop ("-", l, r)}]
                                   }],
                            [Left, {[s("*"), fun (l, _, r) {Binop ("*", l, r)}],
                                    [s("/"), fun (l, _, r) {Binop ("/", l, r)}],
                                    [s("%"), fun (l, _, r) {Binop ("%", l, r)}]
                                   }]
                            },
                            primary));

var baseStmt = memo $ eta syntax (x=lident s[":="] e=exp {Assn (x, e)}            |
                                  kSkip {Skip}                                    |
                                  kRead x=inbr[s("("), lident, s(")")] {Read (x)} |
                                  kWrite e=inbr[s("("), exp, s(")")] {Write (e)}  );
var stmt = memo $ eta syntax (baseStmt | 
                              stmt1=baseStmt s[";"] stmt2=stmt {Seq (stmt1, stmt2)});
   

-- Public top-level parser
public parse = stmt;
             
