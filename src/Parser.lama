-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binOp (op) {
  [s(op), fun (l, op, r) {Binop (op, l, r)}]
}

var ops = {
           [Left, map(binOp,{"&&", "!!"})],
           [Nona, map(binOp,{"==", "!=", "<", "<=", ">", ">="})],
           [Left, map(binOp,{"+", "-"})],
           [Left, map(binOp,{"*", "/", "%"})]
          };

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s ("("), exp, s (")")]);

var exp = memo $ eta expr (ops, primary);


---- Parsing ifs
var elseSt = memo $ eta syntax(
                                  kFi { Skip }
                                  |-kElse stmt -kFi
                                  | kElif e=exp kThen ifSt=stmt elseif=elseSt { If(e, ifSt, elseif) }      
);


var st = memo $ eta syntax(
                                    kSkip { Skip } 
                                    |kRead x=inbr[s("("), lident, s(")")] { Read(x) } 
                                    |kWrite e=inbr[s("("), exp, s(")")] { Write(e) } 
                                    |x=lident s[":="] e=exp { Assn(x, e) } 
                                    |kIf e=exp kThen ifSt=stmt elseif=elseSt { If(e, ifSt, elseif) }
                                    |kWhile e=exp kDo s=stmt kOd          { While(e, s)}
                                    |kDo s=stmt kWhile e=exp kOd          { DoWhile(s, e) }
                                    |kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd   { Seq(s1, While(e, Seq(s3, s2)))}
);

var stmt = memo $ eta syntax (st | s1=st s[";"] s2=stmt {Seq(s1, s2)});

-- Public top-level parser
public parse = stmt;

