-- Parser 
-- Alhasan Alkhaddour M4138c

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
    binOps = fun(l, op, r) {Binop(op, l, r)},
    ops = {
            [Left, [s ("!!"), binOps] : {}],
            [Left, [s ("&&"), binOps] : {}],
            [Nona, [s ("<") | s (">") | s ("<=") | s (">=") | s ("==") | s ("!="), binOps] : {}],
            [Left, [s ("+") | s ("-"), binOps] : {}],
            [Left, [s ("*") | s ("/") | s ("%"), binOps] : {}]
            },
    exp = memo $ eta expr (ops, primary) ;

  
var elseSt = memo $ eta syntax( kFi {Skip}            |
                                -kElse stmt -kFi      |
                                kElif e=exp kThen ifSt=stmt elseif=elseSt { If(e, ifSt, elseif) }      
);


var st = memo $ eta syntax( x=lident s[":="] y=exp                   {Assn (x, y)}	       	            |
                            kWrite x=inbr[s("("), exp, s(")")]       {Write (x)}	                      |
                            kRead  x=inbr[s("("), lident, s(")")]    {Read (x)}                         |
                            kIf e=exp kThen ifSt=stmt elseif=elseSt  {If(e, ifSt, elseif) }             |
                            kWhile e=exp kDo s=stmt kOd              {While(e, s)}                      |
                            kDo s=stmt kWhile e=exp kOd              {DoWhile(s, e) }                   |
                            kFor s1=stmt s[","] e=exp s[","] 
                                 s2=stmt kDo s3=stmt kOd             {Seq(s1, While(e, Seq(s3, s2)))}   |
                            kSkip { Skip } 
);

var stmt = memo $ eta syntax (st | s1=st s[";"] s2=stmt {Seq(s1, s2)});

-- Public top-level parser
public parse = stmt;

