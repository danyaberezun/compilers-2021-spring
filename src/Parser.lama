-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;
import STM;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- AST environment
fun createEnv (id) {
  fun freshName () {
    [createEnv (id+1), sprintf ("_tmp%d", id)]
  }

  [freshName]
}

fun emptyEnv () {
  createEnv (0)
}

fun freshName (env) {
  env [0] ()
}

-- Attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, vl, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> vl => fun (vl) {Ignore (vl)}
  | _    -> vl
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, vl, loc) {
  case atr of
    Void -> vl
  | Val  -> error ("value expected", loc)
  | Weak -> vl => fun (vl) {Seq (vl, Const (0))}
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, l (Val) =>> fun (l) {
                                            r (Val) =>  fun (r) {
                                              Binop (op, l, r)
                                            }}, loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandVarDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             |  [ident, value] 		  -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }
  
  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Var (ds) ->             
                 case expandVarDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

-- Helper AST function: reifies pattern bindings into scope
-- definitions and assignments; takes an returns lists of
-- pattern-branch pairs
fun reifyPatternBindings (matched, brs) {
  map (
    fun ([pat, br]) {      
      fun collectBindings (path, p) {
        fun collectList (path, ps) {
          case
            foldl (fun ([acc, i], p) {
                     [collectBindings (i : path, p) : acc, i+1]                      
                   },
                   [{}, 0],
                   ps) of
            [acc, _] -> flatten (acc)
          esac            
        }
        
        case p of
          Sexp  (_, ps)   -> collectList (path, ps)
        | Array (ps)      -> collectList (path, ps)
        | Named (name, p) -> [name, path] : collectBindings (path, p)
        |  _              -> {}
        esac
      }

      case collectBindings ({}, pat) of
        {}       -> [pat, br]
      | bindings ->
           [pat,
             expandScope (
               {Var (map (
                      fun ([name, path]) {
                        [name, foldr (fun (p, i) {Elem (p, Const (i))}, Var (matched), path)]
                      },
                      bindings))},
               br
             )]
      esac
    },
    brs
  )
}

-- Additional helpers --
var comma = s (",");

fun chainHandler(x: tailX, attr: tailAttr, acc, f) {
	case tailX of
		{} 	-> x (attr) => fun (x) { f (reverse (x : acc)) }
	|	_ 	-> x (attr) =>> fun (x) { chainHandler(tailX, tailAttr, x : acc, f) }
	esac
}

fun assertVoidWithCheck(v, loc) {
	fun (a) { assertVoid (a, v, loc) }
}

var whileParser = memo $ eta syntax(
	loc=pos kWhile expr=exp kDo body=scopeExpr kOd { 
		assertVoidWithCheck (
			chainHandler(
				{expr, body}, {Val, Void}, {}, 
				fun({expr, body}) { 
					While (expr, body) 
				}
			), loc
		) 
	}
);

var doWhileParser = memo $ eta syntax(
	loc=pos kDo body=scopeExpr kWhile expr=exp kOd { 
		assertVoidWithCheck (
			chainHandler(
				{expr, body}, {Val, Void}, {},
				fun({expr, body}) { distributeScope(body, fun (expression) { DoWhile (expression, expr) }) }
			), loc
		) 
	}
);

var forParser	= memo $ eta syntax (
	loc=pos kFor s1=scopeExpr comma expr=exp comma s2=exp kDo body=scopeExpr kOd { 
		assertVoidWithCheck (
			chainHandler(
				{expr, s1, s2, body}, {Val, Void, Void, Void}, {},
				fun({expr, s1, s2, body}) { distributeScope (s1, fun (expression) { Seq(expression, While(expr, Seq (body, s2))) }) }
			), loc
		) 
	}
);

var ifPart 		= memo $ eta syntax(
	expr=exp ifTrue=thenPart ifFalse=elsePart { 
		fun (a) {
			chainHandler(
				{expr, ifTrue, ifFalse}, {Val, a, a}, {},
				fun({expr, ifTrue, ifFalse}) { If (expr, ifTrue, ifFalse) }
			)
		} 
	}
);

var thenPart 	= memo $ eta syntax(-kThen scopeExpr);

var elsePart 	= memo $ eta syntax (
	loc=pos { fun(a) { assertVoid (a, returnST $ Skip, loc) } } |
	-kElse scopeExpr											|						   		  
	-kElif ifPart
);

var caseParser 	= memo $ eta syntax (
	-kCase loc=pos expr=exp -kOf brs=caseBranches -kEsac { 
		fun (a) {
			expr (Val) =>> fun (expr) {
				var brsWithEnv = map (fun ([patt, branch]) { fun (env) { case branch (a) (env) of [env, branch] -> [env, [patt, branch]] esac } }, brs);
				chainST $ brsWithEnv =>> fun (branches) {
					fun (env) {
						case freshName (env) of
							[env, matched] -> [env, expandScope ({Var ({[matched, expr]})}, Case (matched, reifyPatternBindings (matched, branches)))]
						esac
					}
				}
			}
		}
	}
);

var caseBranches = memo $ eta syntax (fst=caseBranch tail=(-s["|"] caseBranch)* { fst : tail });

var caseBranch 	 = memo $ eta syntax (
	patt=pattern -s["->"] branch=scopeExpr { [patt, fun (a) { branch (a) }] }
);

var pattern 	 = memo $ eta syntax (
	-s["_"] { All }																				|
	x=decimal { Const (stringInt (x)) } 														|
	x=uident ps=inbr[s("("), list0(syntax(patt=pattern)), s(")")]? { Sexp (x, handleOpt (ps)) }	|
	ps=inbr[s("["), list0(syntax (patt=pattern)), s("]")] { Array (ps) }						|
	x=lident patt=(-s["@"] pattern)? { Named (x, case patt of Some (value) -> value | _ -> All esac) }
);

fun handleOpt(opt) {
	case opt of
		Some (value) -> value
	|	_ -> {}
	esac
}

-- Additional helpers end --

var
  primary = memo $ eta syntax (
    -- array constant
    loc=pos x=inbr[s("["), list0(syntax (e=exp {e(Val)})), s("]")] {
      fun (a) {assertValue (a, chainST (x) => fun (x) {Array (x)}, loc)}
    } |
                                      
    -- string constant
    loc=pos x=strlit {
      fun (a) {assertValue (a, returnST $ String (x), loc)}
    } |
                                      
    -- character literal
    loc=pos x=chrlit {
      fun (a) {assertValue (a, returnST $ Const (x), loc)}
    } |
                                      
    -- decimal constant
    loc=pos x=decimal {
      fun (a) {assertValue (a, returnST $ Const (stringInt (x)), loc)}
    } |
                                      
    -- identifier
    loc=pos x=lident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? {
      fun (a) {
        case args of
          None -> returnST $ case a of
                               Ref  -> Ref (x)
                             | Void -> Ignore (Var (x))
                             | _    -> Var (x)
                             esac
        | Some (args) -> assertValue (a, chainST (args) => fun (args) {Call (x, args)}, loc)
        esac}
    } |

    -- S-expression
    loc=pos x=uident args=inbr[s("("), list0(syntax(e=exp {e (Val)})), s(")")]? {
      fun (a) {
        assertValue (a, case args of
                          None        -> returnST $ Sexp (x, {})
                        | Some (args) -> chainST (args) => fun (args) {Sexp (x, args)}
                        esac, loc)}
    } |
  
    inbr [s ("("), scopeExpr, s (")")] 								|
  	loc=pos kSkip { assertVoidWithCheck (returnST $ Skip, loc) } 	|
	whileParser														|
	doWhileParser													|	
	forParser 														|
	-kIf ifPart -kFi 												|
	caseParser
),
   

  basic = memo $ eta (
    expr ({[Right, {[s (":="), fun (l, loc, r) {
                                 fun (a) {assertValue (a, l (Ref) =>> fun (l) {
                                                          r (Val) =>  fun (r) {
                                                          Assn (l, r)
                                                          }},
                                                        loc)
                                 }
                               }]}],
           [Left , map (binop, {"!!"})],
           [Left , map (binop, {"&&"})],
           [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
           [Left , map (binop, {"+", "-"})],
           [Left , map (binop, {"*", "/", "%"})]
          },
          postfix)
  ),
  
  postfix = memo $ eta syntax (
    loc=pos e=primary ps=(i=inbr[s("["), exp, s("]")] {Index (i (Val))})* {
      fun (a) {
        foldl (fun (e, p) {                                                                            
                 case p of                                                                                   
                   Index (i) ->
                    fun (a) {
                      case a of
                        Ref -> e (Val) =>> fun (e) {
                               i       =>  fun (i) {
                                 ElemRef (e, i)
                               }} 
                      | _   -> assertValue (a, e (Val) =>> fun (e) {
                                               i       =>  fun (i) {
                                               Elem (e, i)
                                               }},
                                            loc)
                      esac
                    }
                 esac                                                                            
               }, e, ps) (a)
      }}
  ),
  
  scopeExpr  = memo $ eta syntax (ds=definition* e=exp? {
    fun (a) {
      fun (e) {
        case ds of
          {} -> e
        | _  -> chainST (ds) =>> fun (ds) {
                e            =>  fun (e)  {
                  expandScope (ds, e)
                }}
        esac
      }
      (case e of 
        Some (e) -> e (a)
      | _        -> returnST $ Skip
      esac)
    }}                                                                  
  ),
  
  definition = memo $ eta syntax (
    kVar ds=list[syntax (x=lident e=(-s["="] basic)? {case e of
                                                        None -> returnST $ [x, None]
                                                      | Some (e) ->
                                                          e (Val) => fun (e) {[x, Some (e)]}
                                                      esac})] s[";"] {
      chainST (ds) => fun (ds) {Var (ds)}
    } |
    kFun name=lident args=inbr[s("("), list0 (lident), s(")")] body=inbr[s("{"), scopeExpr, s("}")] {
      body (Weak) => fun (body) {Fun (name, args, body)}
    }
  ),
  
  exp = memo $ eta syntax (
    basic
  | s1=basic s[";"] s2=exp {
     fun (a) {
       s1 (Void) =>> fun (s1) {
       s2 (a)    =>  fun (s2) {
         Seq (s1, s2)
       }}
     }
   }
  );

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void) (emptyEnv ()) [1]});
