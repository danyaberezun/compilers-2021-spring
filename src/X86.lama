-- X86 codegeneration interface
-- We use stack machine programs as intermediate representation
import SM;
import Collection;
import List;
import Buffer;
import Fun;
import Manifest;

-- Assembler language interface
-- The registers: 
var regs = ["ebx", "ecx", "esi", "edi", "eax", "edx", "ebp", "esp"];

-- We can not freely operate with all register; only with 4 by now
var nRegs = regs.length - 5;

-- For convenience we define the following synonyms for the registers: 
var ebx = R (0),
    ecx = R (1),
    esi = R (2),
    edi = R (3),
    eax = R (4),
    edx = R (5),
    ebp = R (6),
    esp = R (7);

-- We need to know the word size to calculate offsets correctly
var wordSize = 4;

-- We need to distinguish the following operand types: 
--    R (int)    -- hard register                    
--    S (int)    -- a position on the hardware stack 
--    M (string) -- a named memory location          
--    L (int)    -- an immediate operand             

-- Some x86 instruction (we do not need all of them):
--   Mov   (opnd, opnd)         -- copies a value from the first to the second operand  
--   Binop (string, opnd, opnd) -- makes a binary operation; note, the first operand   
--                                 designates x86 operator, not the source language one
--   IDiv  (opnd)               -- x86 integer division, see instruction set reference 
--   Cltd                       -- see instruction set reference           
--   Set   (string, string)     -- sets a value from flags; the first operand is the   
--                                 suffix, which determines the value being set, the
--                                 the second --- (sub)register name 
--   Push  (opnd)               -- pushes the operand on the hardware stack
--   Pop   (opnd)               -- pops from the hardware stack to the operand
--   Call  (string)             -- calls a function by its name 
--   Ret                        -- returns from a function
--   Meta  (string)             -- metainformation (declarations, etc.)
                                                               
-- Machine instruction printer
fun insnString (insn) {
  
  fun binopString (op) {
    case op of
      "+"     -> "add"
    | "-"     -> "sub"
    | "*"     -> "imul"
    | "&&"    -> "and"
    | "!!"    -> "or" 
    | "^"     -> "xor"
    | "cmp"   -> "cmp"
    | "test"  -> "test"
    esac
  }

  fun opndString (opnd) {
    case opnd of
      R (i) -> regs [i]
    | S (i) -> sprintf ("DWORD PTR [ebp-%d]", (i+1) * wordSize)
    | M (x) -> sprintf ("DWORD PTR %s", x)
    | L (i) -> sprintf ("%d", i)
    esac
  }
  
  case insn of
    Cdq                      -> "\tcdq\n"
  | Set     (suf, s)          -> sprintf ("\tset%s\t%s\n", suf, s)
  | IDiv    (s1)              -> sprintf ("\tidiv\t%s\n", opndString (s1))
  | Binop   (op, s1, s2)      -> sprintf ("\t%s\t%s,\t%s\n", binopString (op), opndString (s2), opndString (s1))
  | Ternop  (op, s1, s2, s3)  -> sprintf ("\t%s\t%s,\t%s,\t%s\n", binopString (op), opndString (s3), opndString (s2), opndString (s1))
  | Mov     (s1, s2)          -> sprintf ("\tmov\t%s,\t%s\n", opndString (s2), opndString (s1))
  | Push    (s)               -> sprintf ("\tpush\t%s\n", opndString (s))
  | Pop     (s)               -> sprintf ("\tpop\t%s\n", opndString (s))
  | Ret                       -> "\tret\n"
  | Call    (p)               -> sprintf ("\tcall\t%s\n", p)
  | Meta    (m)               -> m
  esac
}

-- Environment for symbolic interpreter
-- An environment holds
--    a symbolic stack
--    a maximal stack depth reached so far
--    a set of global variable names

fun makeEnv (stack, stackSlots, globals) {
  -- Returns an internal name for a global variable
  fun globalName (name) {
    "global_" ++ name
  }

  -- Returns a string representation of the environment
  fun envString () {
    sprintf ("Stack     : %s\nStackSlots: %d\nGlobals   : %s\n", stack.string, stackSlots, elements (globals).string)
  }
  
  -- Allocates a new position on the symbolic stack;
  -- returns a pair: a location for allocated item and
  -- an updated environment
  fun allocate () {
    case 
      case stack of
        [_, Stack] : _ -> [R (0), 0]
      | [_, S (n)] : _ -> [S (n+1), n+2]
      | [_, R (n)] : _ -> if n < nRegs then [R (n+1), 0] else [S (0), 1] fi
      | _              -> [S (0), 1]
      esac
    of [x, n] -> [x, makeEnv ([x, x] : stack, if n > stackSlots then n else stackSlots fi, globals)] esac
  }

  -- Pushes an item on the symbolic state; returns an updated envirtonment
  fun push (y) {
    case y of
      L (_) -> case stack of [_, head] : tail -> makeEnv ([y, head] : stack, stackSlots, globals) esac
    | _     -> makeEnv ([y, y] : stack, stackSlots, globals)
    esac
  }

  -- Pops one item from the symbolic stack; returns a pair: a popped
  -- item and an updated environment
  fun pop () {
    case stack of
      [x, _] : stack -> [x, makeEnv (stack, stackSlots, globals)]
    esac
  }

  -- Pops two items from the symbolic stack; returns a triple:
  -- popped items and an undated environment
  fun pop2 () {
    case stack of
      [x, _] : [y, _] : stack -> [x, y, makeEnv (stack, stackSlots, globals)]
    esac
  }

  -- Adds a global variable; returns an updated environment
  fun addGlobal (name) {
    makeEnv (stack, stackSlots, addSet (globals, globalName (name)))
  }

  -- References a global variable
  fun loc (name) {
    M (globalName (name))
  }
  
  -- Gets a list of global variables from the environment
  fun getGlobals () {
    globals.elements
  }

  -- Gets a maximal stack size from the environment
  fun getStackSize () {
    stackSlots
  }

  [envString, allocate, push, pop, pop2, addGlobal, loc, getGlobals, getStackSize]
}

-- Exported accessors
fun envString (env) {
  env [0] ()
}

fun allocate (env) {
  env [1] ()
}

fun push (env, x) {
  env [2] (x)
}

fun pop (env) {
  env [3] ()
}

fun pop2 (env) {
  env [4] ()
}

fun addGlobal (env, name) {
  env [5] (name)
}

fun loc (env, name) {
  env [6] (name)
}

fun getGlobals (env) {
  env [7] ()
}

fun getStackSize (env) {
  env [8] ()
}

-- Creates an initial environment
fun initEnv () {
  makeEnv ({[Stack, Stack]}, 0, emptySet (compare))
}

-- Codegeneration helper functions
-- Generates code section
fun codeSection (text) {
  singletonBuffer (Meta ("\t.text\n")) <+> text
}

-- Generates data section
fun dataSection (text) {
  singletonBuffer (Meta ("\t.data\n")) <+> text
}

-- Generates data definition
fun dataDef (name) {
  Meta (sprintf ("%s:\t.int\t0\n", name))
}

-- Generates function prologue
fun prologue (size) {
  singletonBuffer (Push (ebp)) <+
  Mov   (esp, ebp) <+>
  if size != 0 then singletonBuffer (Binop ("-", L (wordSize*size), esp)) else emptyBuffer () fi
}

-- Generates function epilogue
fun epilogue () {
  singletonBuffer (Mov (ebp, esp)) <+
  Pop   (ebp) <+>
  move (L (0), eax) <+
  Ret
}

-- Checks if an operand resides on a stack
fun stackOpnd (opnd) {
  case opnd of
    S (_) -> true
  | _     -> false
  esac      
}

-- Checks if an operand resides in memory
fun memOpnd (opnd) {
  case opnd of
    S (_) -> true
  | M (_) -> true
  | _     -> false
  esac
}

-- Generates a move between locations, using
-- intermediate register if needed
fun move (from, to) {
  if from == to
    then emptyBuffer ()
    else case from of
          L (0) -> if memOpnd (to) 
                     then move (L (0), eax) <+> move (eax, to) 
                     else singletonBuffer (Binop ("^", to, to)) 
                   fi
        | _ -> 
            if memOpnd (from) && memOpnd (to)
              then singletonBuffer (Mov (from, eax)) <+ Mov (eax, to)
              else singletonBuffer (Mov (from, to))
            fi
        esac
  fi
}

-- Gets a suffix for Set instruction from
-- source language comparison operator
fun suffix (op) {
  case op of
    "<"  -> "l"
  | "<=" -> "le"
  | "==" -> EZCmp ("e")
  | "!=" -> EZCmp ("ne")
  | ">=" -> "ge"
  | ">"  -> "g"
  | _    -> NotCmp
  esac
}

fun set (suffix, x) {
  singletonBuffer (Mov (L (0), eax)) <+ Set (suffix, "al") <+ Mov (eax, x)
}

fun binop (op, x, y) {

  var opMode =
    case op of
      "+"   -> OpSum
    | "-"   -> OpSum
    | "^"   -> OpSum
    | "cmp" -> OpSum
    | "&&"  -> OpSum
    | "!!"  -> OpSum
    | "*"   -> OpMul
    | "/"   -> OpDiv
    | "%"   -> OpDiv
    esac;

  var opPrep =
    case op of
      "&&" -> LogPrep
    | "!!" -> LogPrep
    | _    -> NoPrep
    esac;

  case case opPrep of
    LogPrep -> [
        case x of
          L (n) -> [L (if n == 0 then 0 else 1 fi), emptyBuffer ()]
        | _     -> [x, test (x) <+> set ("ne", x)]
        esac, 
        [y, test (y) <+> set ("ne", y)]
      ]
  | NoPrep -> [[x, emptyBuffer ()], [y, emptyBuffer ()]]
  esac of [[x, code0], [y, code1]] -> code0 <+> code1 <+>
    case opMode of
      OpSum -> case [x, y, op] of
            [R (n), _, _] -> singletonBuffer (Binop (op, x, y))
          | [L (n), _, _] -> singletonBuffer (Binop (op, x, y))
          | [_, R (n), _] -> singletonBuffer (Binop (op, x, y))
          | _ -> move (x, eax) <+ if x == y && compare (op, "cmp") == 0 
                                  then Binop (op, eax, eax)
                                  else Binop (op, eax, y)
                                fi
          esac
    | OpMul -> case [x, y] of
            [L (n), R (m)] -> singletonBuffer (Ternop (op, x, y, y))
          | [L (n), _]     -> singletonBuffer (Ternop (op, x, y, eax)) <+ Mov (eax, y)
          | [_, R (n)]     -> singletonBuffer (Binop (op, x, y))
          | _              -> move (y, eax) <+ Binop (op, x, eax) <+ Mov (eax, y)
          esac
    | OpDiv -> move (y, eax) <+ Cdq <+ Push (ecx) <+> move (x, ecx) <+ IDiv (ecx) <+ Pop (ecx) <+ case op of
            "/" -> Mov (eax, y)
          | "%" -> Mov (edx, y)
          esac
    esac
  esac
}

fun test (x) {
  case x of
    R (n) -> singletonBuffer (Binop ("test", x, x))
  | _     -> binop ("cmp", L (0), x)
  esac
}

-- Compiles stack machine code into a list of x86 instructions. Takes an environment
-- and stack machine code, returns an updated environment and x86 code.
fun compile (env, code) {
  foldl (
    fun ([env, scode], i) {
      var code = scode <+ Meta ("# " ++ showSMInsn (i) ++ "\n");
      case i of
        READ ->
          case env.allocate of
            [s, env] -> [env, code <+ Call ("Lread") <+ Mov (eax, s)]
          esac            
      | WRITE ->
          case env.pop of
            [s, env] -> [env, code <+ Push (s) <+ Call ("Lwrite") <+ Pop (eax)]
          esac
      | CONST (n) -> [env.push (L (n)), code]
      | LD (x) ->
          case env.addGlobal (x).allocate of
            [s, env] -> [env, code <+> move (env.loc (x), s)]
          esac
      | ST (x) ->
          case env.addGlobal (x).pop of
            [s, env] -> [env, code <+> move (s, env.loc (x))]
          esac
      | BINOP (op) ->
          case env.pop2 of [x, y, env] -> 
            case case [x, y, env.allocate] of
              [L (m), L (n), [s, env]] -> [env, move (y, s), x, s]
            | [x,     L (n), [s, env]] -> case env.allocate of [xx, env] -> [env.pop.snd, move (x, xx) <+> move (y, s), xx, s] esac
            | [x,     y,     [s, env]] -> [env, emptyBuffer (), x, s]
            esac of [env, normCode, x, r] -> [env, code <+>
                case suffix (op) of
                  NotCmp         -> normCode <+> binop (op, x, r)
                | EZCmp (suffix) -> case [x, y] of
                        [L (n), L (m)] -> move (L (if (n == m) == (compare (op, "==") == 0) then 1 else 0 fi), r)
                      | [L (0), _]     -> test (y) <+> set (suffix, r)
                      | [_, L (0)]     -> test (x) <+> set (suffix, r)
                      | _              -> normCode <+> binop ("cmp", x, r) <+> set (suffix, r)
                    esac
                | suffix         -> normCode <+> binop ("cmp", x, r) <+> set (suffix, r) 
                esac
            ] esac
          esac
      | _ -> failure ("codegeneration for instruction %s is not yet implemented\n", i.string)
      esac
    }, [env, emptyBuffer ()], code)
}

-- A top-level codegeneration function. Takes a driver's environment and a stack machine program,
-- compiles the program into machine code, and compiles the machine code into an executable
public fun compileX86 (args, code) {
  case compile (initEnv (), code) of
    [env, code] ->
       var asmFile = args.getBaseName ++ ".s",
           runtime = case getEnv ("LAMA_RUNTIME") of
                       #val  -> "../runtime/"
                     | path  -> path
                     esac ++ "/runtime.o";
       
       fwrite (asmFile,
               map (insnString, 
                    getBuffer $
                      singletonBuffer (Meta ("\t.intel_syntax noprefix\n")) <+>
                      singletonBuffer (Meta ("\t.global\tmain\n")) <+>
                      dataSection (listBuffer $ map (dataDef, getGlobals (env))) <+>
                      codeSection (
                        singletonBuffer (Meta ("main:\n")) <+>
                        prologue (getStackSize (env)) <+>
                        code <+>
                        epilogue ()
                      )
                   ).stringcat);
                    
       system ({"gcc -g -m32 -o ", args.getBaseName, " ", runtime, " ", asmFile}.stringcat)
  esac
}
