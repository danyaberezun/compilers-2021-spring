-- X86 codegeneration interface
-- We use stack machine programs as intermediate representation
import Fun;
import SM;
import Collection;
import List;
import Manifest;
import Buffer;

-- Assembler language interface
-- The registers: 
var regs = ["%ebx", "%ecx", "%esi", "%edi", "%eax", "%edx", "%ebp", "%esp"];

-- We can not freely operate with all register; only with 4 by now
var nRegs = regs.length - 5;

-- For convenience we define the following synonyms for the registers: 
var ebx = R (0),
    ecx = R (1),
    esi = R (2),
    edi = R (3),
    eax = R (4),
    edx = R (5),
    ebp = R (6),
    esp = R (7);

-- We need to know the word size to calculate offsets correctly
var wordSize = 4;

-- We need to distinguish the following operand types: 
--    R (int)       -- hard register                    
--    S (int)       -- a position on the hardware stack 
--    M (string)    -- a named memory location          
--    L (int)       -- an immediate operand
--    I (int, opnd) -- an indirect operand with offset

-- Some x86 instruction (we do not need all of them):
--   Mov   (opnd, opnd)         -- copies a value from the first to the second operand  
--   Lea   (opnd, opnd)         -- loads an address of the first operand into the second
--   Binop (string, opnd, opnd) -- makes a binary operation; note, the first operand   
--                                 designates x86 operator, not the source language one
--   IDiv  (opnd)               -- x86 integer division, see instruction set reference 
--   Cltd                       -- see instruction set reference           
--   Set   (string, string)     -- sets a value from flags; the first operand is the   
--                                 suffix, which determines the value being set, the
--                                 the second --- (sub)register name
--   Jmp   (string)             -- unconditional jump to a label
--   CJmp  (string, string)     -- conditional jump to a label
--   Label (string)             -- a label
--   Push  (opnd)               -- pushes the operand on the hardware stack
--   Pop   (opnd)               -- pops from the hardware stack to the operand
--   Call  (string)             -- calls a function by its name 
--   Ret                        -- returns from a function
--   Meta  (string)             -- metainformation (declarations, etc.)
                                                               
-- Machine instruction printer
fun insnString (insn) {
  
  fun binopString (op) {
    case op of
      "+"   -> "addl"
    | "-"   -> "subl"
    | "*"   -> "imull"
    | "&&"  -> "andl"
    | "!!"  -> "orl" 
    | "^"   -> "xorl"
    | "cmp" -> "cmpl"
    esac
  }

  fun opndString (opnd) {
    case opnd of
      R (i)    -> regs [i]
    | S (i)    ->  if i >= 0
                   then sprintf ("-%d(%%ebp)", (i+1) * wordSize)
                   else sprintf ("%d(%%ebp)", 8 + (-1-i) * wordSize)
                   fi

    | M (x)    -> x
    | L (i)    -> sprintf ("$%d", i)
    | I (0, x) -> sprintf ("(%s)", opndString (x))
    | I (n, x) -> sprintf ("%d(%s)", n, opndString (x))
    esac
  }

  case insn of
    Cltd               -> "\tcltd\n"
  | Set   (suf, s)     -> sprintf ("\tset%s\t%s\n", suf, s)
  | IDiv  (s1)         -> sprintf ("\tidivl\t%s\n", opndString (s1))
  | Binop (op, s1, s2) -> sprintf ("\t%s\t%s,\t%s\n", binopString (op), opndString (s1), opndString (s2))
  | Lea   (s1, s2)     -> sprintf ("\tleal\t%s,\t%s\n", opndString (s1), opndString (s2))
  | Mov   (s1, s2)     -> sprintf ("\tmovl\t%s,\t%s\n", opndString (s1), opndString (s2))
  | Push  (s)          -> sprintf ("\tpushl\t%s\n", opndString (s))
  | Pop   (s)          -> sprintf ("\tpopl\t%s\n", opndString (s))
  | Ret                -> "\tret\n"
  | Call  (p)          -> sprintf ("\tcall\t%s\n", p)
  | Label (l)          -> sprintf ("%s:\n", l)
  | Jmp   (l)          -> sprintf ("\tjmp\t%s\n", l)
  | CJmp  (c, l)       -> sprintf ("\tj%s\t%s\n", c, l)
  | Meta  (m)          -> m
  esac
}

-- Environment for symbolic interpreter
-- An environment holds
--    a symbolic stack
--    a maximal stack depth reached so far
--    a set of global variable names
--    a barrier condition (set up right after an unconditional jump is interpreter)
--    a stack map which maps labels to symbolic stacks

fun makeEnv (stack, stackSlots, globals, barrier, stackMap, fLabel, nLocals) {
  -- Returns an internal name for a global variable
  fun globalName (name) {
    "global_" ++ name
  }

  -- Returns a string representation of the environment
  fun envString () {
    sprintf ("Stack     : %s\nStackSlots: %d\nGlobals   : %s\n", stack.string, stackSlots, elements (globals).string)
  }
  
  -- Allocates a new position on the symbolic stack;
  -- returns a pair: a location for allocated item and
  -- an updated environment
  fun allocate () {
    case 
      case stack of
        {}        -> [ebx, 0]
      | S (n) : _ -> [S (n+1), n+2]
      | R (n) : _ -> if n < nRegs then [R (n+1), stackSlots] else [S (nLocals), nLocals + 1] fi
      | _         -> [S (nLocals), nLocals + 1]
      esac
    of [x, n] -> [x, makeEnv (x : stack, if n > stackSlots then n else stackSlots fi, globals, barrier, stackMap, fLabel, nLocals)]esac
  }

  -- Pushes an item on the symbolic state; returns an updated envirtonment
  fun push (y) {
    makeEnv (y : stack, stackSlots, globals, barrier, stackMap, fLabel, nLocals)
  }

  -- Pops one item from the symbolic stack; returns a pair: a popped
  -- item and an updated environment
  fun pop () {
    case stack of
      x : stack -> [x, makeEnv (stack, stackSlots, globals, barrier, stackMap, fLabel, nLocals)]
    esac
  }

  -- Pops two items from the symbolic stack; returns a triple:
  -- popped items and an undated environment
  fun pop2 () {
    case stack of
      x : y : stack -> [x, y, makeEnv (stack, stackSlots, globals, barrier, stackMap, fLabel, nLocals)]
    esac
  }

  -- Peeks the top of the symbolic stack
  fun peek () {
    stack.fst
  }
  
  -- Adds a global variable; returns an updated environment
  fun addGlobal (name) {
    makeEnv (stack, stackSlots, addSet (globals, globalName (name)), barrier, stackMap, fLabel, nLocals)
  }

  -- References an allocation
  fun loc (alloc) {
    case alloc of
      Glb (x) -> M (globalName (x))
    | Arg (i) -> S (-1-i)
    | Loc (i) -> S (i)
    esac
  }
  
  -- Gets a list of global variables from the environment
  fun getGlobals () {
    globals.elements
  }

  -- Gets a maximal stack size from the environment
  fun getStackSize () {
    stackSlots
  }

  -- Gets barrier condition
  fun isBarrier () {
    barrier
  }

  -- Sets barrier condition
  fun setBarrier () {
    makeEnv (stack, stackSlots, globals, true, stackMap, fLabel, nLocals)
  }

  -- Associates the current symbolic state with a label
  fun setStack (l) {
    makeEnv (stack, stackSlots, globals, false, addMap (stackMap, l, stack), fLabel, nLocals)
  }

  -- Retrieves a stack for a label
  fun retrieveStack (l) {
    case findMap (stackMap, l) of
      None         -> makeEnv (stack, stackSlots, globals, false, stackMap, fLabel, nLocals)
    | Some (stack) -> makeEnv (stack, stackSlots, globals, false, stackMap, fLabel, nLocals)
    esac
  }

  -- Sets the label of current function
  fun enterFunction (fLabel, nl) {
    makeEnv (stack, stackSlots, globals, false, stackMap, fLabel, nl)
  }

  -- Gets the label of current function
  fun currentFunction () {
    fLabel
  }

  -- Gets the list of live registers past given symbolic stack depth
  fun liveRegisters (depth) {
    fun inner (d, acc, st) {
      case st of
        {}             -> acc
      | (r@R (_)) : tl -> inner (d+1, if d >= depth then r : acc else acc fi, tl)
      | _         : tl -> inner (d+1, acc, tl)
      esac
    }

    inner (0, {}, stack)
  }

   -- Gets a local static size for the current function
  fun staticSize () {
    nLocals + stackSlots
  }

  [envString,
   allocate,
   push,
   pop,
   pop2,
   addGlobal,
   loc,
   getGlobals,
   getStackSize,
   peek,
   isBarrier,
   setBarrier,
   setStack,
   retrieveStack,
   enterFunction,
   currentFunction,
   liveRegisters,
   staticSize]
}

-- Exported accessors
fun envString (env) {
  env [0] ()
}

fun allocate (env) {
  env [1] ()
}

fun push (env, x) {
  env [2] (x)
}

fun pop (env) {
  env [3] ()
}

fun pop2 (env) {
  env [4] ()
}

fun addGlobal (env, name) {
  env [5] (name)
}

fun loc (env, name) {
  env [6] (name)
}

fun getGlobals (env) {
  env [7] ()
}

fun getStackSize (env) {
  env [8] ()
}

fun peek (env) {
  env [9] ()
}

fun isBarrier (env) {
  env [10] ()
}

fun setBarrier (env) {
  env [11] ()
}

fun setStack (env, l) {
  env [12] (l)
}

fun retrieveStack (env, l) {
  env [13] (l)
}

fun enterFunction (env, fLabel, nL) {
  env [14] (fLabel, nL)
}

fun currentFunction (env) {
  env [15] ()
}

fun liveRegisters (env, depth) {
  env [16] (depth)
}

fun staticSize (env) {
  env [17] ()
}

-- Creates an initial environment
fun initEnv () {
  makeEnv (0, emptySet (compare), emptySet (compare), false, emptyMap (compare), "", 0)
}

-- Codegeneration helper functions
-- Generates code section
fun codeSection (text) {
  singletonBuffer (Meta ("\t.text\n")) <+> text
}

-- Generates data section
fun dataSection (text) {
  singletonBuffer (Meta ("\t.data\n")) <+> text
}

-- Generates data definition
fun dataDef (name) {
  Meta (sprintf ("%s:\t.int\t0\n", name))
}

-- Generates function prologue
fun prologue (fLabel) {
  singletonBuffer (Push  (ebp)) <+
  Mov   (esp, ebp) <+
  Binop ("-", M (sprintf ("$%s_SIZE", fLabel)), esp)  
}

-- Generates function epilogue
fun epilogue (env) {
  var metaDef = Meta (sprintf ("\t.set\t%s_SIZE,\t%d\n", env.currentFunction, env.staticSize * wordSize));

  if compare (env.currentFunction, "main") == 0
  then [env, singletonBuffer (Mov (ebp, esp)) <+ Pop (ebp) <+ Binop ("^", eax, eax) <+ Ret <+ metaDef]
  else case env.pop of
         [y, env] -> [env, singletonBuffer (Mov (y, eax)) <+ Mov (ebp, esp) <+ Pop (ebp) <+ Ret <+ metaDef]
       esac
  fi
}

-- Checks if an operand resides on a stack
fun stackOpnd (opnd) {
  case opnd of
    S (_) -> true
  | _     -> false
  esac      
}

-- Checks if an operand resides in memory
fun memOpnd (opnd) {
  case opnd of
    S (_) -> true
  | M (_) -> true
  | _     -> false
  esac
}

-- Generates a move between locations, using
-- intermediate register if needed
fun move (from, to) {
  if memOpnd (from) && memOpnd (to)
  then singletonBuffer (Mov (from, eax)) <+ Mov (eax, to)
  else singletonBuffer (Mov (from, to))
  fi
}

-- Gets a suffix for Set instruction from
-- source language comparison operator
fun suffix (op) {
  case op of
    "<"  -> "l"
  | "<=" -> "le"
  | "==" -> "e"
  | "!=" -> "ne"
  | ">=" -> "ge"
  | ">"  -> "g"
  esac
}

fun compileSimpleBinopReg (op, x, y) {
  case x of
       R (_) -> singletonBuffer (Binop (op, x, y))
    |  _ -> listBuffer ({
          Mov (y, eax),
          Binop(op, x, eax),
          Mov (eax, y)
      })
  esac
}

fun compileSimpleBinop (code, op, x, y) {
  code <+> compileSimpleBinopReg (op, x, y)
}

fun toBool(x) {
  listBuffer ({Mov (L(0), eax), Binop("cmp", L(0), x), Set ("ne", "%al"), Mov (eax, x)})
}

fun compileBool(code, op, x, y) {
  code <+> toBool (x) <+> toBool (y) <+> compileSimpleBinopReg (op, x, y)
}

fun compileDiv (code, op, x, y, reg) {
  code <+> (move (y, eax) <+ Cltd <+ IDiv(x) <+> move(reg, y))
}


fun compileComp (code, op, x, y) {
    code <+ Mov (x, edx) <+ Binop("cmp", edx, y) <+ Mov (L (0), eax) <+ Set (suffix (op), "%al") <+ Mov (eax, y)
}

fun addRegCode () {
  listBuffer ({Push (ebx), Push (ecx), Push (esi), Push (edi)})
}

fun loadRegCode () {
  listBuffer ({Pop (edi), Pop (esi), Pop (ecx), Pop (ebx)}) 
}

fun compileSaveRegRecursive (reglist) {
	case reglist of 
			{} -> emptyBuffer()
		|	head : tail -> (
			var tailres = compileSaveRegRecursive(tail);
			singletonBuffer(Push (head)) <+> tailres
		)
	esac
}

fun compileLoadRegRecursive (reglist) {
	case reglist of 
			{} -> emptyBuffer()
		|	head : tail -> (
			var tailres = compileLoadRegRecursive(tail);
			singletonBuffer(Pop (head)) <+> tailres
		)
	esac
}


fun compileArgsPushRecursive(env, argsCnt, result) {
	case argsCnt of 
			0 -> [env, result]
		|	_ -> (
			var res1 = pop (env);
			case res1 of 
				[argMem, env1] -> (
					var resNew = result <+ Push (argMem);
					compileArgsPushRecursive(env1, argsCnt - 1, resNew)
				)
			esac
		)
	esac
}

-- Compiles stack machine code into a list of x86 instructions. Takes an environment
-- and stack machine code, returns an updated environment and x86 code.
fun compile (env, code) {
  fun compile (env, code) {
    foldl (
      fun ([env, scode], i) {
        var code = scode <+ Meta ("# " ++ showSMInsn (i) ++ "\n");
        case i of
          READ ->
            case env.allocate of
	      [s, env] -> [env, code <+ Push (edx) <+ Push (ecx) <+ Call ("Lread") <+ Pop (ecx) <+ Pop (edx) <+ Mov (eax, s)]
            esac             
        | WRITE ->
            case env.pop of
	      [s, env] -> [env, code <+ Push (edx) <+ Push (ecx) <+ Push (s) <+ Call ("Lwrite") <+ Pop (eax) <+ Pop (ecx) <+ Pop (edx)]
            esac
        (* Assignment *)
        
         -- Some guidelines for generating function calls:
         --
         -- 1. generate instructions to save live registers on the X86 stack (use
         --    env.liveRegisters (number of arguments);
         -- 2. generate instructions to move actual parameters from the symbolic
         --    stack to the hardware one;
         -- 3. generate the call itself;
         -- 4. discard the actual parameters from the stack;
         -- 5. restore saved live registers.
         --
         -- Some guidelines for generating functions:
         --
         -- 1. generate proper prologue for BEGIN instruction (use "prologue" helper); use
         --    env.enterFunction to create a proper environment;
         -- 2. generate epilogue for END instruction.
        
		| BINOP (op) ->
            case env.pop2 of
              [x, y, envPop] -> (
                var envNew = envPop.push (y);
                case op of
                  "+" -> [envNew, compileSimpleBinop (code, op, x, y)]
                  | "-" -> [envNew, compileSimpleBinop (code, op, x, y)]
                  | "*" -> [envNew, compileSimpleBinop (code, op, x, y)]
                  | "/" -> [envNew,  compileDiv (code, op, x, y, eax)]
                  | "%" -> [envNew,  compileDiv (code, op, x, y, edx)]
                  | "&&" -> [envNew, compileBool (code, op, x, y)]
                  | "!!" -> [envNew,  compileBool (code, op, x, y)]
                  | "==" -> [envNew, compileComp (code, op, x, y)]
                  | "!=" -> [envNew, compileComp (code, op, x, y)]
                  | ">" -> [envNew, compileComp (code, op, x, y)]
                  | "<" -> [envNew, compileComp (code, op, x, y)]
                  | ">=" -> [envNew, compileComp (code, op, x, y)]
                  | "<=" -> [envNew, compileComp (code, op, x, y)]
                esac
             )
            esac
        | LD (varName) -> (
            case env.allocate of
              [s, envNew] -> [envNew, code <+> move (envNew.loc(varName), s)]
            esac
          )
        | ST (varName) -> ( 
			var s  = peek (env);
			[env, code <+> move (s,  env.loc(varName)) ]
          )
        | CONST (n) ->
            case env.allocate of
              [s, envNew] -> [envNew, code <+> singletonBuffer (Mov (L(n), s))]
            esac
		| LABEL (label) -> (
			if isBarrier (env)
				then [retrieveStack (env, label), code <+ Label (label)]
				else [env, code <+ Label (label)]
			fi
		)
          
		| JMP (label) -> (
		  var env1 = setStack(env, label);
		  var env2 = setBarrier(env1);
          [env2, code <+ Jmp (label)]
        )
		| CJMP (cond, label) -> (
		  var x86cond = case cond of
			  Z -> "e"
			| NZ -> "ne"
		  esac;
          case env.pop of
            [res, env1] -> (
				var env2 = setStack(env1, label);
				[env2, code <+ Binop("cmp", L (0), res) <+ CJmp(x86cond, label) ] 
			)
          esac
        )
		| DROP -> 
			case pop (env) of 
				[s1, envNew] -> [envNew, code]
			esac
		| DUP -> 
			var value = peek (env);
			case allocate (env) of 
				[s, env1] -> [env1, code <+> move (value, s)]
			esac
		| LDA (varName) ->
			case allocate (env) of 
				[s, envNew] -> (
					var varLoc = envNew.loc(varName);
					[envNew, code <+ Lea (varLoc, eax) <+ Mov (eax, s)]
				)
			esac
		| STI -> 
			case pop2 (env) of 
				[value, varLoc, env1] -> 
					var newCode  =  code <+> singletonBuffer (Mov (varLoc, edx)) <+> move (value, I (0, edx)); 
					var env2 = push(env1, value);
					[env2, newCode]
			esac
		| CALL (funLabel, argsCnt) ->  (
			var livereg = liveRegisters(env, argsCnt);
			var saveregBuff = compileSaveRegRecursive (livereg);
			var loadregBuff = compileLoadRegRecursive (reverse(livereg));
			var argsPushBuff = compileArgsPushRecursive (env, argsCnt, emptyBuffer());
			case argsPushBuff of 
				[env1, argsBuff] -> (
					var allocRes = allocate(env1);
					case allocRes of 
						[ansLoc, envNew] -> [envNew,  code <+> saveregBuff <+> 
												argsBuff <+ Call (funLabel)
												<+ Binop ("+", L(wordSize * argsCnt), esp)
												<+> loadregBuff <+
												Mov (eax, ansLoc)]
					esac
				)
			esac
		)
		| BEGIN (funName, _, localsCnt ) -> (
			var envNew = enterFunction (env, funName, localsCnt);
			var codeNew = prologue (funName);
			[envNew,  code <+> codeNew]
		)
		| GLOBAL (varName) -> (
			[addGlobal(env, varName), code]
		)
		| END -> (
			var res = epilogue(env);
			[res[0], code <+> res[1]]
		)
        | _ -> failure ("codegeneration for instruction %s is not yet implemented\n", i.string)
        (* End *)
        esac
      }, [env, emptyBuffer ()], code)
  }

  compile (env, code) 
}

-- A top-level codegeneration function. Takes a driver's environment and a stack machine program,
-- compiles the program into machine code, and compiles the machine code into an executable
public fun compileX86 (args, code) {
  case compile (initEnv (), code) of
    [env, code] ->
       var asmFile = args.getBaseName ++ ".s",
             runtime = case getEnv ("LAMA_RUNTIME") of
                         #val -> "../runtime/"
                       | path     -> path
                       esac ++ "/runtime.o";

       fwrite (asmFile,
               map (insnString, 
                    getBuffer $
                      singletonBuffer (Meta ("\t.global\tmain\n")) <+>
                      dataSection (listBuffer $ map (dataDef, getGlobals (env))) <+>
                      codeSection (code)
                   ).stringcat);
                    
       system ({"gcc -g -m32 -o ", args.getBaseName, " ", runtime, " ", asmFile}.stringcat)
  esac
}
