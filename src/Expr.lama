-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
      Var (s) -> st (s)
    | Const (integer) -> integer
    | Binop (s, exprLeft, exprRight) -> getBinop(s) (evalExpr(st, exprLeft), evalExpr(st, exprRight))
    | _ -> failure("No such expression.")
  esac
}

public fun getBinop(binopName) {
  case binopName of 
      "+" -> fun (a, b) {a + b}
    | "-" -> fun (a, b) {a - b}
    | "*" -> fun (a, b) {a * b}
    | "/" -> fun (a, b) {a / b}
    | "%" -> fun (a, b) {a % b}
    | "<" -> fun (a, b) {a < b}
    | ">" -> fun (a, b) {a > b}
    | "<=" -> fun (a, b) {a <= b}
    | ">=" -> fun (a, b) {a >= b}
    | "==" -> fun (a, b) {a == b}
    | "!=" -> fun (a, b) {a != b}
    | "&&" -> fun (a, b) {a && b}
    | "!!" -> fun (a, b) {a !! b}
  esac
}