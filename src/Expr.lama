-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
	case expr of
		Const(a) -> a |
		Var(a) -> st(a) |
		Binop(a, expr1, expr2) ->
			case a of
				"+" -> evalExpr(st, expr1) + evalExpr(st, expr2) |
				"-" -> evalExpr(st, expr1) - evalExpr(st, expr2) |
				"*" -> evalExpr(st, expr1) * evalExpr(st, expr2) |
				"/" -> evalExpr(st, expr1) / evalExpr(st, expr2) |
				"%" -> evalExpr(st, expr1) % evalExpr(st, expr2) |
				"<" -> evalExpr(st, expr1) < evalExpr(st, expr2) |
				">" -> evalExpr(st, expr1) > evalExpr(st, expr2) |
				"<=" -> evalExpr(st, expr1) <= evalExpr(st, expr2) |
				">=" -> evalExpr(st, expr1) >= evalExpr(st, expr2) |
				"==" -> evalExpr(st, expr1) == evalExpr(st, expr2) |
				"!=" -> evalExpr(st, expr1) != evalExpr(st, expr2) |
				"&&" -> evalExpr(st, expr1) && evalExpr(st, expr2) |
				"!!" -> evalExpr(st, expr1) !! evalExpr(st, expr2)
			esac |
		_ -> failure("The expression is not recognized!")
	esac
}
