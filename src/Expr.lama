-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalExprVar (c@[st, w], Var (varName)) {
  [c, st (varName)]
}

fun evalExprRef (c, Ref (varName)) {
  [c, varName]
}

fun evalExprConst (c, Const (value)) {
  [c, value]
}

fun evalExprBinop (c, Binop (op, expr0, expr1)) {
  case eval (c, expr0) of
    [c, l] ->
    case eval (c, expr1) of
      [c, r] -> [c,
      case op of
        "+"  -> l + r |
        "-"  -> l -  r |
        "*"  -> l *  r |
        "/"  -> l /  r |
        "%"  -> l %  r |
        "==" -> l == r |
        "!=" -> l != r |
        "<"  -> l <  r |
        "<=" -> l <= r |
        ">"  -> l >  r |
        ">=" -> l >= r |
        "&&" -> l && r |
        "!!" -> l !! r |
        _    -> failure  ("eval Binop is not supported\n")
      esac]
    esac
  esac
}

fun evalExprAssn (c, Assn (refExp, valueExp)) {
  case eval (c, refExp) of
    [c, ref] ->
    case eval (c, valueExp) of
      [c@[st, w], value] -> [[st <- [ref, value], w], value]
    esac
  esac
}

fun evalExprSeq (c, Seq (left, right)) {
  case eval (c, left) of
    [c, _] -> eval (c, right)
  esac
}

fun evalExprRead (c@[st, w], Read (refExp)) {
  case eval (c, refExp) of
    [c, ref] ->
    case readWorld (w) of
      [value, w] -> [[st <- [ref, value], w], Void]
    esac
  esac
}

fun evalExprWrite (c, Write (valueExp)) {
  case eval (c, valueExp) of
    [c@[st, w], value] -> [[st, writeWorld (value, w)], Void]
  esac
}

fun evalExprIf (c, If (cond, ifBr, elseBr)) {
  case eval (c, cond) of
    [c, 0] -> eval (c, elseBr) |
    [c, _] -> eval (c, ifBr)
  esac
}

fun evalExprWhile (c, While (cond, body)) {
  case eval (c, cond) of
    [c, 0] -> [c, Void] |
    [c, _] ->
    case eval (c, body) of
      [c, _] -> evalExprWhile (c, While (cond, body))
    esac
  esac
}

fun evalExprDoWhile (c, DoWhile (body, cond)) {
  case eval (c, body) of
    [c, _] -> evalExprWhile (c, While (cond, body))
  esac
}

fun evalExprIgnore (c, Ignore (expr)) {
  case eval (c, expr) of
    [c, _] -> [c, Void]
  esac
}

fun eval (c, expr) {
  case expr of
    Var   (_)       -> evalExprVar      (c, expr) |
    Ref   (_)       -> evalExprRef      (c, expr) |
    Const (_)       -> evalExprConst    (c, expr) |
    Binop (_, _, _) -> evalExprBinop    (c, expr) |
    Assn (_, _)     -> evalExprAssn     (c, expr) |
    Seq (_, _)      -> evalExprSeq      (c, expr) |
    Skip            -> [c, Void]                  |
    Read (_)        -> evalExprRead     (c, expr) |
    Write (_)       -> evalExprWrite    (c, expr) |
    If (_, _, _)    -> evalExprIf       (c, expr) |
    While (_, _)    -> evalExprWhile    (c, expr) |
    DoWhile (_, _)  -> evalExprDoWhile  (c, expr) |
    Ignore (_)      -> evalExprIgnore   (c, expr)
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
