-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun while_func(expr, stmt, c) {
	var a1 = eval(c, expr);
	c := a1.fst;
	while a1.snd do 
		c:=eval(c, stmt).fst;
		a1 := eval(c, expr);
		c := a1.fst 
	od;
	[c, Void]
}

fun do_while_func(expr, stmt, c) {
	var a1;
	do 
		c:=eval(c, stmt).fst;
		a1 := eval(c, expr);
		c := a1.fst
	while a1.snd 
	od;
	[c, Void]
}

fun makeScope(st, defs) {
	case defs of 
	d:dd ->
	st := case d of
		Var(e) -> addNames(st, e)|
		Fun(a, e, b) -> addFunction(st, a, e, b)
	esac;
	makeScope(st, dd)
	| 0 -> st
	| d ->
	st := case d of
		Var(e) -> addNames(st, e)|
		Fun(a, e, b) -> addFunction(st, a, e, b)
	esac;
	st
	esac
}

fun eval (c, expr) {
	case expr of
		Skip -> [c, Void] |
		Set(a, expr1) -> var a1 = eval(c, expr1); 
				  case eval(a1.fst, a) of
					[[st, w], Ref(x)] -> [[st <- [x, a1.snd], w], a1.snd] |
					[cNew, ElemRef(arr, i)] -> arr[i] := a1.snd; [cNew, a1.snd]	
				  esac |
		Assn(a, expr1) -> var a1 = eval(c, expr1); 
				  case eval(a1.fst, a) of
					[[st, w], Ref(x)] -> [[st <- [x, a1.snd], w], a1.snd] |
					[cNew, ElemRef(arr, i)] -> arr[i] := a1.snd; [cNew, a1.snd]	
				  esac |
		Seq(expr1, expr2) -> eval(eval(c, expr1).fst, expr2) |
		If(expr1, expr2, expr3) ->  var a1 = eval(c,expr1); if a1.snd then eval(a1.fst, expr2) else eval(a1.fst, expr3) fi |
		While(expr1, expr2) -> while_func(expr1, expr2, c) |
		DoWhile(expr2, expr1) -> do_while_func(expr1, expr2, c) |  
		Const(a) -> [c, a] |
		Var(a) -> [c, lookup(c[0], a)] |
		Ref(a) -> [c, Ref(a)] |
		Ignore(e) -> [eval(c, e)[0], Void] |
		Binop(a, expr1, expr2) ->
			case a of
				"+" -> var a1 = eval(c, expr1); [c, a1.snd + eval(a1.fst, expr2).snd] |
				"-" -> var a1 = eval(c, expr1); [c, a1.snd - eval(a1.fst, expr2).snd] |
				"*" -> var a1 = eval(c, expr1); [c, a1.snd * eval(a1.fst, expr2).snd] |
				"/" -> var a1 = eval(c, expr1); [c, a1.snd / eval(a1.fst, expr2).snd] |
				"%" -> var a1 = eval(c, expr1); [c, a1.snd % eval(a1.fst, expr2).snd] |
				"<" -> var a1 = eval(c, expr1); [c, a1.snd < eval(a1.fst, expr2).snd] |
				">" -> var a1 = eval(c, expr1); [c, a1.snd > eval(a1.fst, expr2).snd] |
				"<=" -> var a1 = eval(c, expr1); [c, a1.snd <= eval(a1.fst, expr2).snd] |
				">=" -> var a1 = eval(c, expr1); [c, a1.snd >= eval(a1.fst, expr2).snd] |
				"==" -> var a1 = eval(c, expr1); [c, a1.snd == eval(a1.fst, expr2).snd] |
				"!=" -> var a1 = eval(c, expr1); [c, a1.snd != eval(a1.fst, expr2).snd] |
				"&&" -> var a1 = eval(c, expr1); [c, a1.snd && eval(a1.fst, expr2).snd] |
				"!!" -> var a1 = eval(c, expr1); [c, a1.snd !! eval(a1.fst, expr2).snd]
			esac |
		Scope (d, e) -> var st; st := enterScope(c[0]); st := makeScope(st, d); case eval ([st, c[1]], e) of [[st, w], res] -> [[leaveScope(st), w], res] esac |
		Call(f, args) -> case f of
				 "read" -> var res = readWorld(c[1]); [[c[0], res[1]], res[0]] |
				 "write" -> var a1 = eval(c, args[0]); [[a1.fst[0], writeWorld(a1.snd, a1.fst[1])], Void] |
				 "length" -> var a1 = eval(c, args[0]); case a1.snd of Sexp(_, arr) -> [a1[0], length(arr)] | _ -> [a1[0], length(a1[1])] esac |
				 _ -> 
				 	case c of [st, w] -> 
  						case lookup (st, f) of Fun (argvars, body) ->
      							var globalState = st;
      							case evalList (c, args) of [[st, w], values] ->
          							st := enterFunction(st);
          							while size(argvars) > 0 do
            								st := addName(st, argvars[0], values[0]);
            								argvars := argvars.tl;
            								values := values.tl
          							od;
          							case eval ([st, w], body) of [[st, w], v] -> 
              								[[leaveFunction(globalState, getGlobal(st)), w], v]
          							esac
      							esac
  						esac 
					esac 
				 esac |
		String (v) -> [c, v] |
		Array (expr_list) -> case evalList(c, expr_list) of [c, list_elems] -> [c, listArray(list_elems)] esac |
		Elem (e, i) -> case evalList (c, {e, i}) of [c, {list_elems, idx}] ->  case list_elems of 
       				Sexp (_, list_elems) -> [c, list_elems[idx]]
     				| _ -> [c, list_elems[idx]]  
     			       esac esac |
		ElemRef (e, i) -> case evalList (c, {e, i}) of [c, {list_elems, idx}] -> case list_elems of
        				Sexp (_, list_elems) -> [c, ElemRef(list_elems, idx)]
      					| _ -> [c, ElemRef(list_elems, idx)]
 				  esac esac |
		Sexp(tag, expr_list) -> case evalList(c, expr_list) of [c, list_elems] -> [c, Sexp(tag, listArray(list_elems))] esac |
		_ -> failure("The expression %s is not recognized!", expr.string)

	esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
