-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (configuration@[state, world], expression) {
  -- printf("evalexpr %s\n", expression.string);

  case expression of
    Const (value) ->
      [configuration, value] |
    Var (variableName) -> 
      [configuration, state(variableName)] |
    Ref (x) ->
      [configuration, Ref(x)] |
    Binop (operation, subexpression1, subexpression2) ->
      case evalList(configuration, {subexpression1, subexpression2}) of 
        [configuration, {lhs, rhs}] ->
          [configuration, evalOp(operation, lhs, rhs)]
      esac |
    Assn (subexpression1, subexpression2) -> 
      case evalList(configuration, {subexpression1, subexpression2}) of
        [[state, world], {Ref(varName), value}] ->
          [[state <- [varName, value], world], value]
      esac |
    Seq (subexpression1, subexpression2) -> 
      case eval(configuration, subexpression1) of
        [configuration, _] ->
          eval(configuration, subexpression2)
      esac |
    Read (variableName) -> 
      var result = readWorld(world);
      [[(state <- [variableName, result.fst]), result.snd], Bottom] |
    Write (subexpression) ->
      case eval(configuration, subexpression) of
        [[state, world], value] ->
          [[state, writeWorld(value, world)], Bottom]
      esac |
    If (condition, consequentBody, alternativeBody) ->
      case eval(configuration, condition) of
        [configuration, 0] -> eval(configuration, alternativeBody) |
        [configuration, _] -> eval(configuration, consequentBody)
      esac |
    While (condition, body) ->
      case eval(configuration, condition) of 
        [configuration, 0] -> [configuration, Bottom] |
        _ ->
          eval(eval(configuration, body)[0], expression)
      esac |
    DoWhile (body, condition) ->
      case eval(eval(configuration, body)[0], condition) of
        [configuration, 0] -> [configuration, Bottom] |
        [configuration, _] -> eval(configuration, expression)
      esac |
    Ignore (subexpression) ->
      [eval(configuration, subexpression)[0], Bottom] |
    Skip ->
      [configuration, Bottom] |
    _ ->
      failure ("Unknown expression '" ++ string(expression) ++ "' appeared at evaluation\n")
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
