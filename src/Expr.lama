-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Const (z) -> [c, z]
  | Var (x) -> [c, s(x)]
  | Ref (x) -> [c, x]
  | Binop (op, l, r) -> 
      case evalList (c, {l, r}) of
        [c@[s,w], {l1, r1}] -> [c, binop (op, l1, r1)]
      esac
  | Skip -> [c, Void]
  | Assn (l, r) ->
      case evalList (c, {l, r}) of
        [c@[s,w], {l,r}] -> [[s <- [l, r], w], r]
      esac 
  | Read (x) ->
      var n;
      n := readWorld(w);
      [[s <- [eval (c, x)[1], n[0]], n[1]], Void]
  | Write (e) ->
      case eval (c, e) of
        [[s,w], e] -> [[s, writeWorld (e, w)], Void] 
      esac
  | Seq (s1, s2) -> 
      case evalList (c, {s1, s2}) of
        [c, {v1, v2}] -> [c, v2]
      esac
  | Ignore (e) -> [ eval (c, e)[0], Void]

  | While (exp, st) ->
      case eval (c, exp) of
        [c, v] -> if (v != 0) then eval (eval (c, st)[0], expr) else [c, Void] fi
      esac

  | If (e, s1, s2) ->
      case eval (c, e) of
        [c, v] -> if (v != 0) then eval (c, s1) else eval (c, s2) fi 
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}

public fun binop(bp, x, y){
  case bp of
    "+"  -> x +  y 
  | "-"  -> x -  y 
  | "*"  -> x *  y 
  | "/"  -> x /  y 
  | "%"  -> x %  y 
  | "==" -> x == y 
  | "!=" -> x != y 
  | "<"  -> x <  y 
  | "<=" -> x <= y 
  | ">"  -> x >  y 
  | ">=" -> x >= y 
  | "&&" -> x && y 
  | "!!" -> x !! y 
  esac
}
