-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Const (v) -> [c, v] |
    Var (v) -> [c, s(v)] |
    Ref (x) -> [c, Ref(x)] |
    Binop (o, e1, e2) ->
      case evalList(c, {e1, e2}) of
        [c, {lhs, rhs}] -> [c, evalOp(o, lhs, rhs)]
      esac |
    Assn (e1, e2) ->
      case evalList(c, {e1, e2}) of
        [[s, w], {Ref(n), v}] -> [[s <- [n, v], w], v]
      esac |
    Seq (s1, s2) ->
      case eval(c, s1) of
        [c, _] -> eval(c, s2)
      esac |
    Read (n) ->
      var res = readWorld(w);
      [[(s <- [n, res[0]]), res[1]], Bottom] |
    Write (se) ->
      case eval(c, se) of
        [[s, w], v] -> [[s, writeWorld(v, w)], Bottom]
      esac |
    If (cond, b1, b2) ->
      case eval(c, cond) of
        [c, 0] -> eval(c, b2) |
        [c, _] -> eval(c, b1)
      esac |
    While (cond, body) ->
      case eval(c, cond) of
        [c, 0] -> [c, Bottom] |
        _ -> eval(eval(c, body)[0], expr)
      esac |
    DoWhile (body, cond) ->
      case eval(eval(c, body)[0], cond) of
        [c, 0] -> [c, Bottom] |
        [c, _] -> eval(c, expr)
      esac |
    Ignore (se) -> [eval(c, se)[0], Bottom] |
    Skip -> [c, Bottom]
  esac
}

public fun evalBinop (s, e1, e2) {
  case s of
    "+" -> e1 + e2 |
    "-" -> e1 - e2 |
    "*" -> e1 * e2 |
    "/" -> e1 / e2 |
    "%" -> e1 % e2 |
    "<" -> e1 < e2 |
    ">" -> e1 > e2 |
    "<=" -> e1 <= e2 |
    ">=" -> e1 >= e2 |
    "==" -> e1 == e2 |
    "!=" -> e1 != e2 |
    "&&" -> e1 && e2 |
    "!!" -> e1 !! e2
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
