-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, vl] -> [c, vl : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
-- c - configuration
-- s - state
-- w - world
-- expr - expression
-- v - value
-- n - name
-- se - subexpression
-- cond - condition
fun eval (c@[s, w], expr) {
  -- printf("7 %s\n", expr.string);
  case expr of
    Const (v) -> [c, v] |
    Var (v) -> [c, lookup(s, v)] |
    Ref (x) -> [c, Ref(x)] |
    Binop (o, e1, e2) ->
      case evalList(c, {e1, e2}) of
        [c, {lhs, rhs}] -> [c, evalOp(o, lhs, rhs)]
      esac |
    Assn (e1, e2) ->
      case evalList(c, {e1, e2}) of
        [[s, w], {Ref(n), v}] -> [[s <- [n, v], w], v] |
        [c, {ElemRef(arr, ind), v}] ->
          arr[ind] := v;
          [c, v]
      esac |
    Seq (s1, s2) ->
      case eval(c, s1) of
        [c, _] -> eval(c, s2)
      esac |
   -- Read (n) ->
   --   var res = readWorld(w);
   --   [[(s <- [n, res[0]]), res[1]], Bottom] |
   -- Write (se) ->
   --   case eval(c, se) of
   --     [[s, w], v] -> [[s, writeWorld(v, w)], Bottom]
   --   esac |
    If (cond, b1, b2) ->
      case eval(c, cond) of
        [c, 0] -> eval(c, b2) |
        [c, _] -> eval(c, b1)
      esac |
    While (cond, body) ->
      case eval(c, cond) of
        [c, 0] -> [c, Bottom] |
        _ -> eval(eval(c, body)[0], expr)
      esac |
    DoWhile (body, cond) ->
      case eval(eval(c, body)[0], cond) of
        [c, 0] -> [c, Bottom] |
        [c, _] -> eval(c, expr)
      esac |
    Ignore (se) -> [eval(c, se)[0], Bottom] |
    Scope(defs, e) ->
      if size (defs) == 0 then
        eval (c, e)
      else
        s := enterScope(s);
        while size(defs) > 0 do
          s := case defs[0] of
            Var (vs) -> addNames (s, vs) |
            Fun (name, args, body) -> addFunction (s, name, args, body)
          esac;
          defs := defs.tl
        od;
        case eval([s, w], e) of
          [[s, w], v] ->
            [[leaveScope(s), w], v]
        esac
      fi |
    Call(name, args) ->
      case name of
        "read" ->
          var rw = readWorld (w);
          [[s, rw[1]], rw[0]] |
        "write" ->
          case eval (c, args[0]) of
            [[s, w], v] -> [[s, writeWorld (v, w)], Bottom]
          esac |
        "length" ->
          case eval (c, args[0]) of
            [[s, w], v] -> [c, length (v)]
          esac |
          _ ->
            case lookup(s, name) of Fun(argNames, body) ->
              var oldS = s;
              case evalList(c, args) of [[s, w], argValues] ->
                s := enterFunction(s);
                while size(argNames) > 0 do
                  s := addName(s, argNames[0], argValues[0]);
                  argNames := argNames.tl;
                  argValues := argValues.tl
                od;
                case eval([s, w], body) of [[s, w], ret] ->
                  s := leaveFunction(oldS, getGlobal (s));
                  [[s, w], ret]
                esac
              esac
            esac
        esac |
    String (v) -> [c, v] |
    Array (exprs) -> case evalList (c, exprs) of
      [c, v] -> [c, listArray (v)]
    esac |
    Elem (arrE, indE) -> case evalList (c, {arrE, indE}) of
       [c, {arr, ind}] -> [c, arr[ind]]
    esac |
    ElemRef(arrE, indE) ->
     case evalList(c, {arrE, indE}) of
       [c, {arr, ind}] -> [c, ElemRef(arr, ind)]
     esac |
    Skip -> [c, Bottom]
  esac
}


-- public fun evalExpr (st, expr) {
--  case expr of
--    Const (c) -> c |
--    Var (v) -> st (v) |
--    Binop (s, e1, e2) -> evalBinop(s, evalExpr(st, e1), evalExpr(st, e2))
--  esac
-- }

public fun evalBinop (s, e1, e2) {
  case s of
    "+" -> e1 + e2 |
    "-" -> e1 - e2 |
    "*" -> e1 * e2 |
    "/" -> e1 / e2 |
    "%" -> e1 % e2 |
    "<" -> e1 < e2 |
    ">" -> e1 > e2 |
    "<=" -> e1 <= e2 |
    ">=" -> e1 >= e2 |
    "==" -> e1 == e2 |
    "!=" -> e1 != e2 |
    "&&" -> e1 && e2 |
    "!!" -> e1 !! e2
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
--public fun evalExpr (input, expr) {
--  case eval ([emptyState (), createWorld (input)], expr) of
--    [c, _] -> c.snd.getOutput
--  esac
--}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
