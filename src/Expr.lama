-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var   (s)          -> st (s)
  | Const (n)          -> n
  | Binop (bp, e1, e2) -> binop(bp, evalExpr(st, e1), evalExpr(st, e2))
  esac
}

public fun binop(bp, x, y){
  case bp of
    "+"  -> x +  y 
  | "-"  -> x -  y 
  | "*"  -> x *  y 
  | "/"  -> x /  y 
  | "%"  -> x %  y 
  | "==" -> x == y 
  | "!=" -> x != y 
  | "<"  -> x <  y 
  | "<=" -> x <= y 
  | ">"  -> x >  y 
  | ">=" -> x >= y 
  | "&&" -> x && y 
  | "!!" -> x !! y 
  esac
}

