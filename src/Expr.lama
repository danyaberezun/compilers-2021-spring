-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (l, r)      -> case evalList (c, {l, r}) of 
                          [[s1, w1], {Ref (x), v}] -> [[s1 <- [x, v], w1], v]
                        esac
  | Seq (s1, s2)     -> case eval (c, s1) of 
                          [c1, _] -> eval (c1, s2)
                        esac
  | Skip             -> [c, Bottom]
  | Read (x)         -> case readWorld (w) of
                          [value, w1] -> [[s <- [x, value], w1], Bottom]
                        esac
  | Write (x) ->
            case eval(c, x) of
              [[st, w], v] ->
                [[st, writeWorld(v, w)], {}]
            esac 
  | If (e, s1, s2)   -> case eval (c, e) of
                          [c1, n] -> eval (c1, if n then s1 else s2 fi)
                        esac
  | While (e, s)     -> case eval (c, e) of
                          [c1, 0] -> [c1, Bottom]
                        | [c1, _] -> case eval (c1, s) of [c2, _] -> eval (c2, expr) esac
                        esac
  | DoWhile (s, e)    -> eval (c, Seq (s, While (e, s)))
  | Var (x)          -> [c, lookup (s, x)]
  | Ref (x)          -> [c, Ref (x)]
  | Const (n)        -> [c, n]
  | Binop (op, l, r) -> case evalList (c, {l, r}) of 
                          [c, {x, y}] -> [c, evalOp (op, x, y)]
                        esac
  | Ignore (e)      -> case eval (c, e) of 
                          [c1, _] -> [c1, Bottom]
                        esac
  | Scope (vl, e) -> if size (vl) == 0 then
                       eval (c, e)
                    else
                      s := enterScope(s);
                      while size (vl) > 0 do
                        s := case vl[0] of
                               Var (vs) -> addNames (s, vs)
                             | Fun (name, args, body) -> addFunction (s, name, args, body)
                        esac;
                       vl := vl.tl
                      od;
                      case eval([s, w], e) of
                        [[s, w], v] -> [[leaveScope(s), w], v]
                      esac
                    fi
  | Call (name, args) -> checkFun(s, name);
                         case lookup(s, name) of Fun(as, body) ->
                           var oldS = s;
                           case evalList(c, args) of [[s, w], vals] ->
                             s := enterFunction(s);
                             while size(as) > 0 do
                               s := addName(s, as[0], vals[0]);
                               as := as.tl;
                               vals := vals.tl
                             od;
                             case eval([s, w], body) of [[s, w], ret] ->
                               s := leaveFunction(oldS, getGlobal (s));
                               [[s, w], ret]
                             esac
                           esac
                         esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
