-- Expression evaluator
-- Alhasan Alkhaddour M4138c
import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (config@[st, w], exprs){
  -- fun eval (configuration@[state, w], expression)

  case exprs of
	Assn (exp1, exp2) -> 
		case evalList(config, {exp1, exp2}) of
		[[st, w], {Ref(x), v}] -> [[st <- [x, v], w], v]
		esac 
    | Seq (exp1, exp2) -> 
       case eval(config, exp1) of
        [config, _] -> eval(config, exp2)
       esac 
    | Skip -> [config, Bottom] 
    | Read (x) -> 
    	   var res = readWorld(w);
	   [[(st <- [x, res.fst]), res.snd], Bottom] 
    | Write (expr) ->
       case eval(config, expr) of
        [[st, w], v] ->
          [[st, writeWorld(v, w)], Bottom]
       esac 

    | If (cond, thenStmt, elseStmt) ->
       case eval(config, cond) of
          [config, 0] -> eval(config, elseStmt) 
        | [config, _] -> eval(config, thenStmt)
      esac 
    | While (cond, stmt) ->
       case eval(config, cond) of 
          [config, 0] -> [config, Bottom] 
        | _ -> eval(eval(config, stmt)[0], exprs)
       esac 
    | DoWhile (stmt, cond) ->
      	case eval(eval(config, stmt)[0], cond) of
      	   [config, 0] -> [config, Bottom] 
      	 | [config, _] -> eval(config, exprs)
      	esac 
    | Var (v) -> [config, st(v)] 
    | Ref (x) -> [config, Ref(x)] 
    | Const (n) ->  [config, n] 
    | Binop (op, exp1, exp2) ->
      case evalList(config, {exp1, exp2}) of 
        [config, {l, r}] -> [config, evalOp(op, l, r)]
      esac   	
    | Ignore (exprs) ->
      [eval(config, exprs)[0], Bottom] 
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
