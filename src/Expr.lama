-- Expression evaluator 

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalOp(op, v1, v2)
{
  case op of
    "+"  -> v1 +  v2 |
    "-"  -> v1 -  v2 |
    "*"  -> v1 *  v2 |
    "/"  -> v1 /  v2 |
    "%"  -> v1 %  v2 |
    "==" -> v1 == v2 |
    "!=" -> v1 != v2 |
    "<"  -> v1 <  v2 |
    "<=" -> v1 <= v2 |
    ">"  -> v1 >  v2 |
    ">=" -> v1 >= v2 |
    "&&" -> v1 && v2 |
    "!!" -> v1 !! v2 |
    _ -> failure("Can not evaluate binary operation '" ++ string(op) ++ "'\n")
  esac
}


public fun evalExpr(st, expr)
{
  case expr of 
    Var (variableName) -> st(variableName) |
    Const (value) -> value |
    Binop (op, e1, e2) -> evalOp(op, evalExpr(st, e1), evalExpr(st, e2)) |
    _ -> failure("Can not evaluate expression '" ++ string(expr) ++ "'\n")
  esac
}

--printf("%s\n", evalExpr(emptyState, Const(3)).string)
--printf("%s\n", evalExpr(emptyState, Binop("+", Const(3), Const(5))).string)
