-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalAssn (c, Assn (expr1, expr2)) {
  case evalList (c, {expr1, expr2}) of
    [[s, w], {l, r}] -> [[s <- [l, r], w], r]
  esac
}

fun evalBinop(c, Binop (op, expr1, expr2)) {
  case evalList (c, {expr1, expr2}) of
    [c, {l, r}] -> [c, evalOp(op, l, r)]
  esac
}

fun evalSeq (c, Seq (stmt1, stmt2)) {
  eval (eval (c, stmt1).fst, stmt2) 
}

fun evalRead ([state, world], Read (Ref (variable))) {
  var readRes = readWorld (world);
  [[state <- [variable, readRes[0]], readRes[1]], Void]
}

fun evalWrite (c, Write(expr)) {
  case eval (c, expr) of
    [[s, w], v] -> [[s, writeWorld(v, w)], Void]
  esac
}

fun evalIf (conf, If(cond, thenExpr, elseExpr)) {
  case eval (conf, cond) of
    [c, v] -> if v then eval (c, thenExpr) else eval (c, elseExpr) fi
  esac
}

fun evalWhile (conf, wh@While(cond, expr)) {
  case eval (conf, cond) of
    [c, v] -> if v then evalWhile((eval (c, expr)).fst, wh) else [c, Void] fi
  esac
}

fun evalDoWhile (conf, DoWhile(expr, cond)) {
  case eval(conf, expr) of
    [c, _] -> evalWhile(c, While(cond, expr)) 
  esac
}

fun evalIgnore (conf, Ignore (expr)) {
  case eval (conf, expr) of
    [c, _] -> [c, Void]
  esac
}

fun evalScope (c@[st, w], Scope (defs, body)) {
  st := enterScope(st);
  while size(defs) > 0 do
    st := case defs[0] of
      Var (names)            -> addNames (st, names) |
      Fun (name, args, body) -> addFunction (st, name, args, body)
    esac;
    defs := defs.tl
  od;
  --printf("%s\n", st.string);
  --st := foldl(
  --  fun (st, def) {
  --    case def of
  --      Var (names)            -> addNames (st, names) |
  --      Fun (name, args, body) -> addFunction (st, name, args, body)
  --    esac
  --  }, enterScope(st), defs
  --);
  case eval ([st, w], body) of
    [[st, w], v] -> [[leaveScope(st), w], v]
  esac
}

fun evalCall(c@[st, w], Call(name, args)) {
  checkFun (st, name);
  case lookup (st, name) of 
    Fun (argvars, body) ->
      var globalState = st;
      case evalList (c, args) of
        [[st, w], values] ->
          st := enterFunction(st);
          while size(argvars) > 0 do
            st := addName(st, argvars[0], values[0]);
            argvars := argvars.tl;
            values := values.tl
          od;
          --st := foldl(fun (st, pair) {
          --              addName (st, pair.fst, pair.snd)
          --            }, 
          --            enterFunction(st), 
          --            zip(argvars, values)
          --            );
          case eval ([st, w], body) of
            [[st, w], v] -> 
              [[leaveFunction(globalState, getGlobal(st)), w], v]
          esac
      esac
  esac
}

fun eval (c@[s, w], expr) {
  --printf("%s\n", expr.string);
  case expr of
    Var (name)      -> [c, lookup (s, name)]
  | Const (x)       -> [c, x]
  | Ref   (name)    -> [c, name]
  | Skip            -> [c, Void]
  | Binop (_, _, _) -> evalBinop   (c, expr)
  | Assn  (_, _)    -> evalAssn    (c, expr)
  | Seq   (_, _)    -> evalSeq     (c, expr)
  | Read  (_)       -> evalRead    (c, expr)
  | Write (_)       -> evalWrite   (c, expr)
  | If (_, _, _)    -> evalIf      (c, expr)
  | While (_, _)    -> evalWhile   (c, expr)
  | DoWhile (_, _)  -> evalDoWhile (c, expr)
  | Ignore (_)      -> evalIgnore  (c, expr)
  | Scope (_, _)    -> evalScope   (c, expr)
  | Call (_, _)     -> evalCall    (c, expr)
  | _               -> failure     ("Invalid expression type: %s in configuration %s\n", expr.string, c.string)
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
