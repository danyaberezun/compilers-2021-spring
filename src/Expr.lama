-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalBinop(op, lExpr, rExpr){
	case op of
	"+"		-> lExpr + rExpr	|
	"-"		-> lExpr - rExpr	|	
	"*"		-> lExpr * rExpr	|
	"/"		-> lExpr / rExpr	|
	"%"		-> lExpr % rExpr	|
	"<"		-> lExpr < rExpr	|
	">"		-> lExpr > rExpr	|
	"<="	-> lExpr <= rExpr	|
	">="	-> lExpr >= rExpr	|
	"=="	-> lExpr == rExpr	|
	"!="	-> lExpr != rExpr	|
	"&&"	-> lExpr && rExpr	|
	"!!"	-> lExpr !! rExpr	
	esac
}

public fun evalExpr (st, expr) {
	case expr of
	Var(varName)			-> st(varName)						|
	Const(constVal)			-> constVal							|
	Binop(op,lExpr,rExpr)	-> evalBinop(op, evalExpr(st,lExpr), evalExpr(st,rExpr))
	esac
}


