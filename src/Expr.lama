-- Expression evaluator

import List;
import State;

public fun evalBinop (operation, lhsValue, rhsValue) {
  case operation of
    "+"  -> lhsValue + rhsValue
  | "-"  -> lhsValue - rhsValue
  | "*"  -> lhsValue * rhsValue
  | "/"  -> lhsValue / rhsValue
  | "%"  -> lhsValue % rhsValue
  | "<"  -> lhsValue < rhsValue
  | ">"  -> lhsValue > rhsValue
  | "<=" -> lhsValue <= rhsValue
  | ">=" -> lhsValue >= rhsValue
  | "=="  -> lhsValue == rhsValue
  | "!=" -> lhsValue != rhsValue
  | "&&" -> lhsValue && rhsValue
  | "!!" -> lhsValue !! rhsValue
  esac
}


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)
public fun evalExpr (st, expr) {
  case expr of
    Var   (variableName)        -> st (variableName)
  | Const (value)               -> value
  | Binop (operation, lhs, rhs) -> (
      var lhsValue = evalExpr (st, lhs);
      var rhsValue = evalExpr (st, rhs);
      evalBinop(operation, lhsValue, rhsValue)
    )
  esac
}
