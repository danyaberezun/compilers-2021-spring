-- Expression evaluator
-- Alhasan Alkhaddour M4138c
import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (v)   -> st (v) 
  | Const (n) -> n
  | Binop (op, e1, e2) -> evalBinOp (op, evalExpr (st, e1), evalExpr (st, e2))
  esac
}

public fun evalBinOp (op, l, r) {
  case op of
    "!!" -> l !! r
  | "&&" -> l && r
  | "==" -> l == r
  | "!=" -> l != r
  | "<=" -> l <= r
  | "<"  -> l <  r
  | ">=" -> l >= r
  | ">"  -> l >  r 
  | "+"  -> l +  r
  | "-"  -> l -  r
  | "*"  -> l *  r
  | "/"  -> l /  r
  | "%"  -> l %  r
  esac
}

