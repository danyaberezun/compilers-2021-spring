-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  -- failure ("evalExpr not implemented\n")
  case expr of 
  	Var (x) -> st(x)
  |	Const (value) -> value
  |	Binop (op, left, right) -> 
  		var leftExpr = evalExpr(st, left);
  		var rightExpr = evalExpr(st, right);
  		case op of
  			"+" -> leftExpr + rightExpr
  		|	"-" -> leftExpr - rightExpr
  		|	"*" -> leftExpr * rightExpr
  		|	"/" -> leftExpr / rightExpr
  		|	"%" -> leftExpr % rightExpr
  		|	"==" -> leftExpr == rightExpr
  		|	"!=" -> leftExpr != rightExpr
  		|	"<" -> leftExpr < rightExpr
  		|	"<=" -> leftExpr <= rightExpr
  		|	">" -> leftExpr > rightExpr
  		|	">=" -> leftExpr >= rightExpr
  		|	"&&" -> leftExpr && rightExpr
  		|	"!!" -> leftExpr !! rightExpr
  		|	_ -> failure (sprintf("unknown operation %s\n", op.string))
  		esac
  esac
}
