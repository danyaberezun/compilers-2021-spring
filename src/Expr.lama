-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  -- foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)

  while size(names) > 0 do
    state := addName(state, names.hd, Var(0));
    names := names.tl
  od; state
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  var vals = {};
  while size(exprs) > 0 do
    case eval(c, exprs.hd) of 
      [newC, v] -> c := newC; vals := v : vals
    esac;
    exprs := exprs.tl
  od; [c, reverse(vals)]
}

fun declerations(st, ds){
  while size(ds) > 0 do
    st := case ds[0] of 
           Var (x) -> addNames (st, x)
         | Fun (name, args, body) -> addFunction (st, name, args, body)
         esac;
    ds := ds.tl
  od;
  st
}

fun argsDec (s, argsNames, args){
  while size(args) >0 do
    s := addName(s, argsNames[0], args[0]);
    argsNames := argsNames.tl;
    args := args.tl
  od;
  s
}

fun eval (c@[st, w], expr) {
  case expr of
    Const (v) -> [c, v] 
    |Var (x) ->  [c, lookup(st, x)] 
    |Ref (x) -> [c, Ref(x)] 
    | Binop (op, l, r) -> 
          case eval (c, l) of [c1, lRes] -> 
          case eval (c1, r) of [c2, rRes] -> 
            [c2, evalOp (op, lRes, rRes)]
          esac esac
    | Assn (e1, e2) -> 
        case eval (c, e1) of [c1, Ref (x)] -> 
            case eval (c1, e2) of [c2@[st2, w2], value] ->
              [[st2 <- [x, value], w2], value]
            esac 
        esac
    | Seq (e1, e2) -> case eval (c, e1) of
                      [c1, _] -> eval (c1, e2)
                    esac
    |Read (x) -> 
      var rw = readWorld(w);
      [[(st <- [x, rw.fst]), rw.snd], {}] 
    
    |Write (e) ->
      case eval(c, e) of
        [[st, w], v] ->
          [[st, writeWorld(v, w)], {}]
      esac 
    
    | If (cond, trueExpr, falseExpr) -> 
        case eval (c, cond) of
            [c1, 0] -> eval (c1, falseExpr)
          | [c1, _] -> eval (c1, trueExpr)
        esac
    |While (cond, body) ->
          case eval(c, cond) of 
            [c, 0] -> [c, {}] 
            | _ -> eval(eval(c, body)[0], expr)
          esac 
    
    |DoWhile (body, cond) ->
          case eval(eval(c, body)[0], cond) of
            [c, 0] -> [c, {}] 
            |[c, _] -> eval(c, expr)
          esac 
    
    | Scope (defs, expr) ->
        st := enterScope (st);
        st := declerations (st, defs);
        case eval ([st,w], expr) of
          [[st,w], r] -> [[leaveScope (st), w], r]
        esac
    
    | Call (name, args) ->  
      case lookup (st, name) of Fun (argsNames, expr) ->
      case evalList (c, args) of [[st, w], args] ->
      case argsDec(enterFunction (st), argsNames, args) of st ->
        case eval ([st, w], expr) of  [[st,w], r] -> 
        [ [leaveFunction(c[0], getGlobal(st)), w], r]
        esac esac esac esac

    | Ignore (e) -> [eval(c, e)[0], {}]
    | Skip -> [c, {}] 
    |_ -> failure ("inknown expr\n")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
