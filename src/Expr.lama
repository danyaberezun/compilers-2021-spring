-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun prisv (a, x, [st, w]) {
	var a1 = eval([st, w], a);
	[[a1.fst[0] <- [a1.snd, x], a1.fst[1]], x]
}

fun read (a, [st, w]) {
	var a1 = eval([st, w], a);
	var res = readWorld(a1.fst[1]);
	[a1.fst[0] <- [a1.snd, res[0]], res[1]] 
}

fun while_func(expr, stmt, c) {
	var a1 = eval(c, expr);
	c := a1.fst;
	while a1.snd do 
		c:=eval(c, stmt).fst;
		a1 := eval(c, expr);
		c := a1.fst 
	od;
	[c, Void]
}

fun do_while_func(expr, stmt, c) {
	var a1;
	do 
		c:=eval(c, stmt).fst;
		a1 := eval(c, expr);
		c := a1.fst
	while a1.snd 
	od;
	[c, Void]
}

fun makeScope(st, defs) {
	case defs of 
	d:dd ->
	st := case d of
		Var(e) -> addNames(st, e)|
		Fun(a, e, b) -> addFunction(st, a, e, b)
	esac;
	makeScope(st, dd)
	| 0 -> st
	| d ->
	st := case d of
		Var(e) -> addNames(st, e)|
		Fun(a, e, b) -> addFunction(st, a, e, b)
	esac;
	st
	esac
}

fun eval (c, expr) {
	case expr of
		Skip -> [c, Void] |
		Assn(a, expr1) -> var a1 = eval(c, expr1); --printf(" Assn "); 
			prisv(a, a1.snd, a1.fst) |
		Seq(expr1, expr2) -> eval(eval(c, expr1).fst, expr2) |
		Read(a) -> --printf(" Read "); 
			[read(a, c), Void] |
		Write(expr1) -> var out; var a1 = eval(c, expr1); out := [[a1.fst[0], writeWorld(a1.snd, a1.fst[1])], Void]; --printf(" Write "); 
			out |
		If(expr1, expr2, expr3) ->  var a1 = eval(c,expr1); if a1.snd then eval(a1.fst, expr2) else eval(a1.fst, expr3) fi |
		While(expr1, expr2) -> while_func(expr1, expr2, c) |
		DoWhile(expr2, expr1) -> do_while_func(expr1, expr2, c) |  
		Const(a) -> --printf(" Const "); 
			[c, a] |
		Var(a) -> --printf(" Var "); 
			[c, lookup(c[0], a)] |
		Ref(a) -> [c, a] |
		Ignore(e) -> [eval(c, e)[0], Void] |
		Binop(a, expr1, expr2) ->
			case a of
				"+" -> var a1 = eval(c, expr1); [c, a1.snd + eval(a1.fst, expr2).snd] |
				"-" -> var a1 = eval(c, expr1); [c, a1.snd - eval(a1.fst, expr2).snd] |
				"*" -> var a1 = eval(c, expr1); [c, a1.snd * eval(a1.fst, expr2).snd] |
				"/" -> var a1 = eval(c, expr1); [c, a1.snd / eval(a1.fst, expr2).snd] |
				"%" -> var a1 = eval(c, expr1); [c, a1.snd % eval(a1.fst, expr2).snd] |
				"<" -> var a1 = eval(c, expr1); [c, a1.snd < eval(a1.fst, expr2).snd] |
				">" -> var a1 = eval(c, expr1); [c, a1.snd > eval(a1.fst, expr2).snd] |
				"<=" -> var a1 = eval(c, expr1); [c, a1.snd <= eval(a1.fst, expr2).snd] |
				">=" -> var a1 = eval(c, expr1); [c, a1.snd >= eval(a1.fst, expr2).snd] |
				"==" -> var a1 = eval(c, expr1); [c, a1.snd == eval(a1.fst, expr2).snd] |
				"!=" -> var a1 = eval(c, expr1); [c, a1.snd != eval(a1.fst, expr2).snd] |
				"&&" -> var a1 = eval(c, expr1); [c, a1.snd && eval(a1.fst, expr2).snd] |
				"!!" -> var a1 = eval(c, expr1); [c, a1.snd !! eval(a1.fst, expr2).snd]
			esac |
		Scope (d, e) -> var st;  --printf(" Scope "); printf(" %s ", d.string); 
			st := enterScope(c[0]); st := makeScope(st, d); case eval ([st, c[1]], e) of [[st, w], res] -> [[leaveScope(st), w], res] esac |
		Call(f, args) -> case c of [st, w] -> 
					checkFun (st, f);
  					case lookup (st, f) of Fun (argvars, body) ->
      						var globalState = st;
      						case evalList (c, args) of [[st, w], values] ->
          						st := enterFunction(st);
          						while size(argvars) > 0 do
            							st := addName(st, argvars[0], values[0]);
            							argvars := argvars.tl;
            							values := values.tl
          						od;
          						case eval ([st, w], body) of [[st, w], v] -> 
              							[[leaveFunction(globalState, getGlobal(st)), w], v]
          						esac
      						esac
  					esac 
				esac |
				--case lookup(c[0], f) of  Fun(argNames, expr) -> 
				--	var c_curr = args[0];
				--	var st = c_curr[0], wrld = c_curr[1];
				--	var vals = args[1]; 
				--	foldl (fun (st, z) {st.addName (z[0], z[1])}, st, zip(argNames, vals)); 
				--	case eval ([st, wrld], expr) of [[st1, w], res] -> [[leaveFunction (c[0], getGlobal (st1)), w], res] esac
				-- esac |
		_ -> failure("The expression is not recognized!")

	esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> --printf(" Finished "); 
	c.snd.getOutput
  esac
}
