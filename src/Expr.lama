-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        Repeat  (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, vl] -> [c, vl : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addDecls (st, decls) {
    foldl (fun (s, decl) { 
      case decl of
            Var (names) -> addNames (s, names)
          | Fun (name, args, body) -> addFunction (s, name, args, body)
      esac
    }
    , st, decls)
}


fun isMatching(pattern, scrutinee) {
    fun isMatchingList(xs, ps) {
        if length (xs) == size (ps)
          then foldl (fun (r, [x, p]) { r && isMatching (p, x) }, true, zip (arrayList (xs), ps))
          else false
        fi
    }

    case [pattern, scrutinee] of
        [Array (p), Array (x)]        -> isMatchingList (x, p)
      | [Sexp (s1, p), Sexp (s2, x)]  -> compare (s1, s2) == 0 && isMatchingList (x, p)
      | [Named(_, p), _]              ->  case p of
                                            None    -> true
                                          | Some(p) -> isMatching(p, scrutinee)
                                          esac
      | [Const (n), _]                -> n == scrutinee
      | [Wildcard, _]                 -> true
      | _                             -> false
    esac
}

fun evalCase(c, branches, cond) {
    case branches of
      [p, expr]: rest -> if (isMatching (p, cond))
                            then eval(c, expr)
                            else evalCase (c, rest, cond)
                           fi
    | {} -> failure ("Case match failure\n")
    esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Const (value)       -> [c, value]
    | Var (x)           -> [c, lookup (s, x)]
    | Ref (x)           -> [c, expr]
    | Binop (op, l, r)  -> case eval (c, l) of [cl, x] ->
                            case eval (cl, r) of [cr, y] -> [cr, evalOp (op, x, y)] esac
                         esac

    | Skip              -> [c, Void]
    | Assn (l, r)       -> case evalList (c, {l, r}) of
                                  [[ns, nw], {Ref (x), v}]   -> [[ns <- [x, v], nw], v]
                                | [c, {ElemRef (arr, i), v}] -> arr[i] := v; [c, v]
                           esac
    | Seq (s1, s2)      -> eval(eval(c, s1)[0], s2)
    | If (cond, ifT, ifF)   -> case eval (c, cond) of
                                     [cc, 0] -> eval(cc, ifF)
                                    |[cc, _] -> eval(cc, ifT)
                               esac
    | While (cond, body)    -> case eval(c, cond) of
                                     [cc, 0] -> [cc, Void]
                                    |[cc, _] -> eval(eval(cc, body)[0], expr)
                               esac
    | DoWhile (body, cond)  -> eval(c, Seq (body, While(cond, body)))
    | Scope (defs, expr)    -> var sSt = addDecls (enterScope (s), defs);
                               case eval ([sSt, w], expr) of
                                  [cs@[ss, ws], vs] -> [[leaveScope (ss), ws], vs]
                               esac
    | Call (name, args)     -> case lookup (s, name) of
                                  Fun (ps, body) ->
                                    case evalList (c, args) of [c1@[s1, w], vs] ->  
                                        case body of
                                            External -> case evalBuiltin(name, vs, w) of [result, newW] -> [[s, newW], result] esac
                                          | _ ->
                                                var funSt = enterFunction (s1);
                                                var funArgSt = foldl(fun (s, [n, v]) { addName (s, n, v) }, funSt, zip (ps, vs));
                                                case eval ([funArgSt, w], body) of
                                                  [cb@[sb, wb], rb] -> [[leaveFunction (s, getGlobal (sb)), wb], rb]
                                                esac
                                        esac        
                                    esac
                                esac
    | Ignore (expr)         -> [eval (c, expr)[0], Void]
    | String (v)            -> [c, v]
    | Array  (exprs)        -> case evalList (c, exprs) of [c, vals] -> [c, listArray(vals)] esac
    | Sexp (name, exprs)    -> case evalList (c, exprs) of [c, vals] -> [c, Sexp (name, listArray(vals))] esac
    | Elem (expr, index)    -> case eval (c, expr) of
                                  [c, Sexp (_, args)] -> case eval (c, index) of [c, iv] -> [c, args [iv]] esac
                                | [c, arr]            -> case eval (c, index) of [c, iv] -> [c, arr  [iv]] esac
                                esac
    | ElemRef (expr, index) -> case eval (c, expr) of
                                    [c, Sexp (_, args)] -> case eval (c, index) of [c, i] -> [c, ElemRef (args, i)] esac
                                  | [c, arr]            -> case eval (c, index) of [c, i] -> [c, ElemRef (arr, i)] esac
                                  esac
    | Case (scrutinee, brs)   -> evalCase (c, brs, lookup (s, scrutinee))
    | _                       -> failure ("No match evalExpr")
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
