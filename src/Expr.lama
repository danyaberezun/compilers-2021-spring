-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        Repeat  (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVar (state, name) {
  case state.lookup (name) of
    x@Var (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addDefs (state, defs) {
  case defs of
    d:ds -> 
      case d of
        Var (names) -> addDefs (addNames (state, names), ds)
      | Fun (name, args, body) -> addDefs (addFunction (state, name, args, body), ds)
      esac
  | _ -> state
  esac
}

fun evalArgs (state, args, values) {
  case [args, values] of
    [arg:args, value:values] -> evalArgs (addName (state, arg, value), args, values)
  | _ -> state    
  esac
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, vl] -> [c, vl : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun matchArray (scrutinee, patternArr) {
  if length (scrutinee) != length (patternArr) then
    false
  else
    fun traverseArray (idx) {
      if idx == length (patternArr) then
        true
      elif match (scrutinee[idx], patternArr[idx]) then
        traverseArray (idx + 1)
      else
        false
      fi
    }
    traverseArray (0)
  fi
}

fun match (scrutinee, pattern) {
  case [scrutinee, pattern] of
    [_, Wildcard] -> true
  | [#val, Const (x)] -> scrutinee == x
  | [#array, Array (arr)] -> matchArray (scrutinee, arr)
  | [_, Named (_, Wildcard)] -> true
  | [_, Named (_, p)] -> match (scrutinee, p)
  | [Sexp (scrutineeName, scrutineeArr), Sexp (patternName, patternList)] -> 
      (compare (scrutineeName, patternName) == 0) && matchArray (scrutineeArr, listArray (patternList))
  | _ -> false  
  esac
}

fun chooseCase (scrutinee, cases) {
  case cases of
    [pattern, expr] : cases -> 
      case match (scrutinee, pattern) of
        true -> expr
      | _ -> chooseCase (scrutinee, cases)
      esac
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (a, b) ->
      case eval (c, a) of
        [c, Ref (name)] ->
          case eval (c, b) of
            [c@[s, w], v] -> [[s <- [name, v], w], v]
          esac 
      | [c, ElemRef (arr, index)] ->
          case eval (c, b) of
            [c, v] -> 
              arr[index] := v;
              [c, v]
          esac 
      esac
  | Seq (a, b) -> 
      case eval (c, a) of
        [c, v] -> eval (c, b)
      esac
  | Skip -> [c, None]

  | If (e, b1, b2) ->
      case eval (c, e) of
        [c, 0] -> eval (c, b2)
      | [c, _] -> eval (c, b1)
      esac
  | While (e, l) ->
      case eval (c, e) of
        [c, 0] -> [c, None]
      | [c, _] -> 
          case eval (c, l) of
            [c, v] -> eval (c, expr)
          esac
      esac
  | DoWhile (l, e) ->
      case eval (c, l) of
        [c, v] -> eval (c, While (e, l))
      esac
  | Var (v) -> [c, lookup (s, v)]
  | Ref (name) -> [c, Ref (name)]
  | Const (x) -> [c, x]
  | Binop (op, x, y) -> 
    case eval (c, x) of
      [c, vx] ->
        case eval (c, y) of
          [c, vy] -> [c, evalOp (op, vx, vy)]
        esac
    esac
  | Ignore (e) ->
      case eval (c, e) of
        [c, v] -> [c, None]
      esac
  | Call (name, args_exprs) ->
      case evalList (c, args_exprs) of
        [c@[s, w], vs] ->
          case lookupFun (s, name) of
            Fun (args, External) ->
              case evalBuiltin (name, vs, w) of
                [r, w] -> [[s, w], r]
              esac
          | Fun (args, body) ->
              case eval ([evalArgs (enterFunction (s), args, vs), w], body) of
                [c@[s_, w], v] -> [[leaveFunction (s, getGlobal (s_)), w], v]
              esac
          
          esac
      esac
  | Scope (defs, e) ->
        var scopeWithDefs = addDefs (enterScope (s), defs);
        case eval ([scopeWithDefs, w], e) of
          [c@[s, w], v] -> [[leaveScope (s), w], v]
        esac
  | String  (s) -> [c, s]        
  | Array   (exprs) -> 
      case evalList (c, exprs) of
        [c, vs] -> [c, listArray (vs)]
      esac         
  | Elem    (arr, index) -> 
      case eval (c, arr) of
        [c, Sexp (name, exprs)] ->
          case eval (c, index) of
            [c, index] -> [c, exprs [index]]
          esac
      | [c, arr] ->
          case eval (c, index) of
            [c, index] -> [c, arr [index]]
          esac
      esac
  | ElemRef (arr, index) ->
      case eval (c, arr) of
        [c, arr] ->
          case eval (c, index) of
            [c, index] -> [c, ElemRef (arr, index)]
          esac
      esac 
  | Sexp (name, exprs) ->
      case evalList (c, exprs) of
        [c, exprs] -> [c, Sexp (name, listArray (exprs))]
      esac
  | Case (name, cases) ->
      var scrutinee = lookup (s, name);
      eval (c, chooseCase (scrutinee, cases))
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  -- failure ("""%s""", expr.string);
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
