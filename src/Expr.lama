-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalExprVar (c@[st, w], Var (varName)) {
  [c, lookup (st, varName)]
}

fun evalExprRef (c, Ref (varName)) {
  [c, Ref (varName)]
}

fun evalExprConst (c, Const (value)) {
  [c, value]
}

fun evalExprBinop (c, Binop (op, expr0, expr1)) {
  case eval (c, expr0) of
    [c, l] ->
    case eval (c, expr1) of
      [c, r] -> [c,
      case op of
        "+"  -> l + r |
        "-"  -> l -  r |
        "*"  -> l *  r |
        "/"  -> l /  r |
        "%"  -> l %  r |
        "==" -> l == r |
        "!=" -> l != r |
        "<"  -> l <  r |
        "<=" -> l <= r |
        ">"  -> l >  r |
        ">=" -> l >= r |
        "&&" -> l && r |
        "!!" -> l !! r |
        _    -> failure  ("eval Binop is not supported\n")
      esac]
    esac
  esac
}

fun evalExprAssn (c, Assn (refExp, valueExp)) {
  case eval (c, refExp) of
    [c, ref] ->
    case eval (c, valueExp) of
      [c@[st, w], value] ->
        case ref of
          Ref (varName) -> [[st <- [varName, value], w], value]
        | ElemRef (container, index) -> (
            container[index] := value;
            [c, value]
          )
        esac
    esac
  esac
}

fun evalExprSeq (c, Seq (left, right)) {
  case eval (c, left) of
    [c, _] -> eval (c, right)
  esac
}

fun evalExprIf (c, If (cond, ifBr, elseBr)) {
  case eval (c, cond) of
    [c, 0] -> eval (c, elseBr) |
    [c, _] -> eval (c, ifBr)
  esac
}

fun evalExprWhile (c, While (cond, body)) {
  case eval (c, cond) of
    [c, 0] -> [c, Void] |
    [c, _] ->
    case eval (c, body) of
      [c, _] -> evalExprWhile (c, While (cond, body))
    esac
  esac
}

fun evalExprDoWhile (c, DoWhile (body, cond)) {
  case eval (c, body) of
    [c, _] -> evalExprWhile (c, While (cond, body))
  esac
}

fun evalExprIgnore (c, Ignore (expr)) {
  case eval (c, expr) of
    [c, _] -> [c, Void]
  esac
}

fun evalScope (c@[st, w], Scope (defs, expr)) {
  case enterScope (st) of
    st ->
    case eval(
      foldl (fun ([st, w], def) {
        case def of
          Var (vars) -> [addNames (st, vars), w] |
          Fun (name, args, body) -> [addFunction (st, name, args, body), w]
        esac
      }, [st, w], defs),
      expr) of
      [[st, w], value] -> [[leaveScope (st), w], value]
    esac
  esac
}

fun evalCall (c@[st, w], Call (name, argExprs)) {
  lookupFun (st, name);
  case evalList (c, argExprs) of
    [c@[stPar, w], args] ->
    case lookup (stPar, name) of
      Fun (argNames, External) ->
      case name of
        "read"   -> evalBuiltinRead (c)
      | "write"  -> evalBuiltinWrite (c, args[0])
      | "length" -> evalBuiltinLength (c, args[0])
      esac
    | Fun (argNames, expr) ->
      case enterFunction (stPar) of
        st ->
        case eval (foldl (fun ([st, w], [argName, argValue]) {
                            [addName (st, argName, argValue), w]
                          }, [st, w], zip (argNames, args)),
                   expr) of
          [[st, w], value] -> [[leaveFunction (stPar, getGlobal (st)), w], value]
        esac
      esac
    esac
  esac
}

fun evalExprStr (c, String (value)) {
  [c, value]
}

fun evalExprElem (c, Elem (containerExpr, indexExpr)) {
  case eval (c, containerExpr) of
    [c, container] ->
      container := case container of
                     Sexp (_, contents) -> contents
                   | contents -> contents
                   esac;
      case eval (c, indexExpr) of
        [c, index] -> [c, container[index]]
      esac
  esac
}

fun evalExprElemRef (c, ElemRef (containerExpr, indexExpr)) {
  case eval (c, containerExpr) of
    [c, container] ->
      case eval (c, indexExpr) of
        [c, index] -> [c, ElemRef (container, index)]
      esac
  esac
}

fun evalExprArray (c, Array (exprList)) {
  case evalList (c, exprList) of
    [c, contents] -> [c, listArray (contents)]
  esac
}

fun evalSexp (c, Sexp (literal, exprList)) {
  case evalList (c, exprList) of
    [c, contents] -> [c, Sexp (literal, listArray (contents))]
  esac
}

fun eval (c@[st,w], expr) {
  -- printf("%s\n", string(expr));
  case expr of
    Var   (_)          -> evalExprVar       (c, expr) |
    Ref   (_)          -> evalExprRef       (c, expr) |
    Const (_)          -> evalExprConst     (c, expr) |
    Binop (_, _, _)    -> evalExprBinop     (c, expr) |
    Assn (_, _)        -> evalExprAssn      (c, expr) |
    Seq (_, _)         -> evalExprSeq       (c, expr) |
    Skip               -> [c, Void]                   |
    If (_, _, _)       -> evalExprIf        (c, expr) |
    While (_, _)       -> evalExprWhile     (c, expr) |
    DoWhile (_, _)     -> evalExprDoWhile   (c, expr) |
    Ignore (_)         -> evalExprIgnore    (c, expr) |
    Scope (_, _)       -> evalScope         (c, expr) |
    Call (_, _)        -> evalCall          (c, expr) |
    String (_)         -> evalExprStr       (c, expr) |
    Elem (_, _)        -> evalExprElem      (c, expr) |
    ElemRef (_, _)     -> evalExprElemRef   (c, expr) |
    Array (_)          -> evalExprArray     (c, expr) |
    Sexp (_, _)        -> evalSexp          (c, expr)
  esac
}
(* End *)


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
