-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun binop (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  -- printf("evalexpr %s\n", expr.string);

  case expr of
    Const (v) -> [c, v] 
    |Var (x) ->  [c, st(x)] 
    |Ref (x) -> [c, Ref(x)] 
    |Read (x) -> 
          var r = readWorld(w);
          [[(st <- [x, r.fst]), r.snd], {}] 
    |Write (x) ->
            case eval(c, x) of
              [[st, w], v] ->
                [[st, writeWorld(v, w)], {}]
            esac 
    |Binop (op, l, r) ->
          case evalList(c, {l, r}) of 
            [c, {lc, rc}] ->
              [c, binop(op, lc, rc)]
          esac 
    |Assn (e1, e2) -> 
            case evalList(c, {e1, e2}) of
              [[st, w], {Ref(x), v}] ->
                [[st <- [x, v], w], v]
            esac 
    |Seq (st1, st2) -> 
            case eval(c, st1) of
              [c, _] ->
                eval(c, st2)
            esac 
    |If (cond, ifSt, elseSt) ->
              case eval(c, cond) of
                [c, 0] -> eval(c, elseSt) |
                [c, _] -> eval(c, ifSt)
              esac 
    |While (cond, body) ->
            case eval(c, cond) of 
              [c, 0] -> [c, {}] |
              _ ->
                eval(eval(c, body)[0], expr)
            esac 
    |DoWhile (body, cond) ->
            case eval(eval(c, body)[0], cond) of
              [c, 0] -> [c, {}] |
              [c, _] -> eval(c, expr)
            esac 
    |Ignore (x) -> [eval(c, x)[0], {}]
    |Skip -> [c, {}] 
    | _ ->
      failure ("Unknown expr '" ++ string(expr) ++ "' appeared at evaluation\n")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}

