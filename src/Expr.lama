-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExprVar (string, Var (name)) {
  string (name)
}

public fun evalExprConst (string, Const (name)) {
  name
}

public fun evalExprBinop (op, exprLeft, exprRight) {
  case op of
	"+"  -> infix +  |
	"-"  -> infix -  |
	"*"  -> infix *  |
	"/"  -> infix /  |
	"%"  -> infix %  |
	"==" -> infix == |
	"!=" -> infix != |
	"<"  -> infix <  |
	"<=" -> infix <= |
	">"  -> infix >  |
	">=" -> infix >= |
	"&&" -> infix && |
	"!!" -> infix !! |
	_    -> failure("evalExprBinop is not implemented for this operation\n")
  esac (exprLeft, exprRight)
}

public fun evalExpr (st, expr) {
  case expr of
	Var (value)        				-> evalExprVar (st, Var (value)) |
	Const (value)        			-> evalExprConst (st, Const (value)) |
	Binop (op, exprLeft, exprRight) -> evalExprBinop (op, evalExpr (st, exprLeft), evalExpr (st, exprRight)) |
	_                    			-> failure("evalExpr is not implemented for this operation\n")
  esac
}

