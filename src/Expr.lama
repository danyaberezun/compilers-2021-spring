-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun defineDeclarations (state, decls) {
	foldl (fun (s, decl) {
		case decl of
			Var (names) -> addNames (s, names)
		|	Fun (name, args, body) -> addFunction (s, name, args, body)
		esac
	}, state, decls)
}

fun eval (c@[s, w], expression) {
  case expression of
  	Const (value) -> [c, value]
  | Var (x) -> [c, lookup (s, x)]	-- TODO checkVar (s, x); 
  | Ref (x) -> [c, expression]
  | Binop (op, l, r) -> case eval (c, l) of [c1, w] -> 
                          case eval (c1, r) of [c2, v] -> [c2, evalOp (op, w, v)] esac 
                        esac
-- TODO evalList (too musch memory consumtion)
--|	Binop (op, l, r) -> case evalList (c, {l, r}) of [newC, {w, v}] -> [newC, evalOp(op, w, v)] esac
  | Skip -> [c, Void]
  |	Assn (l, r) -> case evalList (c, {l, r}) of [[newS, newW], {Ref (x), v}] -> [[newS <- [x, v], newW], v] esac
  |	Read (x) -> case readWorld(w) of [n, newW] -> [[s <- [x, n], newW], Void] esac
  |	Write (expr) -> case eval(c, expr) of [[newS, newW], v] -> [[newS, writeWorld(v, newW)], Void] esac
  |	Seq (stm1, stm2) -> eval(eval(c, stm1)[0], stm2)
  | If (expr, ifTrue, ifFalse) -> 
  		case eval(c, expr) 
  			of [newC, n] -> if (n != 0) then eval(newC, ifTrue) else eval(newC, ifFalse) fi
  		esac
  | While (expr, body) -> 
  		case eval(c, expr) 
  			of [newC, n] -> if (n != 0) 
  										then eval((*c'' = *) eval(newC, body)[0], expression)
  										else [newC, Void] 
  										fi
  		esac
  | DoWhile (body, expr) -> eval(c, Seq (body, While(expr, body)))
  | Scope (defs, expr) -> 
  		var scopeState = defineDeclarations (enterScope (s), defs);
  		case eval ([scopeState, w], expr) of
  			[c@[s, w], v] -> [[leaveScope (s), w], v]
  		esac
  | Call (name, args) -> 
  		-- TODO checkFun (s, name)
  		case lookup (s, name) of																-- get fun signature 
  			Fun (params, body) ->
  				case evalList (c, args) of 													-- evaluate args
  					[c1@[s1, w], values] -> 
  						var stateInFun = enterFunction (s1);						-- enter new scope
  						var stateWithArgs = foldl(fun (s, pair@[name, value]) { addName (s, name, value) }, stateInFun, zip (params, values));
  						case eval ([stateWithArgs, w], body) of 				-- evaluate body
  							[c2@[s2, w], result] -> [[leaveFunction (s, getGlobal (s2)), w], result]
  						esac
  				esac
  		esac
  | Ignore (expr) -> [eval (c, expr)[0], Void]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}