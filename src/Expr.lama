-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, vl] -> [c, vl : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun executeWhile (c, cond, body) {
  var condEvalResult = eval (c, cond);
  var newC = condEvalResult.fst;
  case condEvalResult.snd of
    0 -> [c, Void]
  | _ ->
      var bodyEvalResult = eval (newC, body);
      var finalC = bodyEvalResult.fst;
      case bodyEvalResult.snd of
        Void -> executeWhile (finalC, cond, body)
      | _ -> failure ("While/DoWhile body must return Void")
      esac
  esac
}

fun addDefinitions (state, defs) {
  case defs of
    {} -> state
  | curDef : otherDefs ->
      var newState = case curDef of
        Fun (funName, args, body) -> addFunction (state, funName, args, body)
      | Var (varNames) -> addNames (state, varNames)
      esac;
      addDefinitions (newState, otherDefs)
  esac
}

fun addArgs (state, argNames, args) {
  case [argNames, args] of
    [{}, {}] -> state
  | [curName : otherNames, curArg : otherArgs] ->
      var newState = addName (state, curName, Var (curArg));
      addArgs (newState, otherNames, otherArgs)
  esac
}

public fun getArr (arrHolder) {
  case arrHolder of
    Sexp (_, arr@#array) -> arr
  | #array -> arrHolder
  | #str -> arrHolder
  esac
}

fun matchArrays (scrutinee, patternArr) {
  if length (patternArr) != length (scrutinee) then
    false
  else
    fun matchArraysIdx (i) {
      if i == length (patternArr) then
        true
      elif isMatching (scrutinee[i], patternArr[i]) then
        matchArraysIdx (i + 1)
      else
        false
      fi
    }

    matchArraysIdx (0)
  fi
}

fun isMatching (scrutinee, pattern) {
  case pattern of
    Wildcard -> true
  | Const (value) -> 
      case [value, scrutinee] of
        [#val, #val] -> value == scrutinee
      | [#val, _] -> false
      | [_, _] -> failure (sprintf ("%s is not a plain value\n", value.string))
      esac
  | Array (patternLst) ->
      case scrutinee of
        #array -> 
          var patternArr = listArray (patternLst);
          matchArrays (scrutinee, patternArr)
      | _ -> false
      esac
  | Sexp (patternName, patternLst) ->
      case scrutinee of
        Sexp (scrutineeName, scrutineeArr) ->
          var patternArr = listArray (patternLst);
          compare (patternName, scrutineeName) == 0 && matchArrays (scrutineeArr, patternArr)
      | _ -> false
      esac
  | Named (_, None) -> true
  | Named (_, Some (nestedPattern)) -> isMatching (scrutinee, nestedPattern)
  esac
}

fun executeMatch (scrutinee, patternsExprs) {
  case patternsExprs of
    [pattern, expr] : tail ->
      if isMatching (scrutinee, pattern) then
        expr
      else
        executeMatch (scrutinee, tail)
      fi
  | {} -> failure (sprintf("Cannot find an appropriate pattern for scrutinee %s\n", scrutinee.string))
  esac
}

fun eval (c, expr) {
  case expr of
    Assn (refExpr, valueExpr) -> case evalList (c, {refExpr, valueExpr}) of
      [[state, world], {Ref (varName), value}] ->
        var newState = state <- [varName, Var (value)];
        var newC = [newState, world];
        [newC, value]
    | [newC, {ElemRef (arr, idx), value}] ->
        arr[idx] := value;
        [newC, value]
    esac
  | Seq (beforeExpr, afterExpr) ->
      case evalList (c, {beforeExpr, afterExpr}) of 
        [newC, {Void, res}] -> [newC, res]
      | _ -> failure ("First part of Seq must return Void") 
      esac
  | Skip -> [c, Void]
  | If (cond, ifBody, elseBody) ->
      var condEvalResult = eval (c, cond);
      var newC = condEvalResult.fst;
      case condEvalResult.snd of
        0 -> eval (newC, elseBody)
      | _ -> eval (newC, ifBody)
      esac
  | While (cond, body) -> executeWhile (c, cond, body)
  | DoWhile (body, cond) ->
      var bodyEvalResult = eval (c, body);
      var newC = bodyEvalResult.fst;
      case bodyEvalResult.snd of
        Void -> executeWhile (newC, cond, body)
      | _ -> failure ("DoWhile body must return Void")
      esac
  | Var (varName) ->
      var state = c.fst;
      var value = case lookup (state, varName) of
        Var (varValue) -> varValue
      | _ -> error ("Var expected")
      esac;
      [c, value]
  | curRef@Ref (_) -> [c, curRef]
  | Const (n) -> [c, n]
  | Binop (op, aExpr, bExpr) ->
      var aEvalRes = eval (c, aExpr);
      var newC = aEvalRes.fst;
      var a = aEvalRes.snd;

      var bEvalRes = eval (newC, bExpr);
      var finalC = bEvalRes.fst;
      var b = bEvalRes.snd;

      var res = evalOp (op, a, b);
      [finalC, res]
  | Scope (definitions, expr) -> 
      if size (definitions) > 0 then
        var state = c.fst;
        var world = c.snd;

        var stateWithDefs = enterScope (state).addDefinitions (definitions);
        var cWithDefs = [stateWithDefs, world];

        var evalRes = eval (cWithDefs, expr);
        var newC = evalRes.fst;
        var newState = newC.fst;
        var newWorld = newC.snd;
        var res = evalRes.snd;

        var finalState = leaveScope (newState);
        var finalC = [finalState, newWorld];
        [finalC, res]
      else
        eval (c, expr)
      fi
  | Call (funName, argExprs) ->
      var state = c.fst;
      case lookup (state, funName) of Fun (argNames, body) ->
        var argsEvalRes = evalList (c, argExprs);
        var newC = argsEvalRes.fst;
        var newState = newC.fst;
        var newWorld = newC.snd;
        var args = argsEvalRes.snd;

        case body of
          External -> 
            var evalRes = evalBuiltin (funName, args, newWorld);
            var res = evalRes.fst;
            var finalWorld = evalRes.snd;
            var newC = [newState, finalWorld];
            [newC, res]
        | _ ->
            var functionState = enterFunction (newState).addArgs (argNames, args);
            var functionC = [functionState, newWorld];
            var evalRes = eval (functionC, body);
            var afterFunctionC = evalRes.fst;
            var functionRes = evalRes.snd;
            var afterFunctionState = afterFunctionC.fst;
            var afterFunctionWorld = afterFunctionC.snd;

            var finalState = leaveFunction (state, getGlobal (afterFunctionState));
            var finalC = [finalState, afterFunctionWorld];
            [finalC, functionRes]
        esac
      esac
  | Ignore (expr) ->
      var evalRes = eval (c, expr);
      var newC = evalRes.fst;
      [newC, Void]
  | String (value) -> [c, value]
  | Sexp (name, elemExprs) -> case evalList (c, elemExprs) of [newC, elems] ->
      var curArr = listArray (elems);
      var res = Sexp (name, curArr);
      [newC, res]
    esac
  | Array (elemExprs) -> case evalList (c, elemExprs) of [newC, elems] ->
      var curArr = listArray (elems); 
      [newC, curArr]
    esac
  | Elem (arrExpr, idxExpr) -> case evalList (c, {arrExpr, idxExpr}) of [newC, {arrHolder, idx}] ->
      var arr = getArr (arrHolder);
      [newC, arr[idx]]
    esac
  | ElemRef (arrExpr, idxExpr) -> case evalList (c, {arrExpr, idxExpr}) of [newC, {arrHolder, idx}] ->
      var arr = getArr (arrHolder);
      [newC, ElemRef (arr, idx)]
    esac
  | Case (varName, patternsExprs) -> 
      var state = c.fst;
      var scrutinee = case lookup (state, varName) of Var (v) -> v esac;
      var resExpr = executeMatch (scrutinee, patternsExprs);
      eval (c, resExpr)
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [[_, w], Void] -> getOutput (w)
  | _ -> failure ("The whole program must return Void")
  esac
}
