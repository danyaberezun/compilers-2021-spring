-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Assn    (expr1, expr2)       -> assn (c, expr1, expr2)
  | Seq     (expr1, expr2)       -> seq (c, expr1, expr2)
  | Skip                         -> [c, Void]
  | Read    (x)                  -> read (c, x)
  | Write   (expr)               -> write (c, expr)
  | If      (cond, expr1, expr2) -> evalIf (c, cond, expr1, expr2)
  | While   (cond, innerExpr)    -> evalWhile (c, expr, innerExpr, cond)
  | DoWhile (expr, cond)         -> eval (eval (c, expr)[0], While (cond, expr))
  | Var     (x)                  -> [c, st (x)]
  | Ref     (x)                  -> [c, x]
  | Const   (i)                  -> [c, i]
  | Binop   (op, expr1, expr2)   -> binop (c, op, expr1, expr2)
  | Ignore  (expr)               -> [eval (c, expr)[0], Void]
  esac
}

fun binop (c, op, expr1, expr2) {
  case evalList (c, {expr1, expr2}) of
    [c, {expr1, expr2}] -> [c, evalOp (op, expr1, expr2)]
  esac
}

fun evalIf (c, cond, expr1, expr2) {
  case eval (c, cond) of
    [c, cond] ->
      if cond == 0
      then eval (c, expr2)
      else eval (c, expr1)
      fi
  esac
}

fun evalWhile (c@[st, w], expr, innerExpr, cond) {
  case eval (c, cond) of
    [c, cond] ->
      if cond == 0
      then [c, Void]
      else eval (eval (c, innerExpr)[0], expr)
      fi
  esac
}

fun assn (c, expr1, expr2) {
  case evalList (c, {expr1, expr2}) of
    [c@[st, w], {expr1, expr2}] -> [[st <- [expr1, expr2], w], expr2]
  esac
}

fun seq (c, expr1, expr2) {
  case evalList (c, {expr1, expr2}) of
    [c, {expr1, expr2}] -> [c, expr2]
  esac
}

fun read (c@[st, w], x) {
  case readWorld (w) of
    [n, w] -> [[st <- [x, n], w], Void]
  esac
}

fun write (c@[st, w], expr) {
  [[st, writeWorld (eval (c, expr)[1], w)], Void]
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
