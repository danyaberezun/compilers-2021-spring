-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- An auxiliary function to perform arbitrary binary operation in LaMa
public fun binOp (op, lExpr, rExpr) {
  case op of
    "+"  -> lExpr + rExpr
  | "-"  -> lExpr - rExpr
  | "*"  -> lExpr * rExpr
  | "/"  -> lExpr / rExpr
  | "%"  -> lExpr % rExpr
  | "<"  -> lExpr < rExpr
  | ">"  -> lExpr > rExpr
  | "<=" -> lExpr <= rExpr
  | ">=" -> lExpr >= rExpr
  | "==" -> lExpr == rExpr
  | "!=" -> lExpr != rExpr
  | "&&" -> lExpr && rExpr
  | "!!" -> lExpr !! rExpr
  esac
}

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        Repeat  (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, vl] -> [c, vl : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

var match = fun (pat, e) {
    case [pat, e] of
      [Wildcard, _] -> 1
    | [Named (_, pat), e] -> match (pat, e)
    | [Decimal (d), e] -> compare (d, e) == 0
    | [Sexp (s1, args1), Sexp (s2, args2)] ->
        if compare (s1, s2) == 0
        then matchList (args1, arrayList (args2))
        else 0
        fi
    | [Const (vr), e] -> vr == e
    | [Array (args1), args2] -> matchList (args1, arrayList (args2))
    | _ -> 0
    esac
};

var matchList = fun (pat, e) {
  case [pat, e] of [pat : pt, e : et] -> 
    if match (pat, e)
    then matchList (pt, et)
    else 0
    fi
  | [{}, {}] -> 1
  | _ -> 0
  esac
};

var evalCases = fun (c, cases, e) {
  case cases of [pat, cs] : cases -> 
    if match (pat, e) 
    then eval (c, cs)
    else evalCases (c, cases, e)
    fi
  esac
};

fun eval (c@[st, w], expr) {
  case expr of
    Assn (lExpr, rExpr) ->
      case evalList (c, {lExpr, rExpr}) of [c@[st, w], {Ref (lExpr), rExpr}] -> 
        [[st <- [lExpr, Val (rExpr)], w], rExpr]
      | [c, {ElemRef (x, i), rExpr}] -> x[i] := rExpr; [c, rExpr]
      esac
  | Seq  (lExpr, rExpr) -> case evalList (c, {lExpr, rExpr}) of [c, {v1, v2}] -> [c, v2] esac
  | Skip -> [c, Void]
  | Read  (vr) -> case readWorld (w) of [x, w0] -> [[st <- [eval (c, vr).snd, x], w0], Void] esac
  | Write (e)  -> case eval (c, e) of [[st, w], e] -> [[st, writeWorld (e, w)], Void] esac
  | If (expr1, expr2, expr3) ->
      case eval (c, expr1) of
        [c, v] -> if (v != 0) then eval (c, expr2) else eval (c, expr3) fi 
      esac
  | While (exp, st) ->
      case eval (c, exp) of
        [c, v] -> if (v != 0) then eval (eval (c, st).fst, expr) else [c, Void] fi
      esac
  | DoWhile (body, cond) -> 
      case eval (eval (c, body).fst, cond) of
        [c, 0] -> [c, Bottom] |
        [c, _] -> eval (c, expr)
      esac 
  | Var   (x) -> [c, case lookupVal (st, x) of Val (v) -> v esac]
  | Ref   (x) -> [c, Ref (x)]
  | Const (z) -> [c, z]
  | Binop (op, lExpr, rExpr) -> 
      case evalList (c, {lExpr, rExpr}) of
        [c@[st, w], {l1Expr, r1Expr}] -> [c, binOp (op, l1Expr, r1Expr)]
      esac
  | Scope (defs, expr) -> 
      if size (defs) == 0 then eval (c, expr)
      else
        st := enterScope (st);
        while size (defs) > 0 do
          st := case defs.fst of
            Var (defs) -> addNames (st, defs)
          | Val (defs) -> addNames (st, defs)
          | Fun (name, args, body) -> addFunction (st, name, args, body)
          esac;
          defs := defs.tl
        od;
        case eval ([st, w], expr) of
          [[st, w], v] -> [[leaveScope (st), w], v]
        esac
      fi
  | Sexp (s, list) -> 
      case evalList (c, list) of
        [c, list] -> [c, Sexp (s, listArray (list))]
      esac
  | Call (name, args) -> 
      case lookupFun (st, name) of Fun (as, body) ->
        var prevSt = st;
        case evalList (c, args) of [[st, w], vals] ->
          case body of
            External -> case evalBuiltin (name, vals, w) of [n, w] -> [[st, w], n] esac
          | _ -> 
            st := enterFunction (st);
            while size (as) > 0 do
              st := addName (st, as.fst, Val (vals.fst));
              as := as.tl;
              vals := vals.tl
            od;
            case eval ([st, w], body) of [[st, w], ret] ->
              st := leaveFunction (prevSt, getGlobal (st));
              [[st, w], ret]
            esac
          esac
        esac
      esac
  | Case (e, cases) -> 
      case eval (c, e) of
        [c, v] -> evalCases (c, cases, v)
      esac
  | Ignore (e) -> [eval (c, e).fst, Void]
  | String (st) -> [c, st]
  | Elem (arr, ind) -> 
      case evalList (c, {arr, ind}) of
        [c, {arr, ind}] -> 
        case arr of
          Sexp (s, arr) -> [c, arr[ind]]
        | _ -> [c, arr[ind]]
        esac
      esac
  | ElemRef (arr, ind) -> 
      case evalList (c, {arr, ind}) of
        [c, {arr, ind}] -> 
        case arr of
          Sexp (s, arr) -> [c, ElemRef (arr, ind)]
        | _ -> [c, ElemRef (arr, ind)]
        esac
      esac
  | Array (list) -> 
      case evalList (c, list) of
        [c, list] -> [c, listArray (list)]
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({},    External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
