-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- An auxiliary function to perform arbitrary binary operation in LaMa
public fun binOp (op, lExpr, rExpr) {
  case op of
    "+"  -> lExpr + rExpr
  | "-"  -> lExpr - rExpr
  | "*"  -> lExpr * rExpr
  | "/"  -> lExpr / rExpr
  | "%"  -> lExpr % rExpr
  | "<"  -> lExpr < rExpr
  | ">"  -> lExpr > rExpr
  | "<=" -> lExpr <= rExpr
  | ">=" -> lExpr >= rExpr
  | "==" -> lExpr == rExpr
  | "!=" -> lExpr != rExpr
  | "&&" -> lExpr && rExpr
  | "!!" -> lExpr !! rExpr
  esac
}

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun initScope(s, d) {
  while size(d) > 0 do
    s := case d.fst of 
           Var (x) -> addNames (s, x)
         | Fun (f, args, body) -> addFunction (s, f, args, body)
         esac;
    d := d.tl
  od;
  s
}

fun initFunArgs (s, argsNames, args) {
  while size(args) > 0 do
    s := addName(s, argsNames.fst, args.fst);
    argsNames := argsNames.tl;
    args := args.tl
  od;
  s
}

fun eval (c@[st, w], expr) {
  case expr of
    Assn (lExpr, rExpr) ->
      case evalList (c, {lExpr, rExpr}) of [c@[st, w], {lExpr, rExpr}] -> 
        case lExpr of
          {x, i} -> x[i] := rExpr; [c, rExpr]
        | _ ->  [[st <- [lExpr, rExpr], w], rExpr]
        esac
      esac
  | Seq  (lExpr, rExpr) -> case evalList (c, {lExpr, rExpr}) of [c, {v1, v2}] -> [c, v2] esac
  | Skip -> [c, Void]
  | Read  (vr) -> case readWorld (w) of [x, w0] -> [[st <- [eval (c, vr).snd, x], w0], Void] esac
  | Write (e)  -> case eval (c, e) of [[st, w], e] -> [[st, writeWorld (e, w)], Void] esac
  | If (expr1, expr2, expr3) ->
      case eval (c, expr1) of
        [c, v] -> if (v != 0) then eval (c, expr2) else eval (c, expr3) fi 
      esac
  | While (exp, st) ->
      case eval (c, exp) of
        [c, v] -> if (v != 0) then eval (eval (c, st).fst, expr) else [c, Void] fi
      esac
  | DoWhile (body, cond) -> 
      case eval (eval (c, body).fst, cond) of
        [c, 0] -> [c, Bottom] |
        [c, _] -> eval (c, expr)
      esac 
  | Var   (x) -> [c, lookup(st, x)]
  | Ref   (x) -> [c, x]
  | Const (z) -> [c, z]
  | Binop (op, lExpr, rExpr) -> 
      case evalList (c, {lExpr, rExpr}) of
        [c@[st, w], {l1Expr, r1Expr}] -> [c, binOp (op, l1Expr, r1Expr)]
      esac
  | Scope (defs, expr) ->
      st := enterScope (st);
      st := initScope (st, defs);
      case eval ([st, w], expr) of
        [[st, w], r] -> [[leaveScope (st), w], r]
      esac
  | Sexp (s, list) -> 
      case evalList (c, list) of
        [c, list] -> [c, listArray (list)]
      esac
  | Call (f, args) ->  
      case lookup (st, f) of Fun (argsNames, expr) ->
        case evalList (c, args) of [[st, w], args] ->
          case initFunArgs (enterFunction (st), argsNames, args) of st ->
            case expr of External -> 
              case evalBuiltin (f, args, w) of 
                [x, w] -> [[leaveFunction (c.fst, getGlobal (st)), w], x]
              esac
          | _ ->    
          case eval ([st, w], expr) of 
            [[st, w], r] -> [[leaveFunction (c.fst, getGlobal (st)), w], r]
          esac
        esac
      esac
    esac
  esac
  | Ignore (e) -> [eval (c, e).fst, Void]
  | String (x) -> [c, x]
  | Elem (expr1, expr2) ->
      case evalList (c, {expr1, expr2}) of
        [c, {expr1, expr2}] -> [c, expr1[expr2]]
      esac
  | ElemRef (expr1, expr2) -> evalList (c, {expr1, expr2})
  | Array (list) -> 
      case evalList (c, list) of
        [c, list] -> [c, listArray (list)]
      esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({},    External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
