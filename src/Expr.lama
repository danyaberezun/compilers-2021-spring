-- Expression evaluator
-- Alhasan Alkhaddour M4138c
import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun initScopeElements(st, d){
  while size(d) > 0 do
    st := case d[0] of 
           Var (v) -> addNames (st, v)
         | Fun (f, args, body) -> addFunction (st, f, args, body)
         esac;
    d := d.tl
  od;
  st
}

fun regArgs (st, argsNames, args){
  while size(args) > 0 do
    st := addName(st, argsNames[0], args[0]);
    argsNames := argsNames.tl;
    args := args.tl
  od;
  st
}

fun eval (c@[st, w], exprs) {
  case exprs of
      Assn (exp1, exp2) ->
        case evalList (c, {exp1, exp2}) of
          [c@[st,w], {exp1, exp2}] -> [[st <- [exp1, exp2], w], exp2]
        esac 
    | Seq (exp1, exp2) -> 
        case eval(c, exp1) of
          [c, _] -> eval(c, exp2)
        esac 
    | Skip -> [c, Bottom]
    | Read (x) ->
        var res = readWorld(w);
        [[st <- [eval (c, x)[1], res.fst], res.snd], Void]
    | Write (expr) ->
        case eval(c, expr) of
        [[st, w], v] ->
          [[st, writeWorld(v, w)], Bottom]
        esac 
    | If (cond, thenStmt, elseStmt) ->
        case eval(c, cond) of
            [c, 0] -> eval(c, elseStmt) 
          | [c, _] -> eval(c, thenStmt)
        esac 
    | While (cond, stmt) ->
        case eval(c, cond) of 
            [c, 0] -> [c, Bottom] 
          | _ -> eval(eval(c, stmt)[0], exprs)
        esac 
    | DoWhile (stmt, cond) ->
          case eval(eval(c, stmt)[0], cond) of
            [c, 0] -> [c, Bottom] 
          | [c, _] -> eval(c, exprs)
          esac 
    | Var (v) -> [c, lookup(st, v)]
    | Ref (x) -> [c, x]
    | Const (n) -> [c, n]
    | Binop (op, exp1, exp2) ->
      case evalList(c, {exp1, exp2}) of 
        [c, {l, r}] -> [c, evalOp(op, l, r)]
      esac  
    | Ignore (exprs) -> [eval(c, exprs)[0], Bottom]
    | Scope (defs, exprs) ->
        st := enterScope (st);
        st := initScopeElements (st, defs);
        case eval ([st,w], exprs) of
          [[st,w], r] -> [[leaveScope (st), w], r]
        esac
    | Call (f, args) ->  
        case lookup (st, f) of Fun (argsNames, exprs) ->
          case evalList (c, args) of [[st, w], args] ->
            case regArgs(enterFunction (st), argsNames, args) of st ->
              case eval ([st, w], exprs) of 
                [[st,w], r] -> [ [leaveFunction(c[0], getGlobal(st)), w], r]
              esac
            esac
          esac
        esac
    esac
  }

  -- Evaluates a program with a given input and returns an output
  public fun evalExpr (input, expr) {
    case eval ([emptyState (), createWorld (input)], expr) of
      [c, _] -> c.snd.getOutput
  esac
}