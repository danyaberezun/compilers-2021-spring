-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (x) -> st (x)
  | Const (i) -> i
  | Binop (op, expr1, expr2) -> applyBinop (op, evalExpr (st, expr1), evalExpr (st, expr2)) 
  esac
}

public fun applyBinop (op, x1, x2) {
  case op of
    "*"  -> x1 * x2
  | "/"  -> x1 / x2
  | "%"  -> x1 % x2
  | "+"  -> x1  + x2
  | "-"  -> x1 - x2
  | "==" -> x1 == x2
  | "!=" -> x1 != x2
  | "<=" -> x1 <= x2
  | "<"  -> x1 < x2
  | ">=" -> x1 >= x2
  | ">"  -> x1 > x2
  | "!!" -> x1 !! x2
  | "&&" -> x1 && x2
  esac
}
