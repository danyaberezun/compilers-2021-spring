-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (expr)               |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of 
    Const (v) -> [c, v]
  | Var (x) -> [c, st (x)]
  | Ref (x) -> [c, Ref (x)]
  | Skip -> [c, Void]
  | Read (e) -> 
    case eval (c, e) of [c1@[st1, w1], Ref (varName)] ->
    case readWorld (w1) of [varValue, w2] ->
      [[st1 <- [varName, varValue], w2], Void]
    esac
    esac
  | Write (e) -> 
    case eval (c, e) of [[st1, w1], v] ->
      [[st1, writeWorld (v, w1)], Void]
    esac
  | Ignore (e) -> [eval(c, e)[0], Void]
  | Seq (e1, e2) -> case eval (c, e1) of
                      [c1, Void] -> eval (c1, e2)
                    esac
  | Binop (op, l, r) -> 
    case eval (c, l) of [c1, lRes] -> 
    case eval (c1, r) of [c2, rRes] -> 
      [c2, evalOp (op, lRes, rRes)]
    esac esac
  | Assn (e1, e2) -> 
    case eval (c, e1) of [c1, Ref (x)] -> 
    case eval (c1, e2) of [c2@[st2, w2], value] ->
      [[st2 <- [x, value], w2], value]
    esac esac
  | If (cond, trueExpr, falseExpr) -> 
    case eval (c, cond) of
      [c1, 0] -> eval (c1, falseExpr)
    | [c1, _] -> eval (c1, trueExpr)
    esac
  | While (cond, body) ->
    case eval (c, cond) of
      [c1, 0]   -> [c1, Void]
    | [c1, _]  -> case eval (c1, body) of [c2, Void] ->
                    eval (c2, While (cond, body))
                  esac
    esac
  | DoWhile (body, cond) -> 
    case eval (c, body) of
     [c1, Void] -> eval (c1, While (cond, body))
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, Void] -> c.snd.getOutput
  esac
}
