-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Sexp    (string, expr list)  |
--        Builtin (string, expr list)  |
--        Case    (name, (pat * expr) list)

-- pat = Sexp (uid, [pat])
--       Array ([pat])
--       Named (name, pat)
--       Wild
--       N (n)
--       StrLit (s)
--       ArrPat
--       SexpPat
--       ValPat

-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVar (state, name) {
  case state.lookup (name) of
    Var (x) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

fun addNameInit (state, names, values) {
  foldl (fun (s, [name, v]) {
    addName (s, name, Var (v))
  }, state, zip (names, values))
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
fun matchBinop (s) {
  case s of
    "+" -> infix +
  | "-" -> infix -
  | "*" -> infix *
  | "/" -> infix /
  | "%" -> infix %
  | "<" -> infix <
  | ">" -> infix >
  | "<=" -> infix <=
  | ">=" -> infix >=
  | "==" -> infix ==
  | "!=" -> infix !=
  | "&&" -> infix &&
  | "!!" -> infix !!
  esac
}


var bottom = 0;

fun void (cfg) { [cfg, bottom] }

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, vl] -> [c, vl : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun enterScopeWithDefs (state, defs) {
  foldl (fun (state, def) {
      case def of
        Var (names)            -> addNames (state, names)
      | Fun (name, args, body) -> addFunction (state, name, args, body)
      esac
    }, enterScope (state), defs)
}

fun eval (cfg@[state, world], expr) {
  case expr of
    Var (x) -> [cfg, lookupVar (state, x)]
  | Ref (x) -> [cfg, Ref (x)]
  | Const (v) -> [cfg, v]
  | Binop (s, e1, e2) -> 
    case evalList (cfg, {e1, e2}) of
      [cfg, {v1, v2}] -> [cfg, matchBinop (s) (v1, v2)]
    esac
  | Skip -> void (cfg)
  | Assn (ref, e) ->
    case evalList (cfg, {ref, e}) of 
      [cfg@[state, world], {Ref (x), v}] -> 
        lookupVar (state, x); -- check
        [[state <- [x, Var (v)], world], v]
    | [cfg, {ElemRef (arr, ix), v}] ->
        arr[ix] := v;
        [cfg, v]
    esac
  | Seq (e1, e2) -> 
    case evalList (cfg, {e1, e2}) of
      [cfg, {v1, v2}] -> [cfg, v2]
    esac
  | If (cond, e1, e2) ->
    case eval (cfg, cond) of
      [cfg@[state, world], 0] -> eval (cfg, e2)
    | [cfg@[state, world], _] -> eval (cfg, e1)
    esac
  | While (cond, e) -> (
      fun rec (cfg) {
        case eval (cfg, cond) of
          [cfg, 0] -> cfg
        | [cfg, _] ->
          case eval (cfg, e) of 
            [cfg, _] -> rec (cfg)
          esac
        esac
      }
      void (rec (cfg))
    )
  | DoWhile (e, cond) -> (
      fun rec (cfg) {
        case eval (cfg, e) of
          [cfg, _] -> 
          case eval (cfg, cond) of
            [cfg, 0] -> cfg
          | [cfg, _] -> rec (cfg)
          esac
        esac
      }
      void (rec (cfg))
    )
  | Scope ({}, exp)   -> eval (cfg, exp)
  | Scope (defs, exp) ->
    var scopeState = enterScopeWithDefs (state, defs);
    case eval ([scopeState, world], exp) of
      [[state, world], v] -> [[leaveScope (state), world], v]
    esac
  | Call (name, args) -> 
    case evalList (cfg, args) of
      [[state, world], vs] -> 
    case lookupFun (state, name) of
      Fun (argNames, External) -> 
        case evalBuiltin (name, vs, world) of
          [r, world] -> [[state, world], r]
        esac
    | Fun (argNames, body) -> 
        var funState = addNameInit (enterFunction (state), argNames, vs);
        case eval ([funState, world], body) of
          [[funState, world], v] -> 
            var funGlobalScope = getGlobal (funState);
            var resultState = leaveFunction (state, funGlobalScope);
            [[resultState, world], v]
        esac
    esac esac
  | Ignore (e) ->
    case eval (cfg, e) of
      [cfg, _] -> void (cfg)
    esac
  | String (s) -> [cfg, s]
  | Array (es) -> 
    case evalList (cfg, es) of
      [cfg, vs] -> [cfg, listArray (vs)]
    esac
  | Elem (e, eIx) ->
    case evalList (cfg, {e, eIx}) of
      [cfg, {Sexp (_, args), vIx}] -> [cfg, args [vIx]]
    | [cfg, {arr           , vIx}] -> [cfg, arr  [vIx]]
    esac
  | ElemRef (eArr, eIx) ->
    case evalList (cfg, {eArr, eIx}) of
      [cfg, {vArr, vIx}] -> [cfg, ElemRef (vArr, vIx)]
    esac
  | Sexp (name, es) ->
    case evalList (cfg, es) of
      [cfg, vs] -> [cfg, Sexp (name, listArray (vs))] 
    esac
  | Case (name, brs) ->
    fun checkPats (ps, vs) {
      var vs_ = case vs of #array -> arrayList (vs) 
                          | _     -> vs esac;
      foldl (fun (acc, [p, v]) { 
        if acc == 0 then 0
        else checkPat (p, v) fi
      }, true, zip (ps, vs_))
    }

    fun checkPat (pat, v) {
      case [pat, v] of
        [ValPat, #val]         -> true 
      | [ArrPat, #array]       -> true
      | [SexpPat, Sexp (_, _)] -> true
      | [Wild, _]              -> true
      | [N (n), v]      -> compare (n, v) == 0
      | [StrLit (s), v] -> compare (s, v) == 0
      | [Sexp (uid, ps), Sexp (name, args)] -> 
        if compare (uid, name) != 0 then false
        elif compare (size (ps), length (args)) != 0 then false
        else checkPats (ps, args) fi
      | [Array (ps), vs@#array] -> 
        if compare (size (ps), length (vs)) == 0 then false 
        else checkPats (ps, vs) fi
      | [Named (_, pat), v]     -> checkPat (pat, v)
      esac
    }

    var v = lookupVar (state, name);
    case foldl (fun (acc, [pat, e]) {
        if checkPat (pat, v)
        then Some (eval (cfg, e))
        else acc fi
    }, None, brs) of
      Some ([cfg, r]) -> [cfg, r]
    | None -> failure ("match failure at TODO")
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
