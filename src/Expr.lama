-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  -- foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)

  while size(names) > 0 do
    state := addName(state, names.hd, Var(0));
    names := names.tl
  od; state
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  -- case foldl (fun ([c, vals], e) {
  --               case eval (c, e) of
  --                 [c, v] -> [c, v : vals]
  --               esac
  --             },
  --             [c, {}],
  --             exprs) of
  --   [c, vals] -> [c, reverse (vals)]
  -- esac

  var vals = {};
  while size(exprs) > 0 do
    case eval(c, exprs.hd) of 
      [newC, v] -> c := newC; vals := v : vals
    esac;
    exprs := exprs.tl
  od; [c, reverse(vals)]
}

fun processDeclarations(state, decls) {
  -- foldl (fun (state, decl) {  
  --   case decl of
  --     Var (variables) -> addNames(state, variables) |
  --     Fun (name, args, body) -> addFunction(state, name, args, body) |
  --     _ -> failure ("Unknown declaration '" ++ string(decl) ++ "' appeared at evaluation\n")
  --   esac
  -- }, state, decls)

  while size(decls) > 0 do
    state := case decls.hd of 
      Var (variables) -> addNames(state, variables) |
      Fun (name, args, body) -> addFunction(state, name, args, body) 
    esac;
    decls := decls.tl
  od; state
}

fun eval (configuration@[state, world], expression) {
  -- printf("evalexpr %s\n", expression.string);

  case expression of
    Const (value) ->
      [configuration, value] |
    Var (variableName) -> 
      [configuration, lookup(state, variableName)] |
    Ref (x) ->
      [configuration, Ref(x)] |
    Binop (operation, subexpression1, subexpression2) ->
      case evalList(configuration, {subexpression1, subexpression2}) of 
        [configuration, {lhs, rhs}] ->
          [configuration, evalOp(operation, lhs, rhs)]
      esac |
    Assn (subexpression1, subexpression2) -> 
      case evalList(configuration, {subexpression1, subexpression2}) of
        [[state, world], {Ref(varName), value}] ->
          [[state <- [varName, value], world], value]
      esac |
    Seq (subexpression1, subexpression2) -> 
      case eval(configuration, subexpression1) of
        [configuration, _] ->
          eval(configuration, subexpression2)
      esac |
    Read (variableName) -> 
      var result = readWorld(world);
      [[(state <- [variableName, result.fst]), result.snd], Bottom] |
    Write (subexpression) ->
      case eval(configuration, subexpression) of
        [[state, world], value] ->
          -- printf("%d\n", value);
          [[state, writeWorld(value, world)], Bottom]
      esac |
    If (condition, consequentBody, alternativeBody) ->
      case eval(configuration, condition) of
        [configuration, 0] -> eval(configuration, alternativeBody) |
        [configuration, _] -> eval(configuration, consequentBody)
      esac |
    While (condition, body) ->
      case eval(configuration, condition) of 
        [configuration, 0] -> [configuration, Bottom] |
        _ ->
          eval(eval(configuration, body)[0], expression)
      esac |
    DoWhile (body, condition) ->
      case eval(eval(configuration, body)[0], condition) of
        [configuration, 0] -> [configuration, Bottom] |
        [configuration, _] -> eval(configuration, expression)
      esac |
    Scope(defs, expr) ->
      state := enterScope(state);
      state := processDeclarations(state, defs);
      case eval([state, world], expr) of
        [[state, world], returnValue] ->
          [[leaveScope(state), world], returnValue]
      esac |
    Call(name, argExprs) ->
      -- checkFun(state, name); -- Increases memory requirements by some extent
      case lookup(state, name) of Fun(argNames, body) ->
        var previousState = state;
        state := case evalList(configuration, argExprs) of [[state, world], argValues] ->
          -- printf("%s\n", argValues.string);
          state := enterFunction(state);
          -- foldl(fun(state, [argName, argValue]) {
          --   addName(state, argName, argValue)
          -- }, state, zip(argNames, argValues)) -- A bit greater memory usage in comparison to the while code
          while size(argNames) > 0 do
            state := addName(state, argNames.hd, argValues.hd);
            argNames := argNames.tl;
            argValues := argValues.tl
          od; state
        esac;

        case eval([state, world], body) of [[state, world], ret] ->
          -- Add new global state into previous state
          state := leaveFunction(previousState, getGlobal(state));
          -- printf("-%s\n", argValues.string);
          [[state, world], ret]
        esac

      esac |
    Ignore (subexpression) ->
      [eval(configuration, subexpression)[0], Bottom] |
    Skip ->
      [configuration, Bottom] |
    _ ->
      failure ("Unknown expression '" ++ string(expression) ++ "' appeared at evaluation\n")
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
