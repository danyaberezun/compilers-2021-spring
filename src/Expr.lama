-- Expression evaluator

import List;
import State;


public fun applyBinaryOp (stringifiedOp, v1, v2) {
  case stringifiedOp of
    "+"  -> v1 +  v2 |
    "-"  -> v1 -  v2 |
    "*"  -> v1 *  v2 |
    "/"  -> v1 /  v2 |
    "%"  -> v1 %  v2 |
    "==" -> v1 == v2 |
    "!=" -> v1 != v2 |
    "<"  -> v1 <  v2 |
    "<=" -> v1 <= v2 |
    ">"  -> v1 >  v2 |
    ">=" -> v1 >= v2 |
    "&&" -> v1 && v2 |
    "!!" -> v1 !! v2 |
    _ -> failure("Unknown binary operation '" ++ string(stringifiedOp) ++ "'\n")
  esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (state, expression) {
  -- printf("expr %s\n", string(expression));
  case expression of 
    Var (variableName) -> 
      -- printf("Var %s\n", variableName);
      state(variableName) |
    Const (value) ->
      -- printf("Const %s\n", value.string);
      value |
    Binop (operation, expression1, expression2) ->
      -- printf("Binop %s\n   %s\n   %s\n", operation, expression1.string, expression2.string);
      applyBinaryOp(operation, evalExpr(state, expression1), evalExpr(state, expression2)) |
    _ ->
      failure("Unknown expression '" ++ string(expression) ++ "'\n")
  esac
}
