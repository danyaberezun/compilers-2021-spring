-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVar (state, name) {
  case state.lookup (name) of
    Var (n) -> n
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    Fun (a, b) -> Fun (a, b)
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {
    case name of
      Func (name, args, body) -> s.addFunction (name, args, body)
    | _                       -> s.addName (name, Var (0))
    esac
  }, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, vl] -> [c, vl : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Var     (n)                  -> [c, lookupVar (s, n)]
  | Ref     (n)                  -> [c, n]
  | Const   (n)                  -> [c, n]
  | Imm     (n)                  -> [c, n]
  | Skip                         -> [c, Void]
  | String (s)                   -> [c, s]
  | Array (a)                    -> case evalList (c, a) of [c, a] -> [c, listArray (a)] esac
  | Ignore  (body)               -> case eval (c, body) of [c@[s, w], v0] ->
                                      [c, Void]
                                    esac
  | Binop   (opcode, e0, e1)     -> case eval (c, e0) of [c@[s, w], v0] -> 
                                    case eval (c, e1) of [c@[s, w], v1] -> 
                                      [c, evalOp (opcode, v0, v1)]
                                    esac esac
  | Assn    (to, from)           -> case eval (c,   to) of [c@[s, w], v0] ->
                                    case eval (c, from) of [c@[s, w], v1] ->
                                    case v0 of
                                      ElemRef (a, i) -> a[i] := v1; [c, v1]
                                    | _ -> [[s <- [v0, Var (v1)], w], v1]
                                    esac esac esac
  | Seq     (body0, body1)       -> case eval (c, body0) of [c@[s, w], Void] -> 
                                      eval (c, body1)
                                    esac
  | If      (cond, body0, body1) -> case eval (c, cond) of 
                                      [c, 0] -> eval (c, body1)
                                    | [c, _] -> eval (c, body0)
                                    esac
  | While   (cond, body)         -> case eval (c, cond) of 
                                      [c, 0] -> [c, Void]
                                    | [c, n] -> eval (c, Seq (body, expr))
                                    esac
  | DoWhile (body, cond)         -> eval (c, Seq (body, While (cond, body)))
  | Elem (a, i)                  -> case eval (c, a) of [c, a] ->
                                    case eval (c, i) of [c, i] ->
                                      [c, a[i]]
                                    esac esac 
  | ElemR (a, i)                 -> case eval (c, a) of [c, a] ->
                                    case eval (c, i) of [c, i] ->
                                      [c, ElemRef (a, i)]
                                    esac esac
  | Builtin ("read", 0)          -> case readWorld (w) of [n, w] -> [[s, w], n] esac
  | Builtin ("length", expr)     -> case eval (c, expr [0]) of [c, arg] -> [c, length (arg)] esac
  | Builtin ("write", expr)      -> case eval (c, expr [0]) of [c@[s, w], arg] ->
                                    case writeWorld (arg, w) of w -> 
                                      [[s, w], Void] 
                                    esac esac
  | Call    (f, args, t)         -> case evalList (c, args) of [c@[s, w], args] ->
                                    case lookupFun (s, f) of
                                      Fun (varargs, External) -> 
                                      case evalBuiltin (f, args, w) of [v, w] -> [[s, w], v] esac
                                    | Fun (varargs, body) ->
                                      var f = fun (c@[s, w]) {
                                                  case enterFunction (s) of s ->
                                                  case foldl (fun (s, [r, v]) {addName (s, r, Var (v))}, s, zip (varargs, args)) of s ->
                                                  case eval ([s, w], body) of [c@[s, w], v] ->
                                                  case leaveFunction (s) of s ->
                                                  case v of
                                                    Chained (f) -> f ([s, w])
                                                  | _           -> [[s, w], v] 
                                                | _           -> [[s, w], v] 
                                                  | _           -> [[s, w], v] 
                                                  esac esac esac esac esac
                                                };
                                      case t of
                                        Tail -> [[s, w], Chained (f)]
                                      | _    -> f ([s, w])
                                      esac 
                                    esac esac
  | Scope   (defs, exp)          -> if size (defs) then
                                      case enterScope (s) of s ->
                                      case addNames (s, defs) of s ->
                                      case eval ([s, w], exp) of [c@[s, w], v] ->
                                        [[leaveScope (s), w], v]
                                      esac esac esac
                                    else eval ([s, w], exp) fi
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case emptyState () of s ->
  case addFunction (s, "read", {}, External) of s ->
  case addFunction (s, "write", {"a"}, External) of s ->
  case addFunction (s, "length", {"a"}, External) of s ->
  case eval ([s, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac esac esac esac esac
}
