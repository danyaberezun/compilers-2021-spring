-- Expression evaluator

import List;
import State;

public fun evalBinop(op, a, b) {
	case op of
		"+" -> a + b
	|	"-" -> a - b
	|	"/" -> a / b
	|	"*" -> a * b
	|	"%" -> a % b
	|	"&&" -> a && b
	|	"!!" -> a !! b
	|	"==" -> a == b
	|	"!=" -> a != b
	|	">=" -> a >= b
	|	">" -> a > b
	|	"<" -> a < b
	|	"<=" -> a <= b
	esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)
public fun evalExpr (st, expr) {
  case expr of
		Var (s) -> st (s)
	|	Const (x) -> x
	|	Binop (op, a, b) -> (
			var aRes = evalExpr (st, a);
			var bRes = evalExpr (st, b);
			evalBinop (op, aRes, bRes)
		)
	esac
}