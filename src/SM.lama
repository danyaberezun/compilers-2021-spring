-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, world], insns) {
  case insns of
    {} -> c
  | i : insnsTail -> 
      var newConfiguration = 
        case i of
          READ      -> case readWorld(world) of [n, w] -> [n:stack, state, w] esac
        | WRITE     -> case stack of n:tail  -> [tail, state, writeWorld(n, world)] esac
        | BINOP (s) -> 
            case stack of 
              y:x:tail  -> [evalExpr(state, Binop(s, Const(x), Const(y))):tail, state, world]
            esac
        | LD    (x) -> [state(x):stack, state, world]
        | ST    (x) -> case stack of n:tail  -> [tail, state <- [x, n], world] esac
        | CONST (n) -> [n:stack, state, world]
        esac;
      eval(newConfiguration, insnsTail)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  var output = emptyBuffer();
  case expr of
    Var (x) -> output := output <+ LD (x)
  | Const (value) -> output := output <+ CONST (value)
  | Binop (op, left, right) -> 
      output := output <+> compileExpr(left); 
      output := output <+> compileExpr(right);  
      output := output <+ BINOP (op)
  esac;
  output
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  var output = emptyBuffer();
  case stmt of
    Skip -> skip
  | Assn (x, expr) -> output := output <+> compileExpr(expr); output := output <+ ST (x)
  | Seq (stm1, stm2) -> output := output <+> listBuffer(compileSM(stm1)); output := output <+> listBuffer(compileSM(stm2))
  | Read (x) -> output := output <+ READ; output := output <+ ST (x)
  | Write (expr) -> output := output <+> compileExpr(expr); output := output <+ WRITE
  esac;
  getBuffer(output)
}
