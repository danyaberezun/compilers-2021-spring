-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl(fun ([stack, state, world], insn) { 
    case insn of
      READ -> case readWorld (world) of [n, w] -> [n:stack, state, w] esac
    | WRITE -> case stack of
        {} -> failure ("stack is empty")
      | head:tail -> [tail, state, writeWorld (head, world)]
      esac
    | BINOP (s) -> case stack of
        r:l:rest -> [(binop (s, l, r)):rest, state, world]
      | _ -> failure ("stack is empty")
      esac
    | LD (x) -> [state (x):stack, state, world]
    | ST (x) -> case stack of
        {} -> failure ("stack is empty")
      | head:tail -> [tail, state <- [x, head], world]
      esac
    | CONST (n) -> [n:stack, state, world]
    esac
  }, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (s) -> {LD (s)}
  | Const (n) -> {CONST (n)}
  | Binop (s, l, r) -> compileExpr (l) +++ compileExpr (r) +++ {BINOP (s)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (st, expr) -> compileExpr (expr) +++ {ST (st)}
  | Read (st) -> {READ, ST (st)}
  | Write (expr) -> compileExpr (expr) +++ {WRITE}
  | Skip -> []
  | Seq (stmt0, stmt1) -> compileSM (stmt0) +++ compileSM (stmt1)
  esac
}
