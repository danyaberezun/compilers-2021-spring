-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl(processInsn, c, insns.getBuffer)
}

fun processInsn ([stack, state, world], insn) {
  case insn of
      READ           -> (
        var readResult = readWorld (world);
        [readResult.fst:stack, state, readResult.snd]
      )
    | CONST (n)      -> [n:stack, state, world]
    | BINOP (op)     -> binop_helper (op, stack, state, world)
    | LD (x)         -> [state (x):stack, state, world]
    | ST (name)      -> [stack.tl, state <- [name, stack.hd], world]
    | WRITE          -> [stack.tl, state, writeWorld (stack.hd, world)]
  esac
}

fun binop_helper (op, r:l:stack, state, world) {
  [evalBinop (op, l, r):stack, state, world]
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (x)          -> LD (x) . singletonBuffer
    | Const (n)        -> CONST (n) . singletonBuffer
    | Binop (op, l, r) -> l.compileExpr <+> r.compileExpr . addBuffer (BINOP (op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Assn (name, expr)  -> expr.compileExpr . addBuffer (ST (name))
    | Seq (stmt1, stmt2) -> stmt1.compileSM <+> stmt2.compileSM
    | Skip               -> emptyBuffer()
    | Read (name)        -> {READ, ST(name)}.listBuffer
    | Write (e)          -> e.compileExpr . addBuffer (WRITE)
  esac
}
