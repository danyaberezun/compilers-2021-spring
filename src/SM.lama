-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}
public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of
    READ : ins         -> case readWorld (c[2]) of
        [n, w] -> eval(env, [n : c[0], c[1], w], ins)
      esac
  | WRITE : ins        -> case c[0] of
        n : s -> eval (env, [s, c[1], writeWorld (n, c[2])], ins)
      esac
  | BINOP (s) : ins    -> case c[0] of
        y : x : xs -> eval (env, [evalOp (s, x, y) : xs, c[1], c[2]], ins)
      esac
  | LD    (v) : ins    -> case c[1] (v) of
        x -> eval (env, [x : c[0], c[1], c[2]], ins)
      esac
  | ST    (v) : ins    -> case c[0] of
        x : xs -> eval (env, [xs, c[1] <- [v, x], c[2]], ins)
      esac
  | CONST (n) : ins    -> eval (env, [n : c[0], c[1], c[2]], ins)
  | LABEL (l) : ins    -> eval (env, c, ins)
  | JMP   (l) : ins    -> eval (env, c, fromLabel (env, l))
  | CJMP  ("nz", l) : ins -> case c[0] of
                               0 : xs -> eval (env, [xs, c[1], c[2]], ins)
                             | _ : xs -> eval (env, [xs, c[1], c[2]], fromLabel (env, l))  
                             esac
  | CJMP  ("z", l) : ins -> case c[0] of
                              0 : xs -> eval (env, [xs, c[1], c[2]], fromLabel (env, l))
                            | _ : xs -> eval (env, [xs, c[1], c[2]], ins) 
                            esac
  | _ -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  compileExprReq (expr) . getBuffer
}

fun compileExprReq (expr) {
  case expr of
    Var   (v)          -> singletonBuffer (LD (v))
  | Const (n)          -> singletonBuffer (CONST (n))
  | Binop (op, e1, e2) -> compileExprReq (e1) <+> compileExprReq (e2) <+> singletonBuffer (BINOP (op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compileSMReq (env, stmt) {
    case stmt of
      Skip -> [emptyBuffer (), env]
    | Assn  (v, e)   -> [compileExprReq (e) <+ ST (v), env]
    | Seq   (s1, s2) -> case compileSMReq (env, s1) of [b1, env1] -> case compileSMReq (env1, s2) of [b2, env2] -> [b1 <+> b2, env2] esac esac         
    | Read  (v)      -> [listBuffer ({READ, ST (v)}), env]
    | Write (e)      -> [addBuffer (compileExprReq (e), WRITE), env]
    | While (e, s)   -> case genLabels (env, 2) of 
                          [l1, l2, env1] -> case compileSMReq (env1, s) of 
                                              [b, env2] -> [{JMP (l1), LABEL (l2), b . getBuffer, LABEL (l1), compileExpr (e), 
                                              CJMP ("nz", l2)} . deepFlatten . listBuffer, env2]
                                            esac
                        esac
    | If (e, s1, s2) -> 
            case genLabels(env, 2) of [ls2, lexit, env1] ->
              case compileSMReq(env1, s1) of [cs1, env2] ->
                case compileSMReq(env2, s2) of [cs2, env3] ->
                  [{compileExpr(e), CJMP("z", ls2), cs1 . getBuffer, JMP(lexit), LABEL(ls2), cs2 . getBuffer, LABEL(lexit)} .deepFlatten . listBuffer, env3]
                esac
              esac 
            esac
    | DoWhile (s, e)   -> case env . genLabel of 
                          [l, env1] -> case compileSMReq (env1, s) of 
                                              [b, env2] -> [{LABEL (l), b . getBuffer, compileExpr (e), 
                                              CJMP ("nz", l)} . deepFlatten . listBuffer, env2]
                                            esac
                        esac
    esac
  }

  compileSMReq (initCompEnv (), stmt)[0] . getBuffer
}