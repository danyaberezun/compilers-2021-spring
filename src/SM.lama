-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

public fun getStackTop(stack, opName) {
  case stack of
    top:rest -> [top, rest]
    | {} -> failure({"Stack is empty, unexpected ", opName, " operation."}.stringcat)
  esac
}

public fun log (msg) {
  var fileName = "log.txt";
  var file = fopen (fileName, "a");
  fprintf (file, msg);
  fclose (file)
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  var curStack = c[0];
  var curState = c[1];
  var curWorld = c[2];
  case insns of
    instruction : rest -> 
      case instruction of
        READ -> (
          var readRes = readWorld (curWorld);
          var newVarValue = readRes.fst;
          var newWorld = readRes.snd;

          eval (env, [newVarValue : curStack, curState, newWorld], rest)
          )
        | WRITE -> (
          var pair = getStackTop(curStack, "write");
          var newVarValue = pair.fst;
          var newStack = pair.snd;
          
          var newWorld = writeWorld (newVarValue, curWorld);
          eval (env, [newStack, curState, newWorld], rest)
          )  
        | BINOP (s) -> (
          var pair = getStackTop (curStack, "bin");
          var right = pair.fst;
          var pairNew = getStackTop (pair.snd, "bin");
          var left = pairNew.fst;
          var newStack = pairNew.snd;
          
          var newVarValue = getBinop (s) (left, right);
          eval (env, [newVarValue : newStack, curState, curWorld], rest)
          )
        | LD (s) -> eval (env, [curState (s) : curStack, curState, curWorld], rest)
        | ST (s) -> (
          var pair = getStackTop (curStack, "store");
          var newVarValue = pair.fst;
          var newStack = pair.snd;
          
          var newState = curState <- [s, newVarValue];
          eval (env, [newStack, newState, curWorld], rest)
          )
        | CONST (integer) -> eval (env, [integer : curStack, curState, curWorld], rest)
        | LABEL (place) -> eval (env, c, rest)
        | JMP (place) -> eval (env, c, fromLabel(env, place))
        | CJMP (condition, place) -> (
            var pair = getStackTop (curStack, "condition jump");
            var conditionValue = pair.fst,
                newStack = pair.snd;

            var jumped = fromLabel (env, place);
            
            if compare (condition, "z") == 0 && conditionValue != 0 then 
              jumped := rest
            fi;

            if compare (condition, "nz") == 0 && conditionValue == 0 then
              jumped := rest
            fi;

            eval (env, [newStack, curState, curWorld], jumped)
          ) 
        | _ -> failure("No such instruction for stack machine.")
      esac
    | {} -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)
public fun compileExprUsingBuffer (expr) {
  case expr of
    Var (s) -> singletonBuffer (LD (s))
    | Const (integer) -> singletonBuffer (CONST (integer))
    | Binop (s, exprLeft, exprRight) -> compileExprUsingBuffer (exprLeft) <+> compileExprUsingBuffer (exprRight) <+ BINOP (s)
    | _ -> failure("No such expression.")
  esac
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  getBuffer (compileExprUsingBuffer (expr))
}

-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
public fun compileSMUsingBuffer(stmt, env) {
  case stmt of
    Assn (s, expr) -> [compileExprUsingBuffer (expr) <+ ST (s), env]
    | Seq (stmtLeft, stmtRight) -> (
        var left = compileSMUsingBuffer (stmtLeft, env);
        var right = compileSMUsingBuffer (stmtRight, left.snd);
        
        [left.fst <+> right.fst, right.snd]
      )
    | Skip -> [emptyBuffer (), env]
    | Read (s) -> [listBuffer ({READ, ST (s)}), env]
    | Write (expr) -> [compileExprUsingBuffer (expr) <+ WRITE, env]
    | If (condition, ifInner, elseInner) -> (
        var conditionExpr = compileExprUsingBuffer (condition);

        var newLabels = genLabels (env, 2);
        var falseLabel = newLabels[0],
            exitLabel = newLabels[1],
            initEnv = newLabels[2];

        var ifInnerComp = compileSMUsingBuffer (ifInner, initEnv),
            elseInnerComp = compileSMUsingBuffer (elseInner, ifInnerComp.snd);

        [conditionExpr <+ CJMP ("z", falseLabel) <+> ifInnerComp.fst <+ JMP (exitLabel) <+ LABEL (falseLabel) <+> elseInnerComp.fst <+ LABEL (exitLabel), elseInnerComp.snd]
      )
    | While (condition, inner) -> (
        var conditionExpr = compileExprUsingBuffer (condition);

        var newLabels = genLabels (env, 2);
        var restartLabel = newLabels[0],
            exitLabel = newLabels[1],
            initEnv = newLabels[2];

        var innerComp = compileSMUsingBuffer (inner, initEnv);

        [singletonBuffer (LABEL (restartLabel)) <+> conditionExpr <+ CJMP ("z", exitLabel) <+> innerComp.fst <+ JMP (restartLabel) <+ LABEL (exitLabel), innerComp.snd]
      )
    | DoWhile (inner, condition) -> (
        var conditionExpr = compileExprUsingBuffer (condition);

        var newLabels = genLabels (env, 1);
        var restartLabel = newLabels[0],
            initEnv = newLabels[1];

        var innerComp = compileSMUsingBuffer (inner, initEnv);

        [singletonBuffer (LABEL (restartLabel)) <+> innerComp.fst <+> conditionExpr <+ CJMP ("nz", restartLabel), innerComp.snd]
      )
    | _ -> failure("No such statement that can be converted to stack machine command.")
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  getBuffer ((compileSMUsingBuffer (stmt, initCompEnv ())).fst)
}


