-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined (@ global state)", x), getLoc (x))});
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

-- Core interpreter: takes a configuration and a program, returns a configuration
  -- Stack machine interpreter. Takes an SM-configuration and a program,
  -- Core interpreter: takes a configuration and a program, returns a configuration
  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c, insns) {
    case insns of 
      READ : insns                       -> eval ([readWorld(c[3])[0]:c[0], c[1], c[2], readWorld(c[3])[1]], insns) |
      WRITE : insns                      -> eval ([c[0].snd, c[1], c[2], writeWorld (c[0].fst, c[3])], insns) |
      BINOP (op) : insns                 -> eval (funcBinop (op, c), insns) |
	  LABEL (hl) : insns                 -> eval (c, insns) |   
      LDA (name) : insns                 -> eval ([Ref(name):c.fst, c.snd, c[2], c[3]], insns) |
      STI : insns                        -> eval (funcSti(c[3], c[2], c[1], c[0]), insns) |
      LD (name) : insns                  -> eval ([lookup(c[2],name):c[0], c[1], c[2], c[3]], insns) |
      ST (name): insns 					 -> (assign(c[2], name, c[0].fst);
											 eval (c, insns)) |
      CONST (value) : insns              -> eval ([value:c[0], c[1], c[2], c[3]], insns) |
      JMP (hl) : insns                -> eval (c, env [0] (hl)) |
      CJMP (cd, hl) : insns        	 -> case funcCJ (c, cd, hl, env, insns) of
                                    		[c, insns] -> eval (c, insns)
                                  		esac |
      DROP : insns                       -> eval ([c[0], c[1], c[2], c[3]], insns) |
	  DUP : insns                        -> eval ([c[0].fst:c[0].fst:c[0].snd, c[1], c[2], c[3]], insns)  |
      GLOBAL (name) : insns              -> (assign (c[2], Glb (name), 0);
											 eval ([c[0], c[1], c[2], c[3]], insns)) |
	  BEGIN (s, m, t) :insns 			 -> (c[2] := makeState (m, t);
												case take (c[0], m) of [r, j] ->
												   
												   foldl (fun (i, m) {assign (c[2], Arg (i), m); i+1}, 0, j);
												   eval ([r, c[1], c[2], c[3]], insns)
												esac) |
      END :insns 						 -> (var ex = c[1];
												var expr1 = c[2];
												case ex of 
												  expr1:j:ex -> eval ([c[0], ex, expr1, c[3]], j)
												| 0 -> c
												esac) | 
      CALL (name, i) : insns          	 -> eval ([c[0], c[2]:insns:c[1], c[2], c[3]], env [0] (name)) |
      STA : insns                        -> 
	  var x = c[0];
	  case x of
      s@v:Ref (varName):x -> eval(funcSti (c[3], c[2], c[1], s), insns)
    | v:index:container:x -> eval(container[index] := v;
                                     [v:x, c[1], c[2], c[3]], insns)
    esac |
      BUILTIN (i, j) : insns ->
              case take (c[0], j) of
                [r, y] -> 
                  case evalBuiltin (i, y, c[3]) of
                    [n, k] -> eval([n : r, c[1], c[2], k], insns) 
                  esac
              esac |
      STRING (i) : insns -> eval([i:c[0], c[1], c[2], c[3]], insns) |
      ELEM :insns ->
			( var ex = c[0];
			case ex of
			  k:i:ex -> eval ([i[k]:ex, c[1], c[2], c[3]], insns)
			esac) |
      ARRAY (i) : insns ->
			(var ex = c[0];
			var t = take(ex, i);
			case t of
			  [ex, j] -> eval ([listArray(j):ex, c[1], c[2], c[3]], insns)
			esac) |
      unknown : insns                    -> failure ("Error in eval-no such expr\n") |
      {}                                 -> c
    esac
  }
  
    fun funcSti (k, x, s, i:Ref (n):j) {
  	assign (x, n, i);
  	[i:j, s, x, k]
  }
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

fun funcBinop (inc, [x1:x2:y, c, s, k]) {
  var ex = case inc of
    "+"  -> x2 +  x1 |
    "-"  -> x2 -  x1 |
    "*"  -> x2 *  x1 |
    "/"  -> x2 /  x1 |
    "%"  -> x2 %  x1 |
    ">=" -> x2 >= x1 |
    "&&" -> x2 && x1 |
    "==" -> x2 == x1 |
    "!=" -> x2 != x1 |
    "<"  -> x2 <  x1 |
    "<=" -> x2 <= x1 |
    ">"  -> x2 >  x1 |
    "!!" -> x2 !! x1 |
    _    -> failure ("Failure at funcBinop - Incorrect expression for binop\n")
  esac;
  [ex:y, c, s, k]
}

fun funcCJ([s, k, ed, j], cd, l, e, sf) {
  case case s of
    0:s -> case cd of
                 "z" -> [s, e [0] (l)] |
				 _ -> [s, sf]
                esac |
    _:s -> case cd of
				 "z" -> [s, sf] |
                 _ -> [s, e [0] (l)]
                 
               esac
  esac of
    [s, in] -> [[s, k, ed, j], in]
  esac
}


-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a builtin
  fun addBuiltin (name, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Blt (name, nargs)), nLocals, nArgs, functions)
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | Blt (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | x@Blt (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal,
   scopeDepthValue,
   addBuiltin
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

fun scopeDepthValue (env) {
  env [14] ()
}

fun addBuiltin (env, Blt (name, nargs)) {
  env [15] (name, nargs)
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr, env) {
  -- printf("%s\n", string(expr));
  case expr of
    Var   (i)          -> [singletonBuffer (LD (lookupVar(env, expr[0]))), env] |
    Const (i)          -> [singletonBuffer (CONST (expr[0])), env] |
    Binop (i, j, y)    -> (case compileExpr (expr[1], env) of
				[lIn, env] ->
				case compileExpr (expr[2], env) of
					[rIn, env] -> [lIn <+> rIn <+ BINOP (expr[0]), env]
				esac
		   esac)  |
    Ref (i)            -> [singletonBuffer (LDA (lookupVar (env, expr[0]))), env] |
 
    
    Assn  (i, j)   -> (case i of
                          Ref (y) -> case compileExpr (j, env) of [b, o] -> [b <+ DUP <+ ST (lookupVar (env, y)), o] esac
                        | ElemRef (a, a1) -> 
                            case compileExpr (a, env) of
                              [lr, env] -> 
                                case compileExpr (a1, env) of
                                  [l, env] ->
                                    case compileExpr (j, env) of
                                      [b, env] -> [((lr <+> l) <+> b) <+ STA, env]
                                    esac
                                esac
                            esac
                        | _ -> case compileExpr (i, env) of [a2, o] -> case compileExpr (j, o) of [h, h2] -> 
                                                                            [(a2 <+> h) <+ STA, h2] esac esac
			esac) |
    Seq   (i, j)       -> (case compileExpr (expr.fst, env) of
    					[x1, env] -> case compileExpr (expr.snd, env) of
                      					[x2, env] -> [x1 <+> x2, env]
                    				   esac
  		    	   esac) | 
    While (i, j)       -> (case genLabels (env, 2) of
    				[sta, cond, env] ->
      				case compileExpr(expr[1], env) of
        				[stmtInsns, env] ->
        					case compileExpr (expr[0], env) of
          					[exprInsns, env] -> [singletonBuffer (JMP (cond)) <+ LABEL (sta) <+> stmtInsns <+ LABEL (cond) <+>
                               			exprInsns <+ CJMP ("nz", sta),  env]
        					esac
      					esac
  				esac) |
    DoWhile (i, j)     -> (case genLabel (env) of
    				[sta, env] ->
      					case compileExpr(expr[0], env) of
        					[stmtInsns, env] ->
        				case compileExpr (expr[1], env) of
          					[exprInsns, env] -> [singletonBuffer (LABEL (sta)) <+> stmtInsns <+>
                               			exprInsns <+ CJMP ("nz", sta),  env]
        				esac
      				esac
  			  esac) |
    If (i, j, y)       -> (case genLabel (env) of
    				[th, env] ->
      				case funcIf (expr, th, env) of
        				[in, env] -> [in <+ LABEL (th), env]
      				esac
  			  esac) |
    Skip               -> [{}, env]  |       
    Ignore (i)         -> (case compileExpr (expr[0], env) of
    				[exprInsns, env] -> [exprInsns <+ DROP, env]
  			  esac) |    
    Scope (i, e)       -> (
			var reg = fun(i, jArr){
				foldl (fun (a, j) {
					case j of
					  Var (_) -> a
					| Fun (name, args, body) ->
					  case lookupFun (a, name) of
						Fun (label, _) -> rememberFun (a, label, args, body)
					  esac
					esac
				  }, jArr, i)
			};
			var defReg = fun(i, jArr) {
				foldl (fun (a, j) {
					case j of
					  Var (names) -> addVars (a, names)
					| Fun (name, args, body) ->
					  case genLabel (a) of
						[label, a] -> addFun (a, name, label, size (args))
					  esac
					esac
				  }, jArr, i)
			};
			case reg (expr[0], defReg (expr[0], beginScope (env), env)) of
				env ->
				  case
					case compileExpr (expr[1], env) of
					  [insns, env] ->
						(
						var gl = fun(x, y){
							  var insns = foldl (fun (buffer, def) {
								case def of
								  Var (names) -> foldl (fun (buffer, name) {
												   buffer <+ GLOBAL (name)
												 }, buffer, names)
								| _ -> buffer
								esac
							  }, emptyBuffer (), x);
							  [insns, y]
						};
						if isGlobal (env) then
						  case gl (expr[0], env) of
							[scopeInsns, env] -> [scopeInsns <+ LABEL ("main") <+ BEGIN ("main", 0, getLocals (env))
																			   <+> insns <+ END,
												  env]
						  esac
						else
						  [insns, env]
						fi)
					esac of
					[insns, env] ->
					(
					var envFun = fun (x){
						  fun funcReg (y, x) {
							case
							  case getFuns (x) of
								[functions, x] ->
								[foldl (fun ([y, x], Fun (label, args, body, state)) {
									var funcBody = fun (u, e, a, ars){
										case compileExpr (u, e) of
											[in, e] -> [singletonBuffer (LABEL (a)) <+ BEGIN (a, ars, getLocals (e)) <+> in <+ END, e]
										esac
								   };
								   case funcBody (body, addArgs (beginFun (x, state), args), label, size (args)) of
									 [yArgs, x] -> [y <+> yArgs, x]
								   esac
								 }, [y, x], functions), size (functions)]
							  esac of
							  [[y, x], nFuncs] -> 
							  if nFuncs == 0 then
								[y, x]
							  else
								funcReg (y, x)
							  fi
							esac
						  }

						  funcReg (emptyBuffer (), x)
					};
					if isGlobal (env) then 
					  case envFun (env) of
						[funcInsns, env] -> [insns <+> funcInsns, endScope (env)]
					  esac
					else 
					  [insns, endScope (env)]
					fi)
				 esac
			  esac)  |
    Call (i, j) -> (var ar = fun (x) {
				foldl (fun ([e, code], arg) { 
				case compileExpr (arg, e) of 
				 [argc, x] -> [x, code <+> argc] 
				esac 
			}, [x, emptyBuffer ()], j)
		};
        case ar(env) of
          [env, argc] ->
            case i of
              "read" -> [argc <+ BUILTIN ("read", 0), env] |
			   modif ->
			    var built = case modif of 
				    "length" -> argc <+ BUILTIN (modif, 1) |
					"write" -> argc <+ BUILTIN (modif, 1) |
					"stringval" -> argc <+ BUILTIN (modif, 1) |
					_ -> case lookupFun (env, i) of
						  Fun (f_lbl, nArgs) -> argc <+ CALL (f_lbl, nArgs)
						esac
				esac;
				[built, env]
            esac
        esac) |
    String (i) -> [singletonBuffer (STRING (i)), env] |
    Elem (i, l) -> 
      var cmp = fun(env){
	    foldl (fun ([acc, env], i) {case compileExpr (i, env) of [b, env] -> [acc <+> b, env] esac}, [emptyBuffer (), env], {i, l})
	  };
      case cmp(env) of
        [b, env] -> [b <+ ELEM, env]
      esac |
    ElemRef (i, j)            ->   case compileExpr (expr[0], env) of
					[co, env] ->
					case compileExpr (expr[1], env) of
					 [in, env] -> [co <+> in, env]
					esac
				   esac |
    Array (i) -> 
      var cmp = fun(env){
	    foldl (fun ([acc, env], a) {case compileExpr (a, env) of [b, env] -> [acc <+> b, env] esac}, [singletonBuffer (CONST (size (expr[0]))), env], expr[0])
	  };
      case cmp(env) of
        [b, env] -> [b <+ ARRAY (size (expr[0])), env]
      esac |
    _                         -> failure (sprintf ("compileExpr for %s not implemented\n", string(expr)))
  esac
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (expr) {
  var env = foldl (fun (env, bltDef) {
    addBuiltin (env, bltDef)
  }, beginScope (initCompEnv ()), {
    Blt ("read", 0),
    Blt ("write", 1),
    Blt ("length", 1)
  });
  case compileExpr (expr, env) of
    [insns, _] -> getBuffer (insns)
  esac
}

fun funcIf (If (er, th, el), l, e) {
  case genLabel (e) of
    [st, e] ->
      case compileExpr (th, e) of
        [iTh, e] ->
          case case el of
                 If (i, j, y) -> funcIf (el, l, e) |
                 _ -> compileExpr (el, e)
               esac of
            [iEl, e] ->
            case compileExpr(er, e) of
              [eIn, e] -> [eIn <+ CJMP ("nz", st) <+> iEl <+ JMP (l) <+
                                  LABEL (st) <+> iTh, e]
            esac
          esac
      esac
  esac
}

fun calcFunc (expr) {
  var l = fun(c, e){ 
    case compileExpr (e[2], addArgs (beginFun (c[0], e[3]), e[1])) of 
      [x, y] -> [y, c[1] <+> singletonBuffer (LABEL (e[0])) <+ BEGIN (e[0], e[1].size, getLocals (y)) <+> x <+ END] 
    esac }; 
  case foldl(l, [expr[1], emptyBuffer ()], expr[0]) of [x, y] -> 
    case getFuns (x) of 
      [{}, _]     -> y 
    | [i, j] -> y <+> calcFunc ([i, j]) 

    esac
  esac
}