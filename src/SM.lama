-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl(
    fun ([stack, state, world], insn) {
      case insn of 
        CONST (c)  -> [c:stack, state, world]
      | READ       -> case readWorld (world) of
          [r1, r2] -> [r1:stack, state, r2] 
          esac
      | WRITE      -> [stack.tl, state, writeWorld (stack.hd, world)] 
      | BINOP (op) -> case stack of 
          right:left:stack -> [(evalBinop (op, left, right)):stack, state, world]
          esac
      | LD (x)     -> [state (x):stack, state, world]
      | ST (x)     -> [stack.tl, state <- [x, stack.hd], world]
      esac
  },
  c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x)              -> {LD (x)}
  | Const (c)            -> {CONST (c)}
  | Binop (op, lhs, rhs) -> compileExpr (lhs) +++ compileExpr (rhs)  +++ {BINOP (op)}
  | _                    -> failure ("\n[ERROR] Unsupported compileExpr input\n")
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (st, expr) -> compileExpr (expr) +++ {ST (st)}
  | Read (st)       -> {READ, ST (st)}
  | Write (expr)    -> compileExpr (expr) +++ {WRITE}
  | Seq (lhs, rhs)  -> compileSM (lhs) +++ compileSM (rhs)
  | Skip            -> []
  | _               -> failure("\n[ERROR] Unsupported SM:compileSM match")
  esac
}
