-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s, f)    -> sprintf ("LABEL %s, %d", s, f)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  | META (m)         -> sprintf ("META %s", m.string)
  | PATT (p)         -> sprintf ("PATT %s", p.string)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}                  -> m
            | LABEL (lab, _) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl              -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun evalBuiltinSM(name, nArgs, stk, world) {
    case take (stk, nArgs) of [stk, args] ->
      case evalBuiltin(name, args, world) of [v, world] -> [v:stk, world] esac
    esac
  }
  fun evalInst (c@[stk, cstk, st, w], insn) {
      case insn of
          BINOP (s) ->
            case stk of
              y:x:tail  -> [evalOp (s, x, y):tail, cstk, st, w]
            esac
        | LD    (x) -> [lookup(st, x):stk, cstk, st, w]
        | LDA   (x) -> [Ref(x):stk, cstk, st, w]
        | ST    (x) -> case stk of v:tail -> assign (st, x, v); [stk, cstk, st, w] esac
        | STI       -> case stk of v:Ref(x):tail -> assign (st, x, v); [v:tail, cstk, st, w] esac
        | CONST (n) -> [n:stk, cstk, st, w]
        | LABEL (_, _) -> c
        | DROP      -> case stk of n:tail -> [tail, cstk, st, w] esac
        | BEGIN (_, nArgs, nLocals) -> case take (stk, nArgs) of
                                          [nstk, args] ->
                                            var state = makeState (nArgs, nLocals);
                                            foldl(fun (i, arg) {assign (state, Arg (i), arg); i+1}, 0, args);
                                            [nstk, cstk, state, w]
                                       esac
        | GLOBAL (x)-> assign (st, Glb (x), 0); c
        | STRING (s)-> [s:stk, cstk, st, w]
        | ARRAY  (n)-> case take (stk, n) of [newStack, args] -> [listArray (args):newStack, cstk, st, w] esac
        | STA       -> case stk of v:index:x:tail ->
                        if (compare(index, x) != 0) then x[index] := v else assign (st, x[0] (*unfold Ref*), v) fi;
                        [v:tail, cstk, st, w]
                      esac
        | ELEM      -> case stk of
                        index:Sexp(s, arr):tail -> [arr[index]:tail, cstk, st, w]
                       |index:arr:tail          -> [arr[index]:tail, cstk, st, w]
                      esac
        | DUP       -> case stk of x:tail -> [x:x:tail, cstk, st, w] esac
        | SEXP(s, n)-> case take (stk, n) of [nstk, args] -> [Sexp (s, listArray (args)):nstk, cstk, st, w] esac
        | PATT (p)  ->
              case p of
                Tag (t, size) ->
                  case stk of
                    Sexp (name, exprs) : stk -> [(compare (name, t) == 0 && length (exprs) == size) : stk, cstk, st, w]
                  | _                  : stk -> [0 : stk, cstk, st, w]
                  esac
              | Array (size) ->
                  case stk of
                    arr@#array : stk -> [(length (arr) == size) : stk, cstk, st, w]
                  | _          : stk -> [0 : stk, cstk, st, w]
                  esac
              esac

        esac
    }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, s, w], insns) {
    -- printf ("%s\n", string (insns));
    case insns of
      {} -> c
    | JMP (l) : _                -> eval (c, fromLabel (env, l))
    | CJMP (cond, l) : insnsTail ->
        case st of
          h:t -> if (compare(cond, "nz") == 0 && h != 0) !! (compare(cond, "z") == 0 && h == 0)
                 then eval ([t, cst, s, w], fromLabel (env, l))
                 else eval ([t, cst, s, w], insnsTail)
                 fi
        esac
    | CALL (f, nArgs) : nextP -> eval ([st, [s, nextP]: cst, s, w], fromLabel (env, f))
    | BUILTIN  (f, nArgs): p ->  case take (st, nArgs) of [t, args] ->
                                    case evalBuiltin(f, args, w) of [v, nw] -> eval ([v:t, cst, s, nw], p) esac
                                 esac
    | END : tail ->
        case cst of
          {} -> c
        | [prevSt, nextP] : tail -> eval([st, tail, prevSt, w], nextP)
        esac
    | inst : insnsTail -> eval(evalInst (c, inst), insnsTail)
    esac
  }
  

  -- printf ("%s\n", showSM (insns));
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

fun rememberFuncs (env, labeledFuncs) {
  case labeledFuncs of
    {} -> env
  | LabeledFun (fLabel, args, body) : tailFuncs ->
      var env1 = rememberFun (env, fLabel, args, body);
      rememberFuncs (env1, tailFuncs)
  esac
}

fun  compileIf(env, cond, tp, fp) {
    case genLabels (env, 2) of
            [labelFP, labelFi, env1] ->
              case compile (env1, cond) of
                [env2, condc] ->
                  case compile(env2, tp) of
                    [env3, tpc] ->
                      case compile(env3, fp) of
                        [newEnv, fpc] -> [newEnv,       condc
                                                    <+  CJMP ("z", labelFP)
                                                    <+> tpc
                                                    <+  JMP (labelFi)
                                                    <+  LABEL (labelFP, false)
                                                    <+> fpc
                                                    <+  LABEL (labelFi, false)]
                      esac
                  esac
              esac
    esac
}

fun compileWhile(env, cond, body) {
    case genLabels (env, 2) of
      [condLabel, odLabel, env1] ->
        case compile(env1, cond) of
          [env2, condCode] ->
            case compile (env2, body) of
              [newEnv, codeBody] -> [newEnv,      singletonBuffer (LABEL (condLabel, true))
                                              <+> condCode
                                              <+ CJMP ("z", odLabel)
                                              <+> codeBody
                                              <+ JMP (condLabel)
                                              <+ LABEL (odLabel, false)]
            esac
        esac
    esac
}
fun compileDoWhile(env, body, cond){
  case genLabel (env) of
    [labelDo, env1] ->
      case compile(env1, body) of
        [env2, codeBody] ->
          case compile (env2, cond) of
            [newEnv, codeCond] -> [newEnv,     singletonBuffer (LABEL (labelDo, true))
                                           <+> codeBody
                                           <+> codeCond
                                           <+  CJMP ("nz", labelDo)]
          esac
      esac
  esac
}

fun compileArgs (env, args) {
    foldl(fun([e, code], arg) {
      case compile (e, arg) of [nenv, argCode] -> [nenv, code <+> argCode] esac
    }, [env, emptyBuffer ()], args)
}

fun getDefs(defs) {
  foldl (
    fun ([vars, funcs], def) {
      case def of
        Var (varNames) -> [vars <+> listBuffer (varNames), funcs]
      | func@Fun (_, _, _) -> [vars, func : funcs]
      esac
    },
    [emptyBuffer (), {}],
    defs
  )
}


fun compileDefs(env, defs) {
  case getDefs (defs) of [varDefs, funcDefs] ->
    var varNames = getBuffer (varDefs);
    var varenv = addVars (env, varNames);
    var prologCode =  if (isGlobal (varenv))
                      then listBuffer (map (fun (name) {GLOBAL (name)}, varNames))
                      else emptyBuffer ()
                      fi;
    var tmp = foldl (
      fun ([curEnv, curFuncs], Fun (name, args, body)) {
        
        case genFunLabel (curEnv, name) of [fLabel, curEnv1] ->
          var env1 = addFun (curEnv1, name, fLabel, size (args));
          [env1, LabeledFun (fLabel, args, body) : curFuncs]
        esac
      },
      [varenv, {}], funcDefs
    );
    [rememberFuncs (tmp.fst, tmp.snd), prologCode]
  esac
}

fun compileScope(env, defs, expr) {
    var env1 = beginScope (env);
    case compileDefs(env1, defs) of [env2, prologCode] ->
        case compile (env2, expr) of [env3, exprCode] ->
          [endScope (env3), prologCode <+> exprCode]
        esac 
    esac
}

fun compileAP(env, patterns, patternCheck) {

  case genLabels (env, 2) of [endCaseLabel, finalLabel, env1] ->
      case foldl (
          fun ([curEnv, code, id], pattern) {
                case compilePattern (curEnv, pattern) of [nenv, headCode] ->
                    [nenv, code  <+ DUP  <+ CONST (id)  <+ ELEM  <+> headCode <+ CJMP ("z", endCaseLabel), id+1]
                esac
          }, [env1, emptyBuffer (), 0], patterns) of [env2, listCode, _] ->
        [env2,     singletonBuffer (DUP)
               <+  patternCheck
               <+  CJMP ("z", endCaseLabel)
               <+> listCode
               <+  DROP
               <+  CONST (1)
               <+  JMP (finalLabel)
               <+  LABEL (endCaseLabel, false)
               <+  DROP
               <+  CONST (0)
               <+  LABEL (finalLabel, false)  ]
      esac
  esac
}

fun compilePattern (env, pattern) {
  case pattern of
      Array (patterns)      -> compileAP (env, patterns, PATT (Array (size (patterns))))
    | Sexp (name, patterns) -> compileAP (env, patterns, PATT (Tag (name, size (patterns))))
    | Named (_, None)       -> [env, listBuffer ({DROP, CONST (1)})]
    | Named (_, Some (p))   -> compilePattern (env, p)
    | Const (n)             -> [env, listBuffer ({CONST (n), BINOP ("==")})]
    | Wildcard              -> [env, listBuffer ({DROP, CONST (1)})]
    | _                     -> failure ("Not recognized evalExpr")
  esac
}

fun compileCases(env, scrutineeName, cases) {
  case genLabel (env) of [lastLabel, env1] ->
      case foldl (
          fun ([curEnv, code], [pattern, expr]) {
            case compilePattern (curEnv, pattern) of [curEnv1, patternCode] ->
                case compile (curEnv1, expr) of [curEnv2, exprCode] ->
                    case genLabel (curEnv2) of [nextCaseLabel, curEnv3] ->
                      [curEnv3,     code
                                <+  DUP
                                <+> patternCode
                                <+  CJMP ("z", nextCaseLabel)
                                <+  DROP
                                <+> exprCode
                                <+  JMP (lastLabel)
                                <+  LABEL (nextCaseLabel, false)
                      ]
                    esac
                esac
            esac
          }, [env1, emptyBuffer ()], cases )      of [env2, casesCode] ->
        var s = lookupVar (env, scrutineeName);
        [env2, singletonBuffer (LD (s)) <+> casesCode <+ LABEL (lastLabel, false)]
      esac
  esac
}

fun compileFuns ([funs, env]) {
    foldl(
      fun ([env, code], Fun (fLabel, args, body, state)) {
            var funState    = beginFun (env, state);
            var funArgState = addArgs (funState, args);
            case compile (funArgState, body) of
                [env, funCode] -> [env, code <+> singletonBuffer (LABEL (fLabel, false)) <+ BEGIN (fLabel, args.size, getLocals (env)) <+> funCode <+ END]
              esac
      },
      [env, emptyBuffer ()],
      funs)[1]
}

fun compile (env, expr) {
  case expr of
        Const (n)           ->  [env, singletonBuffer (CONST (n))]
      | Var (x)             ->  [env, singletonBuffer (LD (lookupVar (env, x)))]
      | Ref (x)             ->  [env, singletonBuffer (LDA (lookupVar (env, x))) <+ DUP]
      | String (s)          ->  [env, singletonBuffer (STRING (s))]
      | Binop (op, l, r)    ->  case compile (env, l) of
                                  [envl, lc] ->
                                    case compile (envl, r) of
                                      [envr, rc] -> [envr, lc <+> rc <+ BINOP (op)]
                                    esac
                                esac
      | Skip                ->  [env, emptyBuffer ()]
      | Assn (l, r)         ->  case compile(env, l) of
                                  [envl, lc] ->
                                    case compile (envl, r) of
                                      [envr, rc] -> [envr, lc <+> rc <+ STA]
                                    esac
                                esac
      | Seq (s1, s2)        ->  case compile(env, s1) of
                                  [envs1, s1c] ->
                                    case compile (envs1, s2) of
                                      [envs2, s2c] -> [envs2, s1c <+> s2c]
                                    esac
                                esac
      | If (cond, tp, fp)          -> compileIf(env, cond, tp, fp)
      | While (cond, body)         -> compileWhile(env, cond, body)
      | DoWhile (body, cond)       -> compileDoWhile(env, body, cond)
      | Ignore (expr)              -> case compile (env, expr) of [newEnv, code] -> [newEnv, code <+ DROP] esac
      | Array  (exprs)             -> case compileArgs (env, exprs)         of [env, argsCode]   -> [env, argsCode <+ ARRAY (size (exprs))] esac
      | Elem (expr, index)         -> case compileArgs (env, {expr, index}) of [env, argsCode]   -> [env, argsCode <+ ELEM] esac
      | ElemRef (expr, index)      -> case compileArgs (env, {expr, index}) of [env, argsCode]   -> [env, argsCode] esac
      | Sexp (name, exprs)         -> case compileArgs (env, exprs)         of [env, argsCode]   -> [env, argsCode <+ SEXP (name, size (exprs))] esac
      | Scope (defs, expr)         -> compileScope(env, defs, expr)
      | Call (fName, argExprs) ->
          var callCode = case fName of
                            "read" -> BUILTIN ("read", 0)
                          | "write" -> BUILTIN ("write", 1)
                          | "length" -> BUILTIN ("length", 1)
                          | _ ->  case lookupFun (env, fName) of Fun (fLabel, argsCnt) ->
                                      CALL (fLabel, argsCnt)
                                  esac
                          esac;
          case compileArgs (env, argExprs) of [env1, argsCode] ->
            [env1, argsCode <+ callCode]
          esac

      | Case (scrutineeName, cases) -> compileCases(env, scrutineeName, cases)
  esac
}

public fun compileSM (expr) {
  var compEnv = initCompEnv ().beginScope;
  case compile (compEnv, expr) of
    [env, code] -> getBuffer( singletonBuffer (LABEL ("main", false))
                              <+ BEGIN ("main", 0, getLocals (env))
                              <+> code
                              <+ END
                              <+> compileFuns (getFuns (env)))
  esac
}
