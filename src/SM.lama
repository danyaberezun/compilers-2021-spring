-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalInsnRead ([stack, st, w], READ) {
  var readResult = readWorld (w);
  [readResult[0]:stack, st, readResult[1]]
}

fun evalInsnWrite ([value:stack, st, w], WRITE) {
  [stack, st, writeWorld (value, w)]
}

fun evalInsnBinop ([b:a:stack, st, w], BINOP (op)) {
  var result = case op of
    "+"  -> a +  b |
    "-"  -> a -  b |
    "*"  -> a *  b |
    "/"  -> a /  b |
    "%"  -> a %  b |
    "==" -> a == b |
    "!=" -> a != b |
    "<"  -> a <  b |
    "<=" -> a <= b |
    ">"  -> a >  b |
    ">=" -> a >= b |
    "&&" -> a && b |
    "!!" -> a !! b |
    _    -> failure ("eval BINOP insn is not supported\n")
  esac;
  [result:stack, st, w]
}

fun evalInsnLd ([stack, st, w], LD (varName)) {
  [st(varName):stack, st, w]
}

fun evalInsnSt ([value:stack, st, w], ST (varName)) {
  [stack, st <- [varName, value], w]
}

fun evalInsnConst ([stack, st, w], CONST (value)) {
  [value:stack, st, w]
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl (fun (config, insn) {
    case insn of
      READ      -> evalInsnRead  (config, insn) |
      WRITE     -> evalInsnWrite (config, insn) |
      BINOP (_) -> evalInsnBinop (config, insn) |
      LD    (_) -> evalInsnLd    (config, insn) |
      ST    (_) -> evalInsnSt    (config, insn) |
      CONST (_) -> evalInsnConst (config, insn) |
      _         -> failure ("SM eval not implemented\n")
    esac
  }, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

fun compileExprVar (Var (varName)) {
  singletonBuffer (LD (varName))
}

fun compileExprConst (Const (value)) {
  singletonBuffer (CONST (value))
}

fun compileExprBinop (Binop (op, expr0, expr1)) {
  compileExpr (expr0) <+> compileExpr (expr1) <+ BINOP (op)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (_)       -> compileExprVar   (expr) | 
    Const (_)       -> compileExprConst (expr) |
    Binop (_, _, _) -> compileExprBinop (expr) |
    _               -> failure ("compileExpr not implemented\n")
  esac
}

fun compileStmtAssn (Assn (varName, expr)) {
  compileExpr (expr) <+ ST (varName)
}

fun compileStmtSeq (Seq (stmt0, stmt1)) {
  compileStmt (stmt0) <+> compileStmt (stmt1)
}

fun compileStmtRead (Read (varName)) {
  listBuffer ({READ, ST (varName)})
}

fun compileStmtWrite (Write (expr)) {
  compileExpr (expr) <+ WRITE
}

fun compileStmt (stmt) {
  case stmt of
    Assn  (_, _) -> compileStmtAssn  (stmt) |
    Seq   (_, _) -> compileStmtSeq   (stmt) |
    Skip         -> {}                      |
    Read  (_)    -> compileStmtRead  (stmt) |
    Write (_)    -> compileStmtWrite (stmt) |
    _            -> failure ("Stmt compile not implemented\n")
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  getBuffer (compileStmt(stmt))
}
