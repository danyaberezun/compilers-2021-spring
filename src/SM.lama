-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (environment, configuration, instructions) {
  fun applyInstruction([stack, state, world], instruction) {
    -- printf("stev %s\n  stck %s\n  stte %s\n", instruction.string, stack.string, state.string);
    case instruction of
      READ ->
        var value = readWorld(world);
        world := value.snd;
        value := value.fst;
        stack := value : stack |
      WRITE ->
        case stack of
          value:tail ->
            world := writeWorld(value, world);
            stack := tail
        esac |
      BINOP(operation) ->
        case stack of
          rhs:lhs:tail ->
            stack := (evalOp(operation, lhs, rhs) : tail)
        esac |
      LD(variableName) ->
        stack := state(variableName) : stack |
      LDA(variableName) ->
        stack := Ref(variableName) : stack |
      ST(variableName) -> 
        case stack of
          value:tail ->
            state := state <- [variableName, value];
            stack := tail
        esac |
      STI ->
        case stack of 
          value : Ref(variableName) : tail ->
            state := state <- [variableName, value];
            stack := value : tail
        esac |
      CONST(value) -> 
        stack := (value : stack) |
      DROP ->
        case stack of
          head : tail ->
            stack := tail
        esac |
      LABEL(_) -> skip |
      JMP(_) -> skip |
      CJMP(_, _) -> skip |
      _ -> failure("Unknown instruction '" ++ string(instruction) ++ "' at stack unwrapping\n")
    esac;

    [stack, state, world]
  }

  fun applyLabelJumps([stack, state, world], instruction : instructions) {
    case instruction of
      JMP(labelName) ->
        instructions := environment.fromLabel(labelName) |
      CJMP(condition, labelName) ->
        case stack of conditionValue : stackTail ->
          stack := stackTail;
          if (compare(condition, "nz") == 0 && conditionValue != 0) 
          !! (compare(condition, "z")  == 0 && conditionValue == 0) then
            instructions := environment.fromLabel(labelName)
          fi
        esac |
      _ -> skip        
    esac;
    
    [[stack, state, world], instructions]
  }

  while size(instructions) > 0 do
    case instructions of instruction : _ ->
      -- printf("stckeval %s\n", string(instruction));
      configuration := applyInstruction(configuration, instruction);

      -- Change remaining instructions if jmp to label occured or just get remaining ones
      case applyLabelJumps(configuration, instructions) of
        [newConf, newInstr] -> 
          configuration := newConf;
          instructions  := newInstr
      esac

    esac
  od;

  configuration
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expression) {
  -- printf("stex %s\n", string(expression));
  
  case expression of 
    -- Data kinds
    Const(value) -> 
      singletonBuffer(CONST(value)) |
    Var(variableName) ->
      singletonBuffer(LD(variableName)) |
    Ref(variableName) ->
      singletonBuffer(LDA(variableName)) |

    -- Expressions parsing
    Seq (subexpression1, subexpression2) -> 
      compileExpr(subexpression1) <+> compileExpr(subexpression2) |
    -- Assn (Ref(variableName), expression) ->
    --   compileExpr(expression) <+ ST(variableName) |
    Assn (destination, expression) ->
      compileExpr(destination) <+> compileExpr(expression) <+ STI |
    Binop(operation, subexpression1, subexpression2) ->
      compileExpr(subexpression1) <+> compileExpr(subexpression2) 
        <+ BINOP(operation) |
    Read (variableName) -> 
      singletonBuffer(READ) <+ ST(variableName) |
    Write (expression) ->
      compileExpr(expression) <+ WRITE |
    
    -- Flow control
    While (condition, body) ->
      case environment.genLabels(2) of 
        [labelStart, labelBody, newEnv] ->
          environment := newEnv;
          singletonBuffer(JMP(labelStart)) <+ LABEL(labelBody) 
            <+> compileExpr(body) <+ LABEL(labelStart)
            <+> compileExpr(condition) <+ CJMP("nz", labelBody)
      esac |
    DoWhile(body, condition) ->
      case environment.genLabels(1) of [labelBody, newEnv] ->
        environment := newEnv;
        singletonBuffer(LABEL(labelBody))
          <+> compileExpr(body)
          <+> compileExpr(condition) <+ CJMP("nz", labelBody)
      esac |
    If (condition, consequentExpr, alternativeExpr) ->
      case environment.genLabels(2) of 
        [labelAlternative, labelEnd, newEnv] -> 
          environment := newEnv;
          compileExpr(condition)
            <+ CJMP("z", labelAlternative)
            <+> compileExpr(consequentExpr)
            <+ JMP(labelEnd) <+ LABEL(labelAlternative)
            <+> compileExpr(alternativeExpr)
            <+ LABEL(labelEnd)
      esac |

    Ignore (expression) ->
      compileExpr(expression) |
    Skip ->
      emptyBuffer() |
    _ -> failure ("Unknown expression in stack machine '" ++ string(expression) ++ "'\n")
  esac
}

var environment; -- Can't change argument of outer function in inner one, thus global variable

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  environment := initCompEnv();
  getBuffer(compileExpr(stmt))
}
