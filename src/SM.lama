-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun createLocal (stack, nArgs, nLocals) {
    case take (stack, nArgs) of 
      [newStack, args] -> 
        var state = makeState (nArgs, nLocals);
        foldl(fun (i, arg) {assign (state, Arg (i), arg); i+1}, 0, args);
        [newStack, state]
    esac
  }

  fun evalBuiltinSM(name, nArgs, stack, world) {
    case take (stack, nArgs) of [stack, args] -> 
      case evalBuiltin(substring (name, 1, name.length - 1), args, world) of [v, world] -> [v:stack, world] esac
    esac
  }

  fun evalInst (c@[stk, cstk, st, w], insn) {
      case insn of
          BINOP (s) -> 
            case stk of 
              y:x:tail  -> [evalOp (s, x, y):tail, cstk, st, w]
            esac
        | LD    (x) -> [lookup(st, x):stk, cstk, st, w]
        | LDA   (x) -> [Ref(x):stk, cstk, st, w]
        | ST    (x) -> case stk of v:tail -> assign (st, x, v); [stk, cstk, st, w] esac
        | STI       -> case stk of v:Ref(x):tail -> assign (st, x, v); [v:tail, cstk, st, w] esac
        | CONST (n) -> [n:stk, cstk, st, w]
        | LABEL (_) -> c
        | DROP      -> case stk of n:tail -> [tail, cstk, st, w] esac
        | BEGIN (_, nArgs, nLocals) -> 
          case createLocal (stk, nArgs, nLocals) of
            [stk, st] -> [stk, cstk, st, w]
          esac
        | GLOBAL (x)-> assign (st, Glb (x), 0); c
        | STRING (s)-> [s:stk, cstk, st, w]
        | ARRAY  (n)-> case take (stk, n) of [newStack, args] -> [listArray (args):newStack, cstk, st, w] esac
        | STA       -> 
          case stk of v:index:x:tail -> 
            if (compare(index, x) != 0) then x[index] := v else assign (st, x[0] (*unfold Ref*), v) fi;
            [v:tail, cstk, st, w]
          esac
        | ELEM      -> 
          case stk of 
            index:Sexp(s, arr):tail -> [arr[index]:tail, cstk, st, w] 
          | index:arr:tail          -> [arr[index]:tail, cstk, st, w] 
          esac
        | DUP       -> case stk of x:tail -> [x:x:tail, cstk, st, w] esac
        | SEXP(s, n)-> case take (stk, n) of [newStack, args] -> [Sexp (s, listArray (args)):newStack, cstk, st, w] esac
        esac
    }

  fun eval (c@[stack, controlStack, state, world], insns) {
    case insns of
      {} -> c
    | JMP (l) : _                -> eval (c, fromLabel (env, l))
    | CJMP (cond, l) : insnsTail -> 
        case stack of 
          z:s -> if (compare(cond, "nz") == 0 && z != 0) !! (compare(cond, "z") == 0 && z == 0) 
                 then eval ([s, controlStack, state, world], fromLabel (env, l))
                 else eval ([s, controlStack, state, world], insnsTail)
                 fi
        esac
    | CALL (f, nArgs) : p -> 
      case f[0] of
        '$' -> case evalBuiltinSM (f, nArgs, stack, world) of [stack, world] -> eval ([stack, controlStack, state, world], p) esac
      |  _  -> eval ([stack, [state, p]: controlStack, state, world], fromLabel (env, f))
      esac
    | END : tail -> 
        case controlStack of
          {} -> c
        | [localState, newProgram] : tail -> eval([stack, tail, localState, world], newProgram)
        esac
    | inst : insnsTail -> eval(evalInst (c, inst), insnsTail)
    esac
  }
  
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | Arg (i)       -> Arg (i)  -- TODO remove after supporting val's
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

fun compileDefs (env, defs) {
  foldl (fun ([env, globals, funs], decl) {
    case decl of
      Var (names) -> 
        case addVars (env, names) of
          env -> if (isGlobal (env)) 
                 then [env, names +++ globals, funs] 
                 else [env, globals, funs] 
                 fi
        esac
    | f@Fun (name, args, body) -> 
        case genFunLabel (env, name) of
          [fLabel, env] -> 
            case addFun (env, name, fLabel, size (args)) of
              env -> [env, globals, Fun (fLabel, args, body) : funs] 
            esac
        esac
    esac
  }, [env, {}, {}], defs)
}

public fun compileSM (expr) {
  fun compileScope(env, defs, expr) {
      case compileDefs (beginScope (env), defs) of
        [env, globals, funs] -> 
          var globalCommands = map ( fun (v) { GLOBAL (v) }, globals);
          case foldl(fun (e, f@Fun (fLabel, args, body)) { rememberFun (e, fLabel, args, body) }, env, funs) of
            env -> case compile (env, expr) of [env, code] -> [endScope (env), listBuffer (globalCommands) <+> code] esac
          esac
      esac
  }
  fun compileIf(env, expr, ifTrue, ifFalse) {
      case genLabels (env, 3) of
          [ifTrueLabel, ifFalseLabel, fiLabel, env1] -> 
            case compile (env1, expr) of
              [env2, exprCode] -> 
                case compile(env2, ifTrue) of
                  [env3, ifTrueCode] -> 
                    case compile(env3, ifFalse) of 
                      [nenv, ifFalseCode] -> [nenv, exprCode <+ CJMP ("z", ifFalseLabel) <+ 
                                                        LABEL (ifTrueLabel) <+> ifTrueCode <+ JMP (fiLabel) <+ 
                                                        LABEL (ifFalseLabel) <+> ifFalseCode <+ LABEL (fiLabel)]
                    esac
                esac  
            esac
        esac
  }

  fun compileWhile(env, expr, body) {
      case genLabels (env, 2) of
        [condLabel, odLabel, env1] -> 
          case compile(env1, expr) of
            [env2, exprCode] ->
              case compile (env2, body) of
                [nenv, bodyCode] -> [nenv, singletonBuffer (LABEL (condLabel)) <+> exprCode <+ 
                                             CJMP ("z", odLabel) <+> bodyCode <+ JMP (condLabel) <+ LABEL (odLabel)]
              esac
          esac
      esac
  }

  fun compileDoWhile(env, body, expr) {
      case genLabel (env) of
        [bodyLabel, env1] -> 
          case compile(env1, body) of
            [env2, bodyCode] ->
              case compile (env2, expr) of
                [nenv, exprCode] -> [nenv, singletonBuffer (LABEL (bodyLabel)) <+> bodyCode <+> 
                                              exprCode <+ CJMP ("nz", bodyLabel)]
              esac
          esac
      esac
  }
  fun compileSeq(env, stm1, stm2) {
      case compile(env, stm1) of
        [env1, stm1Code] ->
          case compile (env1, stm2) of
            [nenv, stm2Code] -> [nenv, stm1Code <+> stm2Code]
          esac
      esac
  }
  fun compileCall(env, name, args) {
      case compileArgs (env, args) of
        [env, argsCode] ->
          case lookupFun (env, name) of
            Fun (fLabel, nArgs) -> [env, argsCode <+ CALL (fLabel, nArgs)]
          esac
      esac
  }
  fun compileAssn(env, l, r) {
      case compile(env, l) of
        [env1, lCode] ->
          case compile (env1, r) of
            [nenv, rCode] -> [nenv, lCode <+> rCode <+ STA]
          esac
      esac
  }
  fun compileBinOp (env, op, left, right)  {
      case compile (env, left) of
        [env1, leftCode] ->
          case compile (env1, right) of
            [nenv, rightCode] -> [nenv, leftCode <+> rightCode <+ BINOP (op)]
          esac
      esac
  }

  fun compileArgs (env, args) {
    foldl(fun([e, code], arg) { 
      case compile (e, arg) of [nenv, argCode] -> [nenv, code <+> argCode] esac 
    }, [env, emptyBuffer ()], args)
  }

  fun compileFun([env, acc], Fun (fLabel, args, body, state)) {
      case compile (addArgs (beginFun (env, state), args), body) of 
        [env, code] -> [env, acc <+> singletonBuffer (LABEL (fLabel)) <+ BEGIN (fLabel, args.size, getLocals (env)) <+> code <+ END] 
      esac  
  }

  fun compileFuns ([funs, env]) {
      case foldl(compileFun, [env, emptyBuffer ()], funs) of [env, acc] -> 
        case getFuns (env) of 
          [{}, _]     -> acc 
        | [funs, env] -> acc <+> compileFuns ([funs, env]) 
        esac
      esac

    }

  fun compile(env, expression) {
    case expression of
        Const (value) -> [env, singletonBuffer (CONST (value))]
      | Var (x) -> [env, singletonBuffer (LD (lookupVar (env, x)))]
      | Ref (x) -> [env, singletonBuffer (LDA (lookupVar (env, x))) <+ DUP]
      | Binop (op, left, right) -> compileBinOp (env, op, left, right)
      | Skip              -> [env, emptyBuffer ()]
      | Assn (l, r)       -> compileAssn(env, l, r)
      | Seq (stm1, stm2)  -> compileSeq(env, stm1, stm2)
      | If (expr, ifTrue, ifFalse) -> compileIf(env, expr, ifTrue, ifFalse)  
      | While (expr, body) -> compileWhile(env, expr, body)
      | DoWhile (body, expr) -> compileDoWhile(env, body, expr)
      | Ignore (expr) -> case compile (env, expr) of [nenv, code] -> [nenv, code <+ DROP] esac
      | Scope (defs, expr) -> compileScope(env,defs, expr)
      | Call (name, args) -> compileCall(env, name, args)
      | String (string) -> [env, singletonBuffer (STRING (string))]
      | Array  (exprs)        -> case compileArgs (env, exprs) of [env, argsCode] -> [env, argsCode <+ ARRAY (size (exprs))] esac
      | Elem (expr, index)    -> case compileArgs (env, {expr, index}) of [env, argsCode] -> [env, argsCode <+ ELEM] esac
      | ElemRef (expr, index) -> case compileArgs (env, {expr, index}) of [env, argsCode] -> [env, argsCode] esac
      | Sexp (name, exprs)    -> case compileArgs (env, exprs) of [env, argsCode] -> [env, argsCode <+ SEXP (name, size (exprs))] esac
    esac
  }

  var compEnv = initCompEnv ().beginScope.addFun ("read", "$read", 0)
                                         .addFun ("write", "$write", 1)
                                         .addFun ("length", "$length", 1);

  case compile (compEnv, expr) of
    [env, code] -> getBuffer(singletonBuffer (LABEL ("main")) <+ BEGIN ("main", 0, getLocals (env)) <+> code <+ END <+> compileFuns (getFuns (env)))
  esac

}

