-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s, f)    -> sprintf ("LABEL %s, %d", s, f)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  | META (m)         -> sprintf ("META %s", m.string)
  | PATT (p)         -> sprintf ("PATT %s", p.string)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}                  -> m
            | LABEL (lab, _) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl              -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (configuration@[stack, contrStack, state, world], instructions) {
    fun applyInstruction([stack, contrStack, state, world], instruction) {
      -- printf("stev %s\n  stck %s\n  stte %s\n  cstk %s\n", instruction.string, stack.string, state.string, contrStack.string);
      -- printf("stev %s\n  stck %d %s\n", instruction.string, size(stack), stack.string);
      case instruction of
        BINOP(operation) ->
          case stack of
            rhs:lhs:tail ->
              stack := evalOp(operation, lhs, rhs) : tail
          esac |
        PATT(p) ->
          case p of
            Tag(pTag, pSize) ->
              case stack of Sexp(sTag, sValues) : tail ->
                stack := (compare(pTag, sTag) == 0 && pSize == length(sValues)) : tail
              esac |
            Array(pSize) ->
              case stack of arr@#array : tail ->
                stack := (pSize == length(arr)) : tail
              esac
          esac |

        LD(variableName) ->
          stack := lookup(state, variableName) : stack |
        LDA(variableName) ->
          stack := Ref(variableName) : stack |
        ST(variableName) -> 
          case stack of
            value : _ ->
              assign(state, variableName, value);
              stack
          esac |
        STI ->
          case stack of 
            value : Ref(variableName) : tail ->
              assign(state, variableName, value);
              stack := value : tail
          esac |
        STA ->
          case stack of 
            Ref(varName) : value : tail ->
              assign(state, varName, value);
              stack := value : tail |
            arr : index : value : tail ->
              arr[index] := value;
              stack := value : tail
          esac |

        CONST(value) -> 
          stack := (value : stack) |
        STRING(value) ->
          stack := value : stack |
        ARRAY(valuesN) ->
          case take(stack, valuesN) of
            [tail, values] ->
              stack := listArray(values) : tail.tl -- Remove array size from stack by .tl (it is used in x86 to call Barray)
          esac |
        SEXP(name, valuesN) ->
          case take(stack, valuesN) of [tail, values] ->
            stack := Sexp(name, listArray(values)) : tail.tl-- Same reason as in ARRAY
          esac |
        ELEM ->
          case stack of 
            index : Sexp(_, arr) : stackTail ->
              stack := arr[index] : stackTail |
            index : arr : stackTail ->
              stack := arr[index] : stackTail
          esac |
        GLOBAL(_) ->
          skip |
        DROP ->
          case stack of
            head : tail ->
              stack := tail
          esac |
        DUP ->
          case stack of 
            value : tail -> stack := value : value : tail
          esac |

        META(_) ->
          failure("Match failure in stack interpreter\n") |

        BUILTIN(name, argsN) ->
          case take(stack, argsN) of [newStack, vals] ->
            case evalBuiltin(name, vals, world) of [value, newWorld] ->
              stack := value : newStack;
              world := newWorld
            esac
          esac |

        CALL(_, _) -> skip |
        BEGIN(_, _, _) -> skip |
        END -> skip |
        LABEL(_, _) -> skip |
        JMP(_) -> skip |
        CJMP(_, _) -> skip |
        _ -> failure("Unknown instruction '" ++ string(instruction) ++ "' in stack interpreter\n")
      esac;

      [stack, contrStack, state, world]
    }

    fun applyJumps([stack, contrStack, state, world], instruction : instructionsTail) {
      case instruction of
        JMP(labelName) ->
          instructionsTail := env.fromLabel(labelName) |
        CJMP(condition, labelName) ->
          case stack of conditionValue : stackTail ->
            stack := stackTail;
            if (compare(condition, "nz") == 0 && conditionValue != 0) 
            !! (compare(condition, "z")  == 0 && conditionValue == 0) then
              instructionsTail := env.fromLabel(labelName)
            fi
          esac |

        CALL(fName, argsN) ->
          contrStack := [state, instructionsTail] : contrStack;
          instructionsTail := env.fromLabel(fName) |
        BEGIN(label, argsN, localsN) ->
          case take(stack, argsN) of [tail, argVals] ->
            stack := tail;
            state := makeState(argsN, localsN);
            for var i; i := 0, i < argsN, i := i+1 do
              assign(state, Arg(i), argVals[0]);
              argVals := argVals[1]
            od
          esac |
        END ->
          case contrStack of 
            {} -> instructionsTail := {} |
            [prevState, prevInstructions] : tail -> 
              contrStack := tail;
              state := prevState; 
              instructionsTail := prevInstructions
          esac |

        _ -> skip        
      esac;

      [[stack, contrStack, state, world], instructionsTail]
    }

    while size(instructions) > 0 do
      case instructions of instruction : _ ->
        -- printf("stckeval %s\n", string(instruction));
        configuration := applyInstruction(configuration, instruction);

        -- Change remaining instructions if jmp to label occured or just get remaining ones
        case applyJumps(configuration, instructions) of
          [newConf, newInstr] -> 
            configuration := newConf;
            instructions  := newInstr
        esac

      esac
    od;

    configuration
  }
  

  -- printf ("%s\n", showSM (insns));
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
-- fun addVals (env, names) {
--   foldl (fun (env, name) {addVal (env, name)}, env, names)
-- }

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expression) {

  fun bindSymbols(defs) {
    var globals = emptyBuffer();
    environment := foldl(fun([env, globals], def) {
      case def of
        Var(vars) -> 
          if isGlobal(env) then
            globals := foldl(fun(buff, variable) { buff <+ GLOBAL(variable) }, globals, vars)
          fi;
          [env.addVars(vars), globals] |
        Fun(name, args, body) ->
          [case genFunLabel(env, name) of [fLabel, newEnv] ->
            addFun(newEnv, name, fLabel, size(args))
              -- .rememberFun(fLabel, args, body) -- Convenient, but fails 31 test - variables may be not bound yet.
          esac, globals] |
        _ -> failure("Can't bind symbol " ++ def.string ++ "\n")
      esac
    }, [environment, globals], defs);
    globals := environment[1];
    environment := environment[0];

    -- Traverse again to rememberFun
    environment := foldl(fun(env, def) {
      case def of
        Fun(name, args, body) ->
          case lookupFun(env, name) of Fun(fLabel, _) ->
            rememberFun(env, fLabel, args, body)
          esac |
        Var(_) -> env |
        _ -> failure("Can't bind fun symbol " ++ def.string ++ "\n")
      esac
    }, environment, defs);

    globals
  }

  fun compileExprAux(expression) {
    -- case expression of 
    --   Fun(l, a, b, s) -> printf("stex %s\n", string(Fun(l, a, b, "someState"))) |
    --   _               -> printf("stex %s\n", string(expression))
    -- esac;

    case expression of 
      -- Data kinds
      Const(value) -> 
        singletonBuffer(CONST(value)) |
      Var(variableName) ->
        singletonBuffer(LD (lookupVar(environment, variableName))) |
      Ref(variableName) ->
        singletonBuffer(LDA(lookupVar(environment, variableName))) |
      Elem(arrExpr, indexExpr) ->
        compileExprAux(arrExpr) <+> compileExprAux(indexExpr) <+ ELEM |
      ElemRef(arrExpr, arrIndexExpr) ->
        compileExprAux(arrIndexExpr) <+> compileExprAux(arrExpr) |
      String(value) ->
        singletonBuffer(STRING(value)) |
      Array(valueExprs) ->
        foldl(fun(buf, expr) { buf <+> compileExprAux(expr) }, singletonBuffer(CONST(size(valueExprs))), valueExprs) 
          <+ ARRAY(size(valueExprs)) |
      Sexp(name, valueExprs) ->
        foldl(fun(buf, expr) { buf <+> compileExprAux(expr) }, singletonBuffer(CONST(size(valueExprs)+1)), valueExprs) 
          <+ SEXP(name, size(valueExprs)) |

      -- Expressions parsing
      Seq (subexpression1, subexpression2) -> 
        compileExprAux(subexpression1) <+> compileExprAux(subexpression2) |
      Assn (Ref(variableName), expression) ->
        compileExprAux(expression) <+ ST(lookupVar(environment, variableName)) |
      Assn (destination, valueExpr) ->
        compileExprAux(valueExpr) <+> compileExprAux(destination) <+ STA |
      Binop(operation, subexpression1, subexpression2) ->
        compileExprAux(subexpression1) <+> compileExprAux(subexpression2) 
          <+ BINOP(operation) |

      -- Flow control
      While (condition, body) ->
        case genLabels(environment, 2) of 
          [labelStart, labelBody, newEnv] ->
            environment := newEnv;
            singletonBuffer(JMP(labelStart)) <+ LABEL(labelBody, true) 
              <+> compileExprAux(body) <+ LABEL(labelStart, false)
              <+> compileExprAux(condition) <+ CJMP("nz", labelBody)
        esac |
      DoWhile(body, condition) ->
        case genLabels(environment, 1) of [labelBody, newEnv] ->
          environment := newEnv;
          singletonBuffer(LABEL(labelBody, true))
            <+> compileExprAux(body)
            <+> compileExprAux(condition) <+ CJMP("nz", labelBody)
        esac |
      If (condition, consequentExpr, alternativeExpr) ->
        case genLabels(environment, 2) of 
          [labelAlternative, labelEnd, newEnv] -> 
            environment := newEnv;
            compileExprAux(condition)
              <+ CJMP("z", labelAlternative)
              <+> compileExprAux(consequentExpr)
              <+ JMP(labelEnd) <+ LABEL(labelAlternative, false)
              <+> compileExprAux(alternativeExpr)
              <+ LABEL(labelEnd, false)
        esac |
      Call(fName, argExprs) ->
        -- Evaluating arguments
        foldl(fun(insns, argExpr) {
          insns <+> compileExprAux(argExpr)
        }, emptyBuffer(), argExprs)
          <+
        -- Calling
        case fName of 
          "read"   -> BUILTIN(fName, 0) |
          "write"  -> BUILTIN(fName, 1) |
          "length" -> BUILTIN(fName, 1) |
          _ ->
            case lookupFun(environment, fName) of Fun(fLabel, argsN) ->
              CALL(fLabel, argsN)
            esac
        esac |
      Case(scrName, cases) ->
        -- Match last element on the stack with array pattern.
        -- If not matched, jump to the nextCaseLabel.
        fun genArrPatternInsns(pattern, nextCaseLabel, depth) {
          case pattern of
            0 -> emptyBuffer() |
            #box ->    
              foldl(
                fun([index, buffer], pattElem) {
                  [
                    index+1, 
                    buffer <+ DUP 
                      <+ CONST(index) <+ ELEM -- Take element by index
                      <+> genCasePatternInsns(pattElem, nextCaseLabel, depth+1)
                      <+ DROP -- Drop element of the array
                      -- Drop does not do its work fully here, because we can jump to other case in subpatterns, leaving unnecessary things in stack
                  ]
                },
                [0, emptyBuffer()],
                pattern
              )[1]
          esac
        }
        -- Match last element on the stack with pattern passed as argument.
        -- If not matched, jump to the nextCaseLabel
        fun genCasePatternInsns(pattern, nextCaseLabel, depth) {
          fun getDropSuffix() {
            case depth of
              0 -> "" |
              _ -> "_DROP" ++ string(depth)
            esac
          }

          case pattern of
            Wildcard -> emptyBuffer() |
            Const(x) -> 
              singletonBuffer(DUP) <+ CONST(x) <+ BINOP("==") 
                <+ CJMP("z", nextCaseLabel ++ getDropSuffix()) |
            Array(arr) -> 
              singletonBuffer(DUP) <+ PATT(Array(size(arr))) 
                <+ CJMP("z", nextCaseLabel ++ getDropSuffix()) 
                <+> genArrPatternInsns(arr, nextCaseLabel, depth) |
            Sexp(tag, arr) -> 
              singletonBuffer(DUP) <+ PATT(Tag(tag, size(arr))) 
                <+ CJMP("z", nextCaseLabel ++ getDropSuffix())
                <+> genArrPatternInsns(arr, nextCaseLabel, depth) |
            Named(_, pattern) -> genCasePatternInsns(pattern, nextCaseLabel, depth)
          esac 
        }
        -- Generate instuctions for pattern matching and branch expression.
        -- Jumps to endLabel when successfully matched with the pattern.
        fun genCaseBranchInsns([pattern, expression], endLabel) {
          fun genDropzone(originLabel, depth) {
            case depth of
              0 -> emptyBuffer() |
              _ -> 
                singletonBuffer(
                  LABEL(originLabel ++ "_DROP" ++ string(depth), false)
                ) <+ DROP <+> genDropzone(originLabel, depth-1)
            esac
          }

          fun calcMaxDepth(pattern, depth) {
            fun foldFun (acc, elem) { 
              var tmp = calcMaxDepth(elem, depth);
              case elem of 
                Wildcard -> skip |
                Const(x) -> skip |
                Named(_, _) -> skip |
                _ -> tmp := tmp + 1
              esac;
              if tmp > acc then tmp else acc fi
            }
            case pattern of
              Wildcard -> 0 |
              Const(x) -> 0 |
              Array(arr) -> foldl(foldFun, depth, arr) |
              Sexp(_, arr) -> foldl(foldFun, depth, arr) |
              Named(_, pattern) -> calcMaxDepth(pattern, depth)
            esac 
          }

          case genLabel(environment) of [nextCaseLabel, newEnv] ->
            environment := newEnv;
            genCasePatternInsns(pattern, nextCaseLabel, 0) <+ DROP -- Drop scrutinee that was loaded with LD and is not needed anymore at the beginning of the branch code execution
              <+> compileExprAux(expression) 
              <+ JMP(endLabel) <+> genDropzone(nextCaseLabel, calcMaxDepth(pattern, 0)) -- Dropzone for jumping from pattern matching with depth
              <+ LABEL(nextCaseLabel, false)
          esac
        }

        fun genCaseInsns(currCase : cases, endLabel) {
          genCaseBranchInsns(currCase, endLabel) 
            <+> 
            if cases then 
              genCaseInsns(cases, endLabel) 
            else 
              singletonBuffer(META(1)) <+ DROP
            fi
        }

        case genLabels(environment, 1) of [endLabel, newEnv] ->
          var tmp;
          environment := newEnv;
          tmp := singletonBuffer(LD(lookupVar(environment, scrName))) <+> 
            genCaseInsns(cases, endLabel) <+ LABEL(endLabel, false);
          -- printf("TMP: %s\n", tmp.string);
          tmp
        esac |

      Scope(defs, expr) ->
        var result;
        if size(defs) == 0 then
          compileExprAux(expr)
        else
          var globals;
          environment := beginScope(environment);
          globals := bindSymbols(defs);
          result := globals <+> compileExprAux(expr);
          environment := endScope(environment);
          result 
        fi |
      Fun(fLabel, args, body, fState) ->
        var bodyInsns;
        environment := addArgs(beginFun(environment, fState), args);
        bodyInsns := compileExprAux(body);
        singletonBuffer(LABEL(fLabel, false))
          <+ BEGIN(fLabel, size(args), getLocals(environment))
          <+> bodyInsns
          <+ END |
      Ignore (expression) ->
        compileExprAux(expression) <+ DROP |
      Skip ->
        emptyBuffer() |
      _ -> failure ("Unknown expression in stack machine '" ++ string(expression) ++ "'\n")
    esac
  }

  fun wrapInMainFun(instructions) {
    singletonBuffer(LABEL("main", false)) <+ BEGIN("main", 0, getLocals(environment)) 
      <+> instructions
      <+ END
  }

  fun getFunsInsns([funs, env]) {
    -- printf("Funs %s\n", funs.string);
    environment := env;
    foldl(fun(buffer, function){ buffer <+> compileExprAux(function) }, emptyBuffer(), funs)
  }

  environment := initCompEnv();
  -- Add builtin functions
  environment := foldl(addFun, beginScope(environment), {
    Fun("read", {}),
    Fun("write", {"x"}),
    Fun("length", {"x"})
  });

  getBuffer(wrapInMainFun(compileExprAux(expression)) <+> getFunsInsns(getFuns(environment)))
}

var environment; -- Can't put it as local variable in the function above:(

public fun compileSM (expr) {
  compileExpr(expr)
}
