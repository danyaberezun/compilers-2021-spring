-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | IMM    (n)       -> sprintf ("IMM %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c.string, l)
  | CALL   (f, n, t) -> sprintf ("CALL %s, %d, %s", f, n, t.string)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | LEAVE            -> "LEAVE"
  | END              -> "END"
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STI              -> "STI"
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, cstack, state, world], insns) {
    case insns of
      {}         -> c
    | insn:insns ->
        case insn of
          JMP (l)     -> eval (c, fromLabel (env, l))
        | CJMP (c, l) -> case case (case c of NE -> 1 | E -> 0 esac):stack of 
              0:0:tail  -> [tail, fromLabel (env, l)]
            | 0:_:tail  -> [tail, insns]
            | _:0:tail  -> [tail, insns]
            | _:_:tail  -> [tail, fromLabel (env, l)]
            | _         -> failure ("stack is empty") 
            esac of [stack, insns] -> eval ([stack, cstack, state, world], insns) esac
        | CALL (f, n, Tail) ->  case cstack of
                                  state:cstack -> eval ([stack, cstack, state, world], fromLabel (env, f))
                                | _ -> failure ("cstack is empty")
                                esac
        | CALL (f, n, _) -> eval ([stack, insns:cstack, state, world], fromLabel (env, f))
        | END ->  case cstack of
                    state:ret:cstack -> eval ([stack, cstack, state, world], ret)
                  | _ -> c
                  esac
        | _ -> 
            case case insn of
              BINOP (s) -> case stack of
                r:l:rest -> [(evalOp (s, l, r)):rest, cstack, state, world]
              | _        -> failure ("stack is empty")
              esac
            | DROP -> case stack of
                head:tail -> [tail, cstack, state, world]
              | _         -> failure ("stack is empty")
              esac
            | DUP -> case stack of
                head:tail -> [head:head:tail, cstack, state, world]
              | _         -> failure ("stack is empty")
              esac 
            | LD (x) -> [lookup (state, x):stack, cstack, state, world]
            | ST (x) -> case stack of
                {}        -> failure ("stack is empty")
              | head:tail -> assign (state, x, head); [stack, cstack, state, world]
              esac
            | STI -> case stack of
                x:r:tail -> assign (state, r, x); [x:tail, cstack, state, world]
              | _        -> failure ("stack is empty")  
              esac
            | GLOBAL (x) -> assign (state, Glb (x), 0); [stack, cstack, state, world]
            | LDA (s)   -> [s:stack, cstack, state, world]
            | CONST (n) -> [n:stack, cstack, state, world]
            | IMM (n)   -> [n:stack, cstack, state, world]
            | LABEL (s) -> [stack, cstack, state, world]
            | STRING (s) -> [s:stack, cstack, state, world]
            | ARRAY (n) -> case take (stack, n) of [stack, a] -> [listArray (a):stack, cstack, state, world] esac
            | ELEM -> case stack of
                i:a:stack -> [a[i]:stack, cstack, state, world]
              | _ -> failure ("stack is empty")
              esac
            | STA -> case stack of
                v:i:a:stack -> a[i] := v; [v:stack, cstack, state, world]
              | _ -> failure ("stack is empty")
              esac
            | BEGIN (name, as, ls) -> case makeState (as, ls) of newState ->
                                      case take (stack, as) of [stack, argsl] ->
                                      foldl (fun (i, a) {assign (newState, Arg (i), a); i+1}, 0, argsl);
                                        [stack, state:cstack, newState, world]
                                      esac esac
            | BUILTIN ("read", _) -> case readWorld (world) of [n, w] -> [n:stack, cstack, state, w] esac
            | BUILTIN ("write", _) -> case stack of
                head:tail -> [0:tail, cstack, state, writeWorld (head, world)]
              | _         -> failure ("stack is empty")
              esac
            | BUILTIN ("length", _) -> case stack of
                head:tail -> [length (head):tail, cstack, state, world]
              | _         -> failure ("stack is empty")
              esac
            esac of c -> eval (c, insns) esac
        esac 
    esac
  }
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, fs) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, fs)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : fs)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, fs)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, fs)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, fs)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, fs)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, fs)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, fs)
  }

  -- Enters a function
  fun beginFun () {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, fs)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [fs, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, fs)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, fs)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env) {
  env [6] ()
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (stmt) {
  fun compileList (env, stmts) {
    foldl (fun ([env, code], arg) {
      case inner (env, arg) of [env, c] ->
        [env, code <+> c]
      esac
    }, [env, emptyBuffer ()], stmts)
  }

  fun inner (env, stmt) {
    case stmt of
      Assn (Ref (st), expr) ->  case inner (env, expr) of [env, code] -> 
                                  [env, code <+ ST (lookupVar (env, st))]
                                esac
    | Assn (ElemR (a, i), expr) ->  case inner (env,    a) of [env, code0] ->
                                    case inner (env,    i) of [env, code1] -> 
                                    case inner (env, expr) of [env, code2] -> 
                                      [env, code0 <+> code1 <+> code2 <+ STA]
                                    esac esac esac
    | Assn (st, expr) ->  case inner (env,   st) of [env, code0] ->
                          case inner (env, expr) of [env, code1] -> 
                            [env, code0 <+> code1 <+ STI]
                          esac esac
    | Skip -> [env, emptyBuffer ()]
    | Ignore (expr) ->  case inner (env, expr) of [env, code] ->
                          [env, code <+ DROP]
                        esac
    | Binop (opCode, e0, e1) -> case inner (env, e0) of [env, code0] ->
                                case inner (env, e1) of [env, code1] ->
                                  [env, code0 <+> code1 <+ BINOP (opCode)]
                                esac esac
    | Var (st) -> [env, singletonBuffer (LD (lookupVar (env, st)))]
    | Const (n) -> [env, singletonBuffer (CONST (n))]
    | Imm (n)   -> [env, singletonBuffer (IMM (n))]
    | Ref (st) -> [env, singletonBuffer (LDA (lookupVar (env, st)))]
    | Array (exprs) -> case compileList (env, exprs) of [env, code] -> [env, code <+ ARRAY (size (exprs))] esac
    | String (s) -> [env, singletonBuffer (STRING (s))]
    | Elem (a, i) ->  case inner (env, a) of [env, code0] ->
                      case inner (env, i) of [env, code1] ->
                        [env, code0 <+> code1 <+ ELEM]
                      esac esac
    | Seq (stmt0, stmt1) -> case inner (env, stmt0) of [env, code0] -> 
                            case inner (env, stmt1) of [env, code1] ->
                              [env, code0 <+> code1]
                            esac esac
    | If (cond, stmt0, stmt1) ->  case inner (env, cond) of [env, code] ->
                                  case inner (env, stmt0) of [env, code0] ->
                                  case genLabel (env) of [lbl0, env] ->
                                  case inner (env, stmt1) of [env, code1] ->
                                  case genLabel (env) of [lbl1, env] -> 
                                    [env, code <+ 
                                          CJMP (E, lbl0) <+> code0 <+ JMP (lbl1) <+ 
                                          LABEL (lbl0) <+> code1 <+ LABEL (lbl1)]
                                  esac esac esac esac esac
    | While (cond, body) -> case genLabel (env) of [lbl0, env] ->
                            case inner (env, body) of [env, code0] ->
                            case genLabel (env) of [lbl1, env] ->
                            case inner (env, cond) of [env, code] ->
                              [env, singletonBuffer (JMP (lbl1)) <+ 
                                    LABEL (lbl0) <+> code0 <+ 
                                    LABEL (lbl1) <+> code <+ CJMP (NE, lbl0)]
                            esac esac esac esac
    | DoWhile (body, cond) -> case genLabel (env) of [lbl, env] ->
                              case inner (env, body) of [env, code0] ->
                              case inner (env, cond) of [env, code] ->
                                [env, singletonBuffer (LABEL (lbl)) <+> code0 <+> 
                                      code <+ CJMP (NE, lbl)]
                              esac esac esac
    | Scope (defs, body) -> case enterScope (env) of env ->
                            case foldl (fun (env, d) {case d of 
                                Func (name, args, body) ->
                                  case genFunLabel (env, name) of [label, env] -> 
                                  case addFun (env, name, label, size (args)) of env ->
                                  case rememberFun (env, label, args, body) of env ->
                                    env 
                                  esac esac esac
                              | _ -> addVar (env, d)
                              esac}, env, defs) of env ->
                            case if isGlobal (env) then foldl (fun (code, d) {case d of
                                Func (name, args, body) -> code
                              | _                       -> code <+ GLOBAL (d)
                              esac}, emptyBuffer (), defs) else emptyBuffer () fi of globals ->
                            case inner (env, body) of [env, code] ->
                            if isGlobal (env)
                              then  case BEGIN ("main", 0, getLocals (env)) of begin ->
                                    case getFuns (env) of [fs, env] ->
                                    case foldl (fun ([env, code], Fun (fLabel, args, body, state)) {
                                        case beginFun (env) of env ->
                                        case addArgs (env, args) of env ->
                                        case inner (env, body) of [env, code0] ->
                                        case BEGIN (fLabel, size (args), getLocals (env)) of begin ->
                                          [env, code <+ LABEL (fLabel) <+ begin <+> code0 <+ END] 
                                        esac esac esac esac
                                      }, [env, emptyBuffer ()], fs) of [env, codeF] ->
                                      [env, globals <+ LABEL ("main") <+ begin <+> code <+ END <+> codeF]
                                    esac esac esac
                              else  case leaveScope (env) of env ->
                                      [env, code]
                                    esac
                            fi
                            esac esac esac esac
    | Builtin (f, args) ->  case size (args) of argn ->
                            case compileList (env, args) of [env, args] ->
                              [env, args <+ BUILTIN (f, argn)]
                            esac esac
    | Call (f, args, t) ->  case compileList (env, args) of [env, args] ->
                            case lookupFun (env, f) of Fun (label, argn) ->
                              [env, args <+ CALL (label, argn, t)]
                            esac esac
    esac
  }
  getBuffer (inner (initCompEnv (), stmt) [1])
}
