-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment:e keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
  case insns of 
      READ : other -> case readWorld( world) of [value, new_world] -> eval (
        env,
        [value : stack, state, new_world],
        other
      ) esac
    | WRITE : other -> case stack of top : other_stack -> eval (
        env,
        [other_stack, state, writeWorld (top, world)],
        other
      ) esac
    | BINOP (oper) : other -> case stack of b : a : other_stack -> eval (
        env,
        [binop (oper, a, b) : other_stack, state, world],
        other
      ) esac
    | LD (name) : other -> eval (
        env,
        [state (name) : stack, state, world],
        other
      )
    | LDA (x) : other -> eval (
        env,
        [x : stack, state, world],
        other
      )
    | ST (name) : other -> case stack of top : other_stack -> eval (
        env,
        [other_stack, state <- [name, top], world],
        other
      ) esac
    | STI : other -> case stack of top : x : other_stack -> eval (
        env,
        [top : other_stack, state <- [x, top], world],
        other
    ) esac
    | CONST (value) : other -> eval (
        env,
        [value : stack, state, world],
        other
      )
    | LABEL (label) : other -> eval (
        env,
        c,
        other
      )
    | JMP (label) : other -> eval (
        env,
        c,
        fromLabel (env, label)
      )
    | CJMP (cond, label) : other -> case stack of top : other_stack -> (
        var need_jump = case cond of 
            "nz" -> top != 0
          | "z" -> top == 0
          | _ -> failure ("unrecognized condition")
        esac;
        if need_jump then
          eval (env, [other_stack, state, world], fromLabel (env, label))
        else
          eval (env, [other_stack, state, world], other)
        fi
      ) esac
    | DUP : other -> case stack of top : other_stack -> eval (
        env, 
        [top : stack, state, world], 
        other
      ) esac
    | DROP : other -> case stack of top : other_stack -> eval (
        env, 
        [other_stack, state, world], 
        other
      ) esac 
    | _ -> [stack, state, world]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

fun cmpIf(env, e, s1, s2){
  case s2 of
    Skip ->
      var ls = genLabels(env, 1);
      var p = compileSMBuf (ls[1], s1);

      [p[0], compileSMBuf(p[0], e)[1]
        <+  CJMP ("z", ls[0])
        <+> p[1]
        <+  LABEL (ls[0])
      ]
  | _ ->
      var ls = genLabels(env, 2);
      var p2 = compileSMBuf(ls[2], s2);
      var p1 = compileSMBuf(p2[0], s1);

      [p1[0], compileSMBuf(p1[0], e)[1]
        <+  CJMP ("nz", ls[0])
        <+> p2[1]
        <+  JMP (ls[1])
        <+  LABEL (ls[0])
        <+> p1[1]
        <+  LABEL (ls[1])
      ]
  esac
}

fun compileSMBuf(env, stmt){
  case stmt of
    Assn (s, e) -> case s of 
        Ref (s) -> [env, compileSMBuf(env, e)[1] <+ DUP <+ ST(s)]
      | _ -> 
          var s1 = compileSMBuf(env, s);
          var e1 = compileSMBuf(s1[0], e);
          [s1[0], s1[1] <+> e1[1] <+ STI]
      esac



  | Seq (e1,e2) ->
      var p1 = compileSMBuf(env, e1);
      var p2 = compileSMBuf(p1[0], e2);
      [p2[0], p1[1] <+> p2[1] ]

  | Skip -> [env, emptyBuffer()]
  | Read (x) -> case x of
        Ref(x) -> [env, listBuffer ({READ, ST(x)})]
      | _ -> failure("Read - Not Ref IN\n")
      esac    
  | Write (e) -> [env, compileSMBuf(env, e)[1] <+ WRITE]



  | Var (x) -> [env, singletonBuffer(LD (x))]
  | Const (n) -> [env, singletonBuffer(CONST (n))]
  | Ref (x) -> [env, singletonBuffer(LDA (x))]

  | Binop (op, e1, e2) -> 
      var p1 = compileSMBuf(env, e1);
      var p2 = compileSMBuf(p1[0], e2);
      [p2[0], p1[1] <+> p2[1] <+ BINOP (op)]
  
  | Ignor (x) -> 
      var p = compileSMBuf (env, x);
      [p[0], p[1] <+ DROP]
      

  | While (e1, e2) -> 
      var ls = genLabels(env, 2);
      var p = compileSMBuf (ls[2], e2);
      
      [p[0], emptyBuffer()
        <+  JMP (ls[0])
        <+  LABEL (ls[1])
        <+> p[1]
        <+  LABEL (ls[0])
        <+> compileSMBuf (p[0], e1)[1]
        <+  CJMP ("nz", ls[1])
      ]
  | If (e, s1, s2) -> cmpIf (env, e, s1, s2)

  | _ -> failure("\n\nFTF:  %s\n\n", stmt.string)

  esac
}

public fun compileSM (stmt) {
  getBuffer (compileSMBuf (initCompEnv(), stmt).snd)
} 