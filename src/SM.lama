-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
  case insns of
    {} -> c
  | JMP (l) : _                -> eval (env, c, fromLabel (env, l))
  | CJMP (cond, l) : insnsTail -> 
      case stack of 
        z:s -> if (compare(cond, "nz") == 0 && z != 0) !! (compare(cond, "z") == 0 && z == 0) 
               then eval (env, [s, state, world], fromLabel (env, l))
               else eval (env, [s, state, world], insnsTail)
               fi
      esac
  | i : insnsTail -> 
      var newConfiguration = 
        case i of
          READ      -> case readWorld(world) of [n, w] -> [n:stack, state, w] esac
        | WRITE     -> case stack of n:tail  -> [tail, state, writeWorld(n, world)] esac
        | BINOP (s) -> 
            case stack of 
              y:x:tail  -> [evalOp (s, x, y):tail, state, world]
            esac
        | LD    (x) -> [state(x):stack, state, world]
        | LDA   (x) -> [Ref(x):stack, state, world]
        | ST    (x) -> case stack of v:tail -> [stack, state <- [x, v], world] esac
        | STI       -> case stack of v:Ref(x):tail -> [v:tail, state <- [x, v], world] esac
        | CONST (n) -> [n:stack, state, world]
        | LABEL (_) -> c
        | DROP      -> case stack of n:tail -> [tail, state, world] esac
        esac;

      eval(env, newConfiguration, insnsTail)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (expression) {
  fun compile(env, expression) {
    case expression of
        Const (value) -> [env, singletonBuffer (CONST (value))]
      | Var (x) -> [env, singletonBuffer (LD (x))]
      | Ref (x) -> [env, singletonBuffer (LDA (x))]
      | Binop (op, left, right) -> 
          case compile (env, left) of
            [env1, leftCode] ->
              case compile (env1, right) of
                [newEnv, rightCode] -> [newEnv, leftCode <+> rightCode <+ BINOP (op)]
              esac
          esac
      | Skip              -> [env, emptyBuffer ()]
      | Assn (l, r)       -> 
          case compile(env, l) of
            [env1, lCode] ->
              case compile (env1, r) of
                [newEnv, rCode] -> [newEnv, lCode <+> rCode <+ STI]
              esac
          esac
      | Read (x)          -> [env, singletonBuffer (READ) <+ ST (x) <+ DROP]
      | Write (expr)      -> case compile (env, expr) of [newEnv, code] -> [newEnv, code <+ WRITE] esac
      | Seq (stm1, stm2)  -> 
          case compile(env, stm1) of
            [env1, stm1Code] ->
              case compile (env1, stm2) of
                [newEnv, stm2Code] -> [newEnv, stm1Code <+> stm2Code]
              esac
          esac
      | If (expr, ifTrue, ifFalse) -> 
          case genLabels (env, 3) of
            [ifTrueLabel, ifFalseLabel, fiLabel, env1] -> 
              case compile (env1, expr) of
                [env2, exprCode] -> 
                  case compile(env2, ifTrue) of
                    [env3, ifTrueCode] -> 
                      case compile(env3, ifFalse) of 
                        [newEnv, ifFalseCode] -> [newEnv, exprCode <+ CJMP ("z", ifFalseLabel) <+ 
                                                          LABEL (ifTrueLabel) <+> ifTrueCode <+ JMP (fiLabel) <+ 
                                                          LABEL (ifFalseLabel) <+> ifFalseCode <+ LABEL (fiLabel)]
                      esac
                  esac  
              esac
          esac
      | While (expr, body) -> 
          case genLabels (env, 2) of
            [condLabel, odLabel, env1] -> 
              case compile(env1, expr) of
                [env2, exprCode] ->
                  case compile (env2, body) of
                    [newEnv, bodyCode] -> [newEnv, singletonBuffer (LABEL (condLabel)) <+> exprCode <+ 
                                                 CJMP ("z", odLabel) <+> bodyCode <+ JMP (condLabel) <+ LABEL (odLabel)]
                  esac
              esac
          esac
      | DoWhile (body, expr) -> 
          case genLabel (env) of
            [bodyLabel, env1] -> 
              case compile(env1, body) of
                [env2, bodyCode] ->
                  case compile (env2, expr) of
                    [newEnv, exprCode] -> [newEnv, singletonBuffer (LABEL (bodyLabel)) <+> bodyCode <+> 
                                                  exprCode <+ CJMP ("nz", bodyLabel)]
                  esac
              esac
        esac
      | Ignore (expr) -> case compile (env, expr) of [newEnv, code] -> [newEnv, code <+ DROP] esac
    esac
  }

  getBuffer (compile(initCompEnv (), expression)[1])
}
