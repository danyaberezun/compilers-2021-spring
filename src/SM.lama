-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    Read      -> sprintf ("READ")
  | Write     -> sprintf ("WRITE")
  | Binop (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | Const (n) -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  -- foldl (evalInsn, c, insns)
  fun oldInsnsCheck (c, insn) {
    case insn of
        Read -> (
          var newWorld = readWorld(c[2]);
          [newWorld[0] : c[0], c[1], newWorld[1]]
        ) |
        -- stack top : end
        Write -> [c[0].tl, c[1], writeWorld (c[0].hd, c[2])] |
        -- stack sec : fst : end
        Binop (s) -> [evalOp (s, c[0].tl.hd, c[0].hd) : c[0].tl.tl, c[1], c[2]] |
        LD (x) -> [c[1] (x) : c[0], c[1], c[2]] |
        -- stack top : end
        ST (x) -> [c[0].tl, c[1] <- [x, c[0].hd], c[2]] |
        Const (n) -> [n : c[0], c[1], c[2]] |
        _ -> [c[0], c[1], c[2]]
    esac
  }

  fun newInsnsCheck (c, insns) {
    case insns.hd of
      JMP (l) -> [[c[0], c[1], c[2]], env.fromLabel (l)] |
      CJMP (cond, l) -> (
        if (compare("nz", cond) == 0 && c[0].hd != 0 !! compare("z", cond) == 0 && c[0].hd == 0)
        then [[c[0].tl, c[1], c[2]], env.fromLabel (l)]
        else [[c[0].tl, c[1], c[2]], insns.tl]
        fi
      ) |
      _ -> [[c[0], c[1], c[2]], insns.tl]
    esac
  }

  while size(insns) > 0 do
    -- printf("%s\n", insns.hd.string);
    case insns of
      _ -> (
        var newData = newInsnsCheck (oldInsnsCheck (c, insns.hd), insns);
        c := newData[0];
        insns := newData[1]
      )
    esac
  od;
  c
}


-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  getBuffer (compileExprForBuffer (expr))
}

fun compileExprForBuffer (expr) {
  case expr of
    Var (v) -> singletonBuffer (LD (v)) |
    Const (c) -> singletonBuffer (Const (c)) |
    Binop (s, e1, e2) -> compileExprForBuffer(e1) <+> compileExprForBuffer (e2) <+> singletonBuffer (Binop (s))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  getBuffer (compileSMForBuffer (stmt, initCompEnv ())[0])
}

public fun compileSMForBuffer (stmt, env) {
  case stmt of
    Assn (s, e) -> [compileExprForBuffer(e) <+> singletonBuffer (ST (s)), env] |
    Seq (st1, st2) ->
      var newData = compileSMForBuffer (st1, env);
      var insns = newData[0];
      newData := compileSMForBuffer (st2, newData[1]);
      [insns.concatBuffer(newData[0]), newData[1]] |
    Skip -> [emptyBuffer (), env] |
    Read (s) -> [singletonBuffer (Read) <+> singletonBuffer (ST (s)), env] |
    Write (e) -> [compileExprForBuffer (e) <+> singletonBuffer (Write), env] |
    While (c, s) ->
      case env.genLabels(2) of [l1, l2, newEnv] ->
        var newData = compileSMForBuffer (s, newEnv);
        [singletonBuffer (JMP (l1)) <+ LABEL (l2) <+> newData[0] <+ LABEL (l1)
          <+> compileExprForBuffer (c) <+ CJMP ("nz", l2), newData[1]]
      esac |
    DoWhile(s, c) ->
      case env.genLabels(1) of [l, newEnv] ->
        var newData = compileSMForBuffer (s, newEnv);
        [singletonBuffer (LABEL (l)) <+> newData[0] <+> compileExprForBuffer (c) <+ CJMP ("nz", l), newData[1]]
      esac |
    If (c, st1, st2) ->
      case env.genLabels(2) of [l1, l2, newEnv] ->
        var newData = compileSMForBuffer (st1, newEnv);
        var insns = compileExprForBuffer (c) <+ CJMP ("z", l1) <+> newData[0];
        newData := compileSMForBuffer (st2, newData[1]);
        [insns <+ JMP (l2) <+ LABEL (l1) <+> newData[0] <+ LABEL (l2), newData[1]]
      esac
  esac
}