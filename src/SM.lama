-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl (fun ([s, st, w], insn) {
    case insn of
      READ          -> case readWorld (w) of [x, w0] -> [x : s, st, w0] esac
    | WRITE         -> case s of value : rest -> [rest, st, writeWorld (value, w)] esac
    |	BINOP (op)    -> case s of rExpr : lExpr : rest -> [binOp (op, lExpr, rExpr) : rest, st, w] esac
    |	LD    (vr)    -> [st (vr) : s, st, w]
    |	ST    (vr)    -> case s of value : rest -> [rest, st <- [vr, value], w] esac
    | CONST (const) -> [const : s, st, w]
    esac
  }, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

var compileExprInner = fun (expr) {
  case expr of
    Var   (vr) 		           -> singletonBuffer (LD (vr))
  | Const (const) 		       -> singletonBuffer (CONST (const))
  | Binop (op, lExpr, rExpr) -> compileExprInner (lExpr) <+> compileExprInner (rExpr) <+ BINOP (op)
  esac
};

var compileSMInner = fun (stmt) {
  case stmt of
    Assn  (vr, expr)     -> compileExprInner (expr) <+ ST (vr)
  | Seq   (stmt1, stmt2) -> compileSMInner (stmt1) <+> compileSMInner (stmt2)
  | Skip 				         -> emptyBuffer ()
  |	Read  (vr) 		       -> listBuffer ({READ, ST (vr)})
  | Write (expr) 	     	 -> compileExprInner (expr) <+ WRITE
  esac
};

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  getBuffer (compileExprInner (expr))
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
 getBuffer (compileSMInner (stmt))
}
