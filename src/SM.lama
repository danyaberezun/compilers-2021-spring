-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Shows a location (a reference to function argument, local or global variable)
fun showLoc (d) {
  case d of
    Arg (i) -> sprintf ("arg[%d]", i)
  | Loc (i) -> sprintf ("loc[%d]", i)
  | Glb (x) -> x
  esac
}

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    -- printf("IN %s\n", showLoc (loc));
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun assingArgs (state, argValues) {
    foldl (
      fun (idx, curArg) {
        assign (state, Arg (idx), curArg);
        idx + 1
      },
      0,
      argValues
    )
  }

  -- Return pair ot new context and next commands
  fun evalCommand (c@[stack, callStack, state, world], command, commandTail) {
    case command of 
      READ -> 
      case readWorld (world) of [value, newWorld] ->
        [[value:stack, callStack, state, newWorld], commandTail]
      esac
    | WRITE -> (
        case stack of 
          value:newStack -> (
            var newWorld = writeWorld (value, world);
            [[newStack, callStack, state, newWorld], commandTail]
        )
        | _ -> failure ("Got empty stack to WRITE")
        esac
    )
    | BINOP (opStr) -> (
        case stack of
          snd:fst:rest -> (
            var value = evalOp (opStr, fst, snd);
            [[value:rest, callStack, state, world], commandTail]
        )
        | _ -> failure ("Less than 2 elements on stack for BINOP")
        esac
    )
    | LD (loc) -> (
        -- printf("BEFORE %s\n", showLoc (loc));
        [[lookup (state, loc):stack, callStack, state, world], commandTail]
    )
    | ST (loc) -> (
      case stack of
        varValue:tail -> (  
          assign (state, loc, varValue);
          [[stack, callStack, state, world], commandTail]
      )
      | _ -> failure ("Got empty stack for ST")
      esac
    )
    | CONST (value) -> [[value:stack, callStack, state, world], commandTail]
    | JMP (label) -> [c, fromLabel (env, label)]
    | LABEL (_) -> [c, commandTail]
    | CJMP (type, label) -> (
      case stack of
        head:tail -> (
          var nextCommands = if (compare (type, "z") == 0 && head == 0)
                             !! (compare (type, "nz") == 0 && head != 0) then
                               fromLabel (env, label)
                             else
                               commandTail
                             fi;
          [[tail, callStack, state, world], nextCommands]
      )
      | _ -> failure ("Got empty stack for CJMP")
      esac
    )
    | DROP -> 
      case stack of
        head:tail -> [[tail, callStack, state, world], commandTail]
      | _ -> failure ("Got empty stack for DROP")
      esac
    | DUP ->
      case stack of
        head:tail -> [[head:stack, callStack, state, world], commandTail]
      | _ -> failure ("Got empty stack for DUP")
      esac
    | LDA (loc) -> [[Ref (loc):stack, callStack, state, world], commandTail]
    | STI -> 
      case stack of
        v:Ref (loc):tail -> (
          assign (state, loc, v);
          [[v:tail, callStack, state, world], commandTail]
        )
      | _ -> failure ("Too small stack for STI")
      esac
    | CALL (fLabel, agrsCnt) -> [[stack, [state, commandTail]:callStack, state, world], fromLabel (env, fLabel)]
    | BEGIN (_, argsCnt, localsCnt) ->
      case take (stack, argsCnt) of [newStack, argValues] ->
        var newState = makeState (argsCnt, localsCnt);
        assingArgs (newState, argValues);
        [[newStack, callStack, newState, world], commandTail]
      esac
    | END -> 
      case callStack of
        [prevState, nextCommands] : prevCallStack -> [[stack, prevCallStack, prevState, world], nextCommands]
      | {} -> [[stack, {}, state, world], {}]
      esac
    | GLOBAL (varName) -> (
        assign (state, Glb (varName), 0);
        [c, commandTail]
      )
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
    case insns of
      {} -> c
    | insn : insnTail ->
      case evalCommand (c, insn, insnTail) of [c1, newInsns] ->
        eval (c1, newInsns)
      esac
    esac
  }
  (* End *)
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

fun rememberFuncs (env, labeledFuncs) {
  case labeledFuncs of
    {} -> env
  | LabeledFun (fLabel, args, body) : tailFuncs -> 
      var env1 = rememberFun (env, fLabel, args, body);
      rememberFuncs (env1, tailFuncs)
  esac
}

fun separateDefenitions(defs) {
  foldl (
    fun ([vars, funcs], def) {
      case def of
        Var (varNames) -> [vars <+> listBuffer (varNames), funcs]
      | func@Fun (_, _, _) -> [vars, func : funcs]
      esac
    },
    [emptyBuffer (), {}],
    defs
  )
}

fun addFuncDefs(env, funcDefs) {
  foldl (
    fun ([curEnv, curFuncs], Fun (name, args, body)) {
      case genFunLabel (curEnv, name) of [fLabel, curEnv1] ->
        var env1 = addFun (curEnv1, name, fLabel, size (args));
        [env1, LabeledFun (fLabel, args, body) : curFuncs]
      esac
    },
    [env, {}],
    funcDefs
  )
}

fun addDefenitions(env, defs) {
  case separateDefenitions (defs) of [varDefsBuff, funcDefs] ->
    var varNames = getBuffer (varDefsBuff);
    var env1 = addVars (env, varNames);
    case addFuncDefs (env1, funcDefs) of [env2, labeledFuncs] ->
      var prologCode = if (isGlobal (env2)) then 
                         listBuffer (map (fun (name) {GLOBAL (name)}, varNames))
                       else 
                         emptyBuffer ()
                       fi;
      var env3 = rememberFuncs (env2, labeledFuncs);
      [env3, prologCode]
    esac
  esac
}

fun compileSMBuffList(env, stmts) {
  foldl (
    fun ([curEnv, curCode], stmt) {
      case compileSMBuff (curEnv, stmt) of [newEnv, newCode] ->
        [newEnv, curCode <+> newCode]
      esac
    },
    [env, emptyBuffer ()],
    stmts
  )
}

fun compileSMBuff (env, stmt) {
  case stmt of
    Var (varName) ->
      var loc = lookupVar (env, varName);
      [env, singletonBuffer (LD (loc))]
  | Const (c) -> [env, singletonBuffer (CONST (c))]
  | Binop (opStr, l, r) -> 
    case compileSMBuff (env, l) of [env1, codeL] ->
    case compileSMBuff (env1, r) of [env2, codeR] ->
      [env2, codeL <+> codeR <+ BINOP (opStr)]
    esac esac
  | Assn (e0, e1) -> 
    case compileSMBuff (env, e0) of [env1, code0] ->
    case compileSMBuff (env1, e1) of [env2, code1] ->
      [env2, code0 <+> code1 <+ STI]
    esac esac
  | Read (e) -> 
    case compileSMBuff (env, e) of [env1, codeE] ->
      [env1, codeE <+ READ <+ STI <+ DROP]
    esac
  | Write (expr) -> 
    case compileSMBuff (env, expr) of [env1, code] -> 
      [env1, code <+ WRITE]
    esac
  | Skip -> [env, emptyBuffer ()]
  | Seq (x, y) -> 
    case compileSMBuff (env, x) of [env1, codeX] ->
    case compileSMBuff (env1, y) of [env2, codeY] ->
      [env2, codeX <+> codeY]
    esac esac
  | If (cond, trueStmt, falseStmt) -> 
    case genLabels (env, 2) of [falseLabel, exitLabel, env0] ->
    case compileSMBuff (env0, cond) of [env1, condCode] ->
    case compileSMBuff (env1, trueStmt) of [env2, trueStmtCode] ->
    case compileSMBuff (env2, falseStmt) of [env3, falseStmtCode] ->
      var newCode = condCode
                  <+ CJMP ("z", falseLabel) 
                  <+> trueStmtCode
                  <+ JMP (exitLabel)
                  <+ LABEL (falseLabel)
                  <+> falseStmtCode
                  <+ LABEL (exitLabel);
      [env3, newCode]
    esac esac esac esac
  | While (cond, body) -> 
    case genLabels (env, 2) of [condLabel, exitLabel, env0] ->
    case compileSMBuff (env0, cond) of [env1, condCode] ->
    case compileSMBuff (env1, body) of [env2, bodyCode] ->
      var newCode = singletonBuffer (LABEL (condLabel))
                  <+> condCode
                  <+ CJMP ("z", exitLabel)
                  <+> bodyCode
                  <+ JMP (condLabel)
                  <+ LABEL (exitLabel);
      [env2, newCode]
    esac esac esac
  | DoWhile (body, cond) -> 
    case genLabel (env) of [bodyLabel, env0] ->
    case compileSMBuff (env0, cond) of [env1, condCode] ->
    case compileSMBuff (env1, body) of [env2, bodyCode] ->
      var newCode = singletonBuffer (LABEL (bodyLabel))
                  <+> bodyCode
                  <+> condCode
                  <+ CJMP ("nz", bodyLabel);
      [env2, newCode]
    esac esac esac
  | Ref (x) -> 
      var loc = lookupVar (env, x);
      [env, singletonBuffer (LDA (loc))]
  | Ignore (e) -> 
    case compileSMBuff (env, e) of
      [env1, code] -> [env1, code <+ DROP]
    esac
  | Scope (defs, expr) -> 
      var env1 = beginScope (env);
      case addDefenitions(env1, defs) of [env2, prologCode] ->
      case compileSMBuff (env2, expr) of [env3, exprCode] ->
        [endScope (env3), prologCode <+> exprCode]
      esac esac
  | Call (fName, argExprs) ->
    case lookupFun (env, fName) of Fun (fLabel, argsCnt) ->
    case compileSMBuffList (env, argExprs) of [env2, argsCode] ->
      [env2, argsCode <+ CALL (fLabel, argsCnt)]
    esac esac
  esac
}

fun compileFun(env, Fun (fLabel, args, body, state)) {
  var env1 = beginFun (env, state);
  var env2 = addArgs (env1, args);
  case compileSMBuff (env2, body) of [env3, bodyCode] ->
    var funcCode = singletonBuffer (LABEL (fLabel)) 
                   <+ BEGIN (fLabel, size (args), getLocals (env3))
                   <+> bodyCode
                   <+ END;
    [env3, funcCode]
  esac
}

fun compileFuncs(env, funcs) {
  foldl (
    fun ([curEnv, curCode], func) {
      case compileFun (curEnv, func) of [newEnv, funcCode] ->
        [newEnv, curCode <+> funcCode]
      esac
    },
    [env, emptyBuffer ()],
    funcs
  )
}

fun compileFuncsRecurively(env) {
  var curCode = emptyBuffer ();
  case getFuns (env) of [funcs, env1] ->
    var curFuncs = funcs;
    var curEnv = env1;
    while size (curFuncs) > 0 do
      case compileFuncs (curEnv, curFuncs) of [tmpEnv, newCode] ->
        curCode := curCode <+> newCode;
        case getFuns (tmpEnv) of [newFuncs, newEnv] ->
          curFuncs := newFuncs;
          curEnv := newEnv
        esac
      esac
    od;
    curCode
  esac
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (expr) {
  var env = initCompEnv ();
  case compileSMBuff (env, expr) of [env1, mainCode] ->
    var functionsCode = compileFuncsRecurively (env1);
    var code = singletonBuffer (LABEL ("main"))
               <+ BEGIN ("main", 0, getLocals (env1))
               <+> mainCode
               <+ END
               <+> functionsCode;
    var res = getBuffer (code);
    -- printf("%s\n", showSM (res));
    res
  esac
}
