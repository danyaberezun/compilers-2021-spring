-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalBinopInStack (op, r:l:stk) {
    {op.evalBinop(l, r)} +++ stk
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stk, st, wd], insns) {
  var insn = insns[0];

  var cfg = case insn of
    BINOP (op) -> [op.evalBinopInStack (stk), st, wd]
  | CONST (n)  -> [{n} +++ stk, st, wd]
  | READ       ->
      var read = readWorld (wd);
      [{read.fst} +++ stk, st, read.snd]
  | WRITE      -> [stk.tl, st, writeWorld (stk[0], wd)]
  | LD    (x)  -> [{st (x)} +++ stk, st, wd]
  | ST    (x)  -> [stk.tl, st <- [x, stk.fst], wd]
  | _          -> failure ("Invalid instruction\n")
  esac;

  if insns.size > 1 then cfg.eval (insns.tl)
  else cfg fi
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

fun compileExprBuf (expr) {
  case expr of
    Var   (vn)       -> LD (vn).singletonBuffer
  | Const (n)        -> CONST (n).singletonBuffer
  | Binop (op, l, r) -> l.compileExprBuf
                        <+> r.compileExprBuf
                        <+ BINOP (op)
  | _                -> failure ("Invalid expression\n")
  esac
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  compileExprBuf (expr).getBuffer
}

fun compileSMBuf (stmt) {
  case stmt of
    Assn  (vn, expr) -> compileExprBuf (expr) <+ ST (vn)
  | Read  (vn)       -> READ.singletonBuffer <+ ST (vn)
  | Write (expr)     -> compileExprBuf (expr) <+ WRITE
  | Seq   (l, r)     -> compileSMBuf (l) <+> compileSMBuf (r)
  | Skip             -> emptyBuffer ()
  | _                -> failure ("Invalid statement\n")
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  compileSMBuf (stmt).getBuffer
}
