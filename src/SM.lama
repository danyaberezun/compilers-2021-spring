-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl (fun (c, insn) {
		case insn of
      READ          -> var rdRes = readWorld (c[2]); [rdRes[0]:c[0], c[1], rdRes[1]]
    | WRITE         -> case c[0] of value:rest -> [rest, c[1], writeWorld (value, c[2])] esac
    |	BINOP (op)    -> case c[0] of rExpr:lExpr:rest -> [binOp (op, lExpr, rExpr):rest, c[1], c[2]] esac
		|	LD    (vr)    -> [c[1](vr):c[0], c[1], c[2]]
		|	ST    (vr)    -> case c[0] of value:rest -> [rest, c[1] <- [vr, value], c[2]] esac
    | CONST (const) -> [const:c[0], c[1], c[2]]
    esac
  }, c, getBuffer(insns))
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
		Var   (vr) 		           -> singletonBuffer (LD (vr))
  | Const (const) 		       -> singletonBuffer (CONST (const))
	| Binop (op, lExpr, rExpr) -> compileExpr (lExpr) <+> compileExpr (rExpr) <+ BINOP (op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
 		 	Assn  (vr, expr)     -> compileExpr (expr) <+ ST (vr)
    | Seq   (stmt1, stmt2) -> compileSM (stmt1) <+> compileSM (stmt2)
    | Skip 				         -> emptyBuffer ()
    |	Read  (vr) 		       -> listBuffer ({READ, ST (vr)})
    | Write (expr) 	     	 -> compileExpr (expr) <+ WRITE
  esac
}
