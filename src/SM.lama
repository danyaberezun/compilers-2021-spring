-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl (fun([stack, state, world], insn){
    case insn of 
      BINOP (op) -> case stack of
        right:left:newStack -> var head = case op of
          "+" -> left + right |
          "-" -> left - right |
          "*" -> left * right |
          "/" -> left / right |
          "%" -> left % right |
          "<" -> left < right |
          ">" -> left > right |
          "<=" -> left <= right |
          ">=" -> left >= right |
          "==" -> left == right |
          "!=" -> left != right |
          "&&" -> left && right |
          "!!" -> left !! right |
          _ -> failure ("Bad operation\n")
        esac;
        [head:newStack, state, world]
        |
        _ -> failure ("Empty stack") 
      esac |
      CONST (n) -> [n:stack, state, world] |
      READ -> var newWorld = readWorld (world); [newWorld.fst:stack, state, newWorld.snd] |
      WRITE -> case stack of
        x:xs -> [xs, state, writeWorld (x, world)] |
        _ -> failure ("Empty stack") 
      esac |
      LD (x) -> [state(x):stack, state, world] |
      ST (x) -> case stack of 
        y:ys -> [ys, state <- [x, y], world] |
        _ -> failure ("Empty stack")
      esac |
      _ -> failure ("Eval failure")
    esac
  }, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var (n) -> singletonBuffer (LD (n)) |
    Const (n) -> singletonBuffer (CONST (n)) |
    Binop (op, left, right) -> compileExpr (left) <+> compileExpr (right) <+ BINOP (op) |
    _ -> failure("Bad expression")
  esac
}



fun insideCompileSM(stmt){
  case stmt of 
    Skip -> {} |
    Assn (x, e) -> compileExpr (e) <+ ST (x) |
    Read (x) -> listBuffer ({READ, ST (x)}) |
    Write (e) -> compileExpr (e) <+ WRITE |
    Seq (s1, s2) -> insideCompileSM (s1) <+> insideCompileSM (s2) |
    _ -> failure("Bad statement")
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  getBuffer (insideCompileSM (stmt))
}
