-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of
    BINOP (bp):tl -> 
	    case c[0] of
        y:x:s -> eval (env, [ binop(bp, x,y):s, c[1], c[2]], tl)
      esac
  | CONST (n):tl -> 
      eval(env, [ n:c[0], c[1], c[2]], tl)
  | READ:tl  ->  
      var n;
      n := readWorld (c[2]);
      eval (env, [n[0]:c[0], c[1], n[1]], tl)
  | WRITE:tl -> 
      case c[0] of
        z:s -> eval(env, [s, c[1], writeWorld(z, c[2])], tl)
      esac
  | LD (x):tl -> 
     eval (env, [c[1](x):c[0], c[1], c[2]], tl)
  | ST (x):tl -> 
      case c[0] of
        z:s -> eval (env, [ s, c[1] <- [x, z], c[2]], tl)
      esac
  | 0 -> c
  

  | LABEL (s) :tl ->
      eval (env, c, tl)
  | JMP (l) :tl -> 
      eval (env, c, fromLabel (env, l) )
  
  | CJMP (cond, l) :tl ->
      case c[0] of
        0:tail -> eval (env, [tail, c[1], c[2]], if compare (cond, "z")==0 then fromLabel (env, l) else tl fi)
      | _:tail -> eval (env, [tail, c[1], c[2]], if compare (cond,"nz")==0 then fromLabel (env, l) else tl fi)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
 case expr of
    Var   (x)         -> singletonBuffer(LD (x))
  | Const (n)         -> singletonBuffer(CONST (n))
  | Binop (s, e1, e2) -> compileExpr(e1) <+> compileExpr(e2) <+ BINOP (s)
 esac 
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  getBuffer (cmpSM (initCompEnv(), stmt)[1])
}

fun compileIf(env, expr, s1, s2){
  case s2 of
    Skip ->
      var ls = genLabels(env, 1);
      var p = cmpSM (ls[1], s1);

      [p[0], compileExpr (expr)
        <+  CJMP ("z", ls[0])
        <+> p[1]
        <+  LABEL (ls[0])
      ]
  | _ ->
      var ls = genLabels(env, 2);
      var p2 = cmpSM(ls[2], s2);
      var p1 = cmpSM(p2[0], s1);

      [p1[0], compileExpr (expr)
        <+  CJMP ("nz", ls[0])
        <+> p2[1]
        <+  JMP (ls[1])
        <+  LABEL (ls[0])
        <+> p1[1]
        <+  LABEL (ls[1])
      ]
  esac
}

fun cmpSM(env, stmt){
  case stmt of
    Assn  (s, expr) -> [env, compileExpr(expr) <+ ST (s)]
  | Read  (x)       -> [env, listBuffer ( {READ, ST (x)} )]
  | Write (expr)    -> [env, compileExpr(expr) <+ WRITE]
  | Seq   (s1, s2)  -> 
      var p1 = cmpSM(env, s1);
      var p2 = cmpSM(p1[0], s2);

      [p2[0], p1[1] <+> p2[1] ]

  | Skip            -> [env, emptyBuffer() ]
  | While (expr, s) ->
      var ls = genLabels(env, 2);
      var p = cmpSM (ls[2], s);

      [p[0], emptyBuffer() 
        <+  JMP (ls[0]) 
        <+  LABEL (ls[1]) 
        <+> p[1]
        <+  LABEL (ls[0])
        <+> compileExpr(expr)
        <+  CJMP ("nz", ls[1])
      ] 
  | If (expr, s1, s2) -> compileIf (env, expr, s1, s2)

  esac
}
