-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (configuration, instructions) {
  foldl(fun([stack, state, world], instruction) {
    case instruction of
      READ ->
        var value = readWorld(world);
        world := value.snd;
        value := value.fst;
        stack := value : stack |
      WRITE ->
        case stack of
          value:tail ->
            world := writeWorld(value, world);
            stack := tail
        esac |
      BINOP(operation) ->
        case stack of
          rhs:lhs:tail ->
            stack := (applyBinaryOp(operation, lhs, rhs) : tail)
        esac |
      LD(variableName) ->
        stack := state(variableName) : stack |
      ST(variableName) -> 
        case stack of
          value:tail ->
            state := state <- [variableName, value];
            stack := tail
        esac |
      CONST(value) -> 
        stack := (value : stack) |
      _ -> failure("Unknown instruction '" ++ string(instruction) ++ "' at stack unwrapping\n")
    esac;

    [stack, state, world]
  }, configuration, getBuffer(instructions))
  
  
  -- failure ("SM eval not implemented\n")
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expression) {
  -- printf("stex %s\n", string(expression));

  case expression of 
    Const(value) -> 
      singletonBuffer(CONST(value)) |
    Var(variableName) ->
      singletonBuffer(LD(variableName)) |
    Binop(operation, subexpression1, subexpression2) ->
      compileExpr(subexpression1)
        .concatBuffer(compileExpr(subexpression2)).addBuffer(BINOP(operation)) |
    _ -> failure ("Unknown expression in stack machine '" ++ string(expression) ++ "'\n")
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (statement) {
  -- printf("stck %s\n", string(statement));

  case statement of
    Assn (variableName, expression) -> 
      compileExpr(expression).addBuffer(ST(variableName)) |
    Read (variableName) -> 
      singletonBuffer(READ).addBuffer(ST(variableName)) |
    Write (expression) ->
      compileExpr(expression).addBuffer(WRITE) |
    Seq (substatement1, substatement2) -> 
      compileSM(substatement1).concatBuffer(compileSM(substatement2)) |
    Skip ->
      emptyBuffer() |
    _ -> failure("Unknown statement in stack machine '" ++ string(statement) ++ "'\n")
  esac
}
