-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, [stk, st, wd], insns) {
  var insn = hd $ insns;

  var cfg = case insn of
    BINOP (op) -> [fun (r:l:stk) {evalBinop (op, l, r):stk} (stk), st, wd]
  | CONST (n)  -> [n:stk, st, wd]
  | READ       ->
      var read = readWorld $ wd;
      [read[0]:stk, st, read[1]]
  | WRITE      -> [tl (stk), st, writeWorld (hd (stk), wd)]
  | LD    (x)  -> [st (x):stk, st, wd]
  | ST    (x)  -> [tl (stk), st <- [x, hd (stk)], wd]
  -- A05
  | LABEL (_)    -> [stk, st, wd]
  | JMP   (l)    -> insns := fromLabel (env, l); [stk, st, wd]
  | CJMP  (c, l) -> case c of
        "z"  -> if hd (stk) == 0 then insns := fromLabel (env, l) fi
      | "nz" -> if hd (stk)      then insns := fromLabel (env, l) fi
      esac;
      [tl (stk), st, wd]
  -- END A05
  | _ -> failure ("Invalid instruction: %s\n", string (insn))
  esac;

  if tl $ insns
  then eval (env, cfg, tl (insns))
  else cfg fi
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

fun compileExprBuf (expr) {
  case expr of
    Var   (vn)       -> singletonBuffer $ LD (vn)
  | Const (n)        -> singletonBuffer $ CONST (n)
  | Binop (op, l, r) -> compileExprBuf (l) <+> compileExprBuf (r) <+ BINOP (op)
  | _                -> failure ("Invalid expression: %s\n", string (expr))
  esac
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  compileExprBuf (expr).getBuffer
}

fun compileSMBuf (stmt) {
  case stmt of
    Assn  (vn, expr) -> compileExprBuf (expr) <+ ST (vn)
  | Read  (vn)       -> singletonBuffer (READ) <+ ST (vn)
  | Write (expr)     -> compileExprBuf (expr) <+ WRITE
  | Seq   (l, r)     -> compileSMBuf (l) <+> compileSMBuf (r)
  | Skip             -> emptyBuffer ()
  -- A05
  | If (c, t, f) -> fun ([tl, fl, nenv]) {
        env := nenv;
            compileExprBuf (c)
        <+  CJMP ("z", fl)
        <+> compileSMBuf (t)
        <+  JMP (tl)
        <+  LABEL (fl)
        <+> compileSMBuf (f)
        <+  LABEL (tl)
      } (genLabels (env, 2))
  | While (c, stmt) -> fun ([cl, bl, nenv]) {
        env := nenv;
            singletonBuffer (JMP (cl))
        <+  LABEL (bl)
        <+> compileSMBuf (stmt)
        <+  LABEL (cl)
        <+> compileExprBuf (c)
        <+  CJMP ("nz", bl)
      } (genLabels (env, 2))
  | DoWhile (stmt, c) -> fun ([bl, nenv]) {
        env := nenv;
            singletonBuffer (LABEL (bl))
        <+> compileSMBuf (stmt)
        <+> compileExprBuf (c)
        <+  CJMP ("nz", bl)
      } (genLabel (env))
  -- END A05
  | _ -> failure ("Invalid statement: %s\n", string (stmt))
  esac
}

var env = initCompEnv();

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  compileSMBuf (stmt).getBuffer
}
