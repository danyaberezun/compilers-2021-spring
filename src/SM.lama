-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}



-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, in) {
  case in of
    READ : in     -> eval (env, [readWorld(c[2])[0]:c[0], c[1], readWorld(c[2])[1]], in) |
    WRITE : in    -> eval (env, [c[0].snd, c[1], writeWorld (c[0].fst, c[2])], in) |
    BINOP (op) : in -> eval (env, funcBinop (c, op), in) |
    LD (name) : in -> eval (env, [c[1](name):c[0], c[1], c[2]], in) |
    ST (name) : in -> eval (env, [c[0].snd, c[1] <- [name, c[0].fst], c[2]], in) |
    CONST (value) : in -> eval (env, [value:c[0], c[1], c[2]], in) |
    JMP (hl) : in -> eval (env, c, env[0](hl)) |
    CJMP (cd, hl) : in -> (
                                  var ex = c.fst;
				  var cs = (case case ex of
    					0:ex -> funcEstm([ex, in],[c.fst, env[0](hl)], "X", cd) |
    					_:ex -> funcEstm([ex, in],[c.fst, env[0](hl)], "Y", cd)
  				  esac
				  of
    				  [ex, in] -> [[ex, c.snd, c[2]], in]
  				  esac); 
				  case cs of
                                    [c, in] -> eval (env, c, in)
                                  esac) |
    LABEL (hl) : in -> eval (env, c, in) |
    {}         -> c |
    _ -> failure("Error in eval-no such expr\n")
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const (i)       -> singletonBuffer (CONST (expr.fst)) |
    Var   (i)       -> singletonBuffer (LD (expr.fst)) | 
    Binop (i, n, x) -> compileExpr (expr.snd) <+> compileExpr (expr[2]) <+ BINOP (expr.fst) |
    _               -> failure ("Failure at compileExpr - Incorrect expression for SM\n")
  esac
}

fun funcBinop ([x1:x2:y, st, w], inc) {
  var ex = case inc of
    "+"  -> x2 +  x1 |
    "-"  -> x2 -  x1 |
    "*"  -> x2 *  x1 |
    "/"  -> x2 /  x1 |
    "%"  -> x2 %  x1 |
    ">=" -> x2 >= x1 |
    "&&" -> x2 && x1 |
    "==" -> x2 == x1 |
    "!=" -> x2 != x1 |
    "<"  -> x2 <  x1 |
    "<=" -> x2 <= x1 |
    ">"  -> x2 >  x1 |
    "!!" -> x2 !! x1 |
    _    -> failure ("Failure at funcBinop - Incorrect expression for binop\n")
  esac;
  [ex:y, st, w]
}

fun funcEstm(fstArr, sndArr, mode, cd){
		case mode of
                 "X" -> (case cd of
			"z" -> sndArr |
                 	"nz" -> fstArr
                	 
                	esac)|
                 "Y" -> (case cd of
			"z" -> fstArr |
                 	"nz" -> sndArr
                      	esac)
                esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
fun compileStmt (stmt, x) {
  case stmt of
    Skip         -> [{}, x]                      |
    Assn  (i, n) -> [compileExpr (stmt.snd) <+ ST (stmt.fst), x] |
    Seq   (i, n) -> (case compileStmt (stmt.fst, x) of
    			[x1, x] -> case compileStmt (stmt.snd, x) of
                      			[x2, x] -> [x1 <+> x2, x]
                    			esac
  		    esac) |    
    Read  (i)    -> [listBuffer ({READ, ST (stmt.fst)}), x] |
    Write (i)    -> [compileExpr (stmt.fst) <+ WRITE, x] |
    DoWhile (i, n) -> (case genLabel (x) of
    			[x1, x] ->
      			case compileStmt(stmt.fst, x) of
        		[y, x] -> [singletonBuffer (LABEL (x1)) <+> y <+>
                               compileExpr (stmt.snd) <+ CJMP ("nz", x1),  x]
      			esac
  			esac) |
    While (i, n)   -> (case genLabels (x, 2) of
    			[x2, x1, x] ->
      			case compileStmt(stmt.snd, x) of
        			[y, x] -> [singletonBuffer (JMP (x1)) <+ LABEL (x2) <+> y <+ LABEL (x1) <+>
                        	compileExpr (stmt.fst) <+ CJMP ("nz", x2),  x]
      			esac
  		       esac)  |
    If (i, n, k) ->
      case x.genLabels(2) of [l1, l2, y] ->
        var in = compileExpr (i) <+ CJMP ("z", l1) <+> compileStmt (n, y)[0];
        [in <+ JMP (l2) <+ LABEL (l1) <+>compileStmt (k, compileStmt (n, y)[1])[0] <+ LABEL (l2), compileStmt (k, compileStmt (n, y)[1])[1]]
      esac|
    _            -> failure ("Error in compileStmt-no such stmt\n")
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case compileStmt (stmt, initCompEnv()) of
    [in, i] -> getBuffer (in)
  esac
}

