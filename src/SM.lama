-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
    case insns of 
      BINOP (bp):tl -> 
  	    case st of
          y:x:st -> eval ([ binop(bp, x,y):st, cst, s, w], tl)
        esac
    | GLOBAL (x):tl ->
       assign(s, Glb(x), 0);
       eval(c, tl)
    | CONST (n):tl -> 
        eval([n:st, cst, s, w], tl)
    | READ:tl  ->  
        var n = readWorld (w);
        eval ([n[0]:st, cst, s, n[1]], tl)
    | WRITE:tl -> 
        case st of
          z:st -> eval([st, cst, s, writeWorld(z, w)], tl)
        esac
    | LD (x):tl -> eval ([lookup(s, x):st, cst, s, w], tl)
    | LDA (x): tl -> eval ([x:st, cst, s, w], tl)
    | ST (x):tl -> 
        assign(s, x, st[0]); 
        eval (c, tl)
    | STI :tl ->
        case st of
          v:x:st -> assign(s, x, v); eval ([v:st, cst, s, w], tl)
        esac

    | DUP :tl ->
        case st of
          z:_ -> eval ([ z:st, cst, s, w], tl)
        esac
    | DROP :tl ->
        case st of
          z:st -> eval ([st, cst, s, w], tl)
        esac
  
    | LABEL (s) :tl -> eval (c, tl)
    | JMP (l) :tl -> 
        eval (c, fromLabel (env, l) )
    
    | CJMP (cond, l) :tl ->
        case st of
          0:tail -> eval ([tail, cst, s, w], if compare (cond, "z")==0 then fromLabel (env, l) else tl fi)
        | _:tail -> eval ([tail, cst, s, w], if compare (cond,"nz")==0 then fromLabel (env, l) else tl fi)
        esac

    | CALL (f, l) :tl ->
        eval ([st, s:tl:cst, s, w], fromLabel(env, f))


    | BEGIN (f, a, l) :tl -> 
        s := makeState (a, l);
        case take (st, a) of [st, args] ->
           
           foldl (fun (i, a) {assign (s, Arg (i), a); i+1}, 0, args);
           eval ([st, cst, s, w], tl)
        esac
    | END :tl ->
        case cst of 
          s:ret:cst -> eval ([st, cst, s, w], ret)
        | 0 -> c
        esac
    esac
  }
  (* End *)
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (expr) {
  -----
  fun createFuns([fs, env]){
    var code = emptyBuffer();
    while size(fs) >0 do
      case fs[0] of Fun (l, args, body, st) ->
        env := beginFun (env, st);
        
        case cmpSM(addArgs(beginFun (env, st), args), body) of [env, body] ->
          code := code
                <+  LABEL (l)
                <+  BEGIN (l, size(args), getLocals (env))
                <+> body
                <+  END
          
        esac
      esac;
      fs := fs.tl
    od;
    code
  }
  -----


  getBuffer(
    case cmpSM (initCompEnv(), expr) of [env, code] ->
      emptyBuffer()
        <+  LABEL ("main")
        <+  BEGIN ("main", 0, getLocals(env))
        <+> code
        <+  END
        <+> createFuns(getFuns(env))
    esac
  )
}

fun cmpIf(env, e, s1, s2){
  case s2 of
    Skip ->
      var ls = genLabels(env, 1);
      var p = cmpSM (ls[1], s1);

      [p[0], cmpSM(p[0], e)[1]
        <+  CJMP ("z", ls[0])
        <+> p[1]
        <+  LABEL (ls[0])
      ]
  | _ ->
      var ls = genLabels(env, 2);
      var p2 = cmpSM(ls[2], s2);
      var p1 = cmpSM(p2[0], s1);

      [p1[0], cmpSM(p1[0], e)[1]
        <+  CJMP ("nz", ls[0])
        <+> p2[1]
        <+  JMP (ls[1])
        <+  LABEL (ls[0])
        <+> p1[1]
        <+  LABEL (ls[1])
      ]
  esac
}

fun cmpSM(env, stmt){
  case stmt of
    Assn (s, e) -> case s of 
        Ref (s) -> [env, cmpSM(env, e)[1] <+ DUP <+ ST(lookupVar (env, s))]
      | _ -> 
          var s1 = cmpSM(env, s);
          var e1 = cmpSM(s1[0], e);
          [s1[0], s1[1] <+> e1[1] <+ STI]
      esac



  | Seq (e1,e2) ->
      var p1 = cmpSM(env, e1);
      var p2 = cmpSM(p1[0], e2);
      [p2[0], p1[1] <+> p2[1] ]

  | Skip -> [env, emptyBuffer()]
  | Read (x) -> case x of
        Ref(x) -> [env, listBuffer ({READ, ST(lookupVar (env, x)), DROP})]
      | _ -> failure("Read - Not Ref IN\n")
      esac    
  | Write (e) -> [env, cmpSM(env, e)[1] <+ WRITE]



  | Var (x) -> [env, singletonBuffer(LD (lookupVar (env, x)))]
  | Const (n) -> [env, singletonBuffer(CONST (n))]
  | Ref (x) -> [env, singletonBuffer(LDA (lookupVar (env, x)))]

  | Binop (op, e1, e2) -> 
      var p1 = cmpSM(env, e1);
      var p2 = cmpSM(p1[0], e2);
      [p2[0], p1[1] <+> p2[1] <+ BINOP (op)]
  
  | Ignor (x) -> 
      var p = cmpSM (env, x);
      [p[0], p[1] <+ DROP]
      

  | While (e1, e2) -> 
      var ls = genLabels(env, 2);
      var p = cmpSM (ls[2], e2);
      
      [p[0], emptyBuffer()
        <+  JMP (ls[0])
        <+  LABEL (ls[1])
        <+> p[1]
        <+  LABEL (ls[0])
        <+> cmpSM (p[0], e1)[1]
        <+  CJMP ("nz", ls[1])
      ]
  | If (e, s1, s2) -> cmpIf (env, e, s1, s2)




  | Scope (defs, expr) ->
      -------
      fun initDefs (env, d){
        var funcs = {};
        while size(d) > 0 do
          env := case d[0] of
                   Var (x) -> addVars(env, x)
                 | Fun (f, args, body) -> 
                     case genFunLabel (env, f) of [label, env] ->
                       funcs := [f, args, body, label]:funcs; 
                       addFun (env, f, label, size (args))
                     esac
                 esac;
          d := d.tl
        od;
        while size (funcs) > 0 do
          env := case funcs[0] of [f, args, body, label] ->
                   rememberFun (
                     env,
                     label,
                     args,
                     body
                   )
                 esac;
          funcs := funcs.tl
        od;
        env
      }
      -------
      fun createGlobals (env, d){
        var code = emptyBuffer();
        if isGlobal (env) then
          while size(d) > 0 do
            case d[0] of
              Var (x) -> 
                while size(x) > 0 do
                  code := code <+ GLOBAL (x[0]);
                  x := x.tl
                od
            | Fun (f, args, body) -> skip
            esac;
            d := d.tl
          od
        fi;
        code
      }
      -------
      var codeDefs;
      env := initDefs (beginScope (env), defs);
      codeDefs := createGlobals (env, defs);
      
      
      case cmpSM (env, expr) of [env, code] ->
        [if isGlobal(env) then env else endScope(env) fi, codeDefs <+> code]
      esac

  | Call (f, args) ->
      
      var code = emptyBuffer();
      while size(args) >0 do
        var r;
        r := cmpSM (env, args[0]);
        env := r[0];
        code := code <+> r[1];
        args := args.tl
      od;
      
      case lookupFun(env, f) of Fun (f, l) ->
        [env, code <+ CALL (f, l)]  
      esac
      
  | _ -> failure("\n\nFTF:  %s\n\n", stmt.string)

  esac
}
(* End *)
