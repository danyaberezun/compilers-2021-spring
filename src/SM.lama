-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

public fun countOp (op, x, y) {
  case op of
    "+" -> x + y
  | "-" -> x - y
  | "*" -> x * y
  | "/" -> x / y
  | "%" -> x % y
  | "<" -> x < y
  | ">" -> x > y
  | "<=" -> x <= y
  | ">=" -> x >= y
  | "==" -> x == y
  | "!=" -> x != y
  | "&&" -> x && y
  | "!!" -> x !! y
  esac   
}



-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }
  
  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun assignList (state, index, values) {
    case values of
      v:vs -> 
        assign (state, Arg (index), v);
        assignList (state, index + 1, vs)
    | _ -> skip
    esac
  }

  fun evalOneInstr (c@[stack, sc, state, world], insn, p) {
  case insn of
    CONST (n) -> [[n:stack, sc, state, world], p]
  | READ -> 
      case readWorld (world) of
        [n, new_world] -> [[n:stack, sc, state, new_world], p]
      esac
  | WRITE ->
      case stack of
        z:zs -> [[zs, sc, state, writeWorld (z, world)], p]
      esac
  | LD (x) -> [[(lookup (state, x)):stack, sc, state, world], p]
  | LDA (x) -> 
      [[(Ref (x)):stack, sc, state, world], p]
  | ST (x) -> 
      case stack of
        z:zs -> 
          assign (state, x, z);
          [[z:zs, sc, state, world], p]
      esac
  | STI ->
    case stack of
      v:Ref (x):s -> 
        assign (state, x, v);
        [[v:s, sc, state, world], p]
    esac
  | BINOP (op) -> 
      case stack of
        y:x:s ->
          [[countOp(op, x, y):s, sc, state, world], p]
      esac
  | LABEL (s) ->
      [c, p]
  | JMP (l) ->
      [c, fromLabel (env, l)]
  | CJMP (cond, l) ->
      case stack of 
        value:stack_tail -> 
          case [value, cond] of
            [0, "z"] -> [[stack_tail, sc, state, world], fromLabel (env, l)]
          | [1, "nz"] -> [[stack_tail, sc, state, world], fromLabel (env, l)]
          | _ -> [[stack_tail, sc, state, world], p]
          esac
      esac
  | DROP ->
      case stack of
        x:stack -> [[stack, sc, state, world], p]
      | _ -> failure ("""%s""", c.string)
      esac
  | DUP ->
      case stack of
        x:s -> [[x:stack, sc, state, world], p]
      esac
  | CALL   (f, n)    ->
      [[stack, [state, p]:sc, state, world], fromLabel (env, f)]
  | BEGIN  (f, a, l) -> 
      case take (stack, a) of
        [stack, args] ->
          var state_ = makeState (a, l);
          assignList (state_, 0, args);
          [[stack, sc, state_, world], p]
      esac 
  | GLOBAL (x)       ->
      assign (state, Glb (x), 0);
      [[stack, sc, state, world], p]
  | END              -> 
      case sc of
        [state, next_insns]:sc -> [[stack, sc, state, world], next_insns]
      | {} -> [c, {}]
      esac
  esac
}

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
    --failure ("""%s""", insns.string);
    case insns of
      insn:insns ->
        case evalOneInstr (c, insn, insns) of
          [c, next_insns] ->
            eval (c, next_insns)
        esac
    | _ -> c
    esac
  }
  (* End *)
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

fun rememberFuns (env, funcs) {
  foldl (
    fun (env, [label, args, body]) {
      rememberFun (env, label, args, body)
    },
    env, funcs
  )
}


fun collectDefinitions (defs) {
  foldl (
    fun ([vars, funcs], def) {
      case def of
        Var (names) -> [names +++ vars, funcs]
      | func@Fun (name, args, body) -> [vars, func:funcs]
      esac
    },
    [{}, {}], defs)
}

fun addFuncs (env, funcs) {
  foldl (
    fun ([env, funcs], Fun (name, args, body)) {
      case genFunLabel (env, name) of
        [label, env] ->
          [addFun (env, name, label, size (args)), [label, args, body]:funcs]
      esac
    }, 
    [env, {}], funcs)
}

fun addGlobalTag (env, vars) {
  if isGlobal (env) 
  then
    listBuffer (map (fun (x) { GLOBAL (x) }, vars))
  else emptyBuffer ()
  fi
}

fun compileArgs (env, args) {
  case args of
    arg:args ->
      case compileSMrec (env, arg) of
        [stmts_arg, env] ->
          case compileArgs (env, args) of
            [stmts_args, env] -> [stmts_arg <+> stmts_args, env]
          esac
      esac
  | _ -> [emptyBuffer (), env]
  esac
}

fun compileSMrec (env, stmt) {
  case stmt of
    Var (x) -> [singletonBuffer (LD (lookupVar (env, x))), env]
  | Const (x) -> [singletonBuffer (CONST (x)), env]
  | Binop (op, x, y) -> 
      case compileSMrec (env, x) of
        [x, env] ->
          case compileSMrec (env, y) of
            [y, env] -> [(x <+> y) <+ BINOP (op), env]
          esac
      esac
  | Ref (name) -> [singletonBuffer (LDA (lookupVar (env, name))), env]
  | Ignore (e) ->
    case compileSMrec (env, e) of
      [v, env] -> [v <+ DROP, env]
    esac
  | Skip -> [emptyBuffer (), env]
  | Assn (x, e) ->
      case compileSMrec (env, x) of
        [insts_x, env] ->
          case compileSMrec (env, e) of
            [insts_e, env] -> [insts_x <+> insts_e <+ STI, env]
          esac
      esac
  | Read (x) -> 
      case compileSMrec (env, x) of
        [insts, env] -> [insts <+ READ <+ STI <+ DROP, env]
      esac
  | Write (e) -> 
      case compileSMrec(env, e) of
        [insts, env] -> [insts <+ WRITE, env]
      esac
  | Seq (s1, s2) -> 
      case compileSMrec (env, s1) of
        [stmts_1, env_1] ->
          case compileSMrec (env_1, s2) of
            [stmts_2, env_2] ->
              [stmts_1 <+> stmts_2, env_2]
          esac
      esac
  | If (e, b1, b2) -> 
      case genLabels (env, 2) of
        [else_label, exit_label, new_env] ->
          case compileSMrec (new_env, b1) of
            [stmts_b1, env_b1] ->
              case compileSMrec (env_b1, b2) of
                [stmts_b2, env_b2] ->
                  case compileSMrec (env_b2, e) of
                    [stmts_e, env_b2] -> [stmts_e <+ CJMP ("z", else_label) <+> stmts_b1 <+ JMP (exit_label) 
                                          <+ LABEL (else_label) <+> stmts_b2 <+ LABEL (exit_label), env_b2]
                  esac
                  
              esac
          esac 
      esac
  | While (e, l) ->
      case genLabels (env, 2) of
        [start_label, body_label, new_env] ->
          case compileSMrec (new_env, e) of
            [stmts_e, new_env] ->
              case compileSMrec (new_env, l) of
                [stmts_l, env_l] ->
                  [singletonBuffer (JMP (start_label)) <+ LABEL (body_label) <+> stmts_l <+ LABEL (start_label) <+> stmts_e <+ CJMP ("nz", body_label), env_l]
              esac
          esac
          
      esac 
  | DoWhile (l, e) ->
      case genLabels (env, 1) of
        [start_label, new_env] ->
          case compileSMrec (new_env, e) of
            [stmts_e, new_env] ->
              case compileSMrec (new_env, l) of
                [stmts_l, env_l] ->
                  [singletonBuffer(LABEL (start_label)) <+> stmts_l <+> stmts_e <+ CJMP("nz", start_label), env_l]
            esac
          esac
      esac
  | Call (name, args_exprs) ->
      case lookupFun (env, name) of
        Fun (label, nargs) ->
          case compileArgs (env, args_exprs) of
            [stmts_args, env] -> [stmts_args <+ CALL (label, nargs), env]
          esac
      esac
  | Scope (defs, e) ->
      -- failure ("""%s""", defs.string);
      case collectDefinitions (defs) of -- 2.a
        [vars, funcs] -> 
          -- failure ("""%s""", vars.string);
          case addFuncs (addVars (beginScope (env), vars), funcs) of
            [env, funcs] ->
              -- failure ("""%s""", env.string);
              var glob_vars = addGlobalTag (env, vars); -- 2.b
              var new_env = rememberFuns (env, funcs); -- 2.c
              -- failure ("""%s""", vars.string)
              case compileSMrec (new_env, e) of
                [stmts, env] -> [glob_vars <+> stmts, endScope (env)] 
              esac
          esac
      esac
  esac
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)
fun generateFunction (env, label, args, body, state) {
  var env_ = beginFun (env, state);
  case compileSMrec (addArgs (env_, args), body) of
    [code, env] ->
      [emptyBuffer () <+ LABEL (label) 
                      <+ BEGIN (label, size (args), getLocals (env))
                      <+> code <+ END, env]
  esac
}

fun generateFunctionsCode (env) {
  case getFuns (env) of
    [funcs, env] ->
      foldl (
        fun ([stmts, env], Fun (label, args, body, state)) {
          case generateFunction (env, label, args, body, state) of
            [stmts_func, env] -> 
              case generateFunctionsCode (env) of
                [stmts_inner, env] ->
                  [stmts_func <+> stmts_inner <+> stmts, env]
              esac
          esac
        },
      [emptyBuffer (), env], funcs)
  esac
}

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).
public fun compileSM (stmt) {
  -- failure ("""%s""", stmt.string);
  case compileSMrec (initCompEnv (), stmt) of
    [prog_code, env] ->
      var locals = getLocals (env);
      -- failure ("""%s""", prog_code.string);
      case generateFunctionsCode (env) of
        [stmts_funcs, env] ->
          getBuffer (singletonBuffer (LABEL ("main")) <+ BEGIN ("main", 0, locals) 
                                      <+> prog_code <+ END <+> stmts_funcs)
      esac
  esac
}
(* End *)