-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, callstack, state, world], insns) {
    case insns of
      {}                           -> c
    | JMP  (label) : _             -> eval (c, fromLabel (env, label))
    | CJMP (cond, label) : insns   -> 
        case stack of
          v:stack -> case cond of
            "z"  -> if v == 0 then eval ([stack, callstack, state, world], fromLabel (env, label)) else eval ([stack, callstack, state, world], insns) fi 
          | "nz" -> if v != 0 then eval ([stack, callstack, state, world], fromLabel (env, label)) else eval ([stack, callstack, state, world], insns) fi
          esac
        esac
    | CALL (flabel, nargs) : insns -> eval ([stack, [state, insns] : callstack, state, world], fromLabel (env, flabel))
    | END : insns                  -> 
        case callstack of
          {}                       -> c
        | [prevstate, insns]:tail  -> eval ([stack, tail, prevstate, world], insns)
        esac
    | i : insns                    -> 
      --printf("%s\n", i.string);
      eval (
        case i of
          BUILTIN (name, nargs)       -> 
            case take (stack, nargs) of
              [stack, args] -> 
                case evalBuiltin (name, args, world) of
                  [result, world] -> [result:stack, callstack, state, world]
                esac
            esac
        | BINOP (op)                  -> 
            case stack of
              r:l:stack -> [(evalOp (op, l, r)):stack, callstack, state, world]
            esac
        | LD    (x)                   -> [lookup (state, x):stack, callstack, state, world]
        | ST    (variable)            ->
            case stack of
              v:_ ->
                assign (state, variable, v);
                [stack, callstack, state, world]
            esac
        | CONST (value)               -> [value:stack, callstack, state, world]
        | LABEL (_)                   -> c
        | LDA   (x)                   -> [Ref (x):stack, callstack, state, world]
        | STI                         -> 
            case stack of
              v:Ref (x):stack ->
                assign (state, x, v);
                [v:stack, callstack, state, world]
            esac
        | DUP                         -> 
            case stack of
              v:stack -> [v:v:stack, callstack, state, world]
            esac
        | DROP                        -> 
            case stack of
              {}      -> [{}, callstack, state, world]
            | v:stack -> [stack, callstack, state, world]
            esac
        | BEGIN (name, nargs, nlocal) -> 
            case take (stack, nargs) of
              [stack, args] -> 
                var localSt = makeState (nargs, nlocal);
                foldl (fun (i, arg) {assign (localSt, Arg (i), arg); i+1}, 0, args);
                [stack, callstack, localSt, world]
            esac
        | GLOBAL (x)                  -> 
            assign (state, Glb (x), 0);
            [stack, callstack, state, world]
        | ARRAY (n)                   ->
          case take (stack, n) of
            [size:stack, values] -> [listArray(values) : stack, callstack, state, world]
          esac
        | ELEM                        ->
          case stack of
            index:arr:stack -> [arr[index] : stack, callstack, state, world]
          esac
        | STA                         ->
          case stack of
            arr:value:index:stack ->
              arr[index] := value;
              [value : stack, callstack, state, world]
          esac
        | STRING (value)              -> [value:stack, callstack, state, world]
        | _                           -> failure      ("Invalid instruction!")
        esac
      , insns)
    esac
  }
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

fun compileVar (Var (variable), env) {
  [singletonBuffer (LD (lookupVar (env, variable))), env]
}

fun compileConst (Const (n), env) {
  [singletonBuffer (CONST (n)), env]
}

fun compileBinop(Binop (op, expr1, expr2), env) {
  case compileList ({expr1, expr2}, env) of
    [code, env] -> [code <+ BINOP (op), env]
  esac
}


fun compileAssn (Assn (ref, expr), env) {
  case ref of 
    ElemRef (arr, index) ->
      case compileList ({index, expr, arr}, env) of
        [code, env] -> [code <+ STA, env]
      esac
  | Ref (x) ->
      case compileSMBuffer (expr, env) of
        [code, env] -> [code <+ ST (lookupVar (env, x)), env]
      esac
  | _ ->
      case compileList ({ref, expr}, env) of
        [code, env] -> [code <+ STI, env]
      esac
   esac
}

fun compileSeq (Seq (expr1, expr2), env) {
  compileList ({expr1, expr2}, env)
}

fun compileIf (If (cond, thenExpr, elseExpr), env) {
  var elseLab = genLabel (env);
  var endLab = genLabel (elseLab.snd);
  var condCompiled = compileSMBuffer (cond, endLab.snd);
  var thenCompiled = compileSMBuffer (thenExpr, condCompiled.snd);
  var elseCompiled = compileSMBuffer (elseExpr, thenCompiled.snd);
  [condCompiled.fst <+ CJMP ("z", elseLab.fst) <+> thenCompiled.fst <+ JMP(endLab.fst) <+ LABEL (elseLab.fst) <+> elseCompiled.fst <+ LABEL (endLab.fst), elseCompiled.snd] 
}

fun compileWhile (While (cond, expr), env) {
  var beginLab = genLabel (env);
  var endLab = genLabel (beginLab.snd);
  var condCompiled = compileSMBuffer (cond, endLab.snd);
  var bodyCompiled = compileSMBuffer (expr, condCompiled.snd);
  [singletonBuffer (LABEL (beginLab.fst)) <+> condCompiled.fst <+ CJMP ("z", endLab.fst) <+> bodyCompiled.fst <+ JMP (beginLab.fst) <+ LABEL (endLab.fst), bodyCompiled.snd]
}

fun compileDoWhile (DoWhile (expr, cond), env) {
  var beginLab = genLabel (env);
  var condCompiled = compileSMBuffer (cond, beginLab.snd);
  var bodyCompiled = compileSMBuffer (expr, condCompiled.snd);
  [singletonBuffer (LABEL (beginLab.fst)) <+> bodyCompiled.fst <+> condCompiled.fst <+ CJMP ("nz", beginLab.fst), bodyCompiled.snd]
}

fun compileRef (Ref (x), env) {
  --printf ("%s\n", env.string);
  [singletonBuffer (LDA (lookupVar (env, x))), env]
}

fun compileIgnore (Ignore (exp), env) {
  case compileSMBuffer (exp, env) of
    [code, env] -> [code <+ DROP, env]
  esac
}

fun compileScope (Scope (defs, body), env) {
  case foldl ( fun ([env, functions, global], def) {
                 case def of
                     Var (vars)              -> [addVars (env, vars), 
                                                 functions, 
                                                 listBuffer(if isGlobal(env) 
                                                            then map (fun (v) {GLOBAL (v)}, vars) 
                                                            else {} fi) <+> global] 
                   | Fun (name, args, body)  -> 
                     case genFunLabel (env, name) of
                       [lab, env] -> [addFun(env, name, lab, args.size), [lab, args, body] : functions, global]
                     esac
                 esac
               }, [beginScope(env), {}, emptyBuffer()], defs) 
  of
    [env,  functions, global] ->
      case compileSMBuffer (body, foldl ( fun (env, [lab, args, body]) 
        {
          rememberFun (env, lab, args, body)
        }, env, functions)) of
        [code, env] -> [global <+> code, endScope(env)]
      esac
  esac
}

fun compileList (list, env) {
  foldl(fun ([code, env], elem) 
  {
    case compileSMBuffer (elem, env) of
      [elemcode, env] -> [code <+> elemcode, env]
    esac
  }, [emptyBuffer(), env], list)
}

fun compileCall (Call (name, args), env) {
  case compileList (args, env) of
    [argcode, env] ->
      case name of
        "read"   -> [argcode <+ BUILTIN (name, 0), env]
      | "write"  -> [argcode <+ BUILTIN (name, 1), env]
      | "length" -> [argcode <+ BUILTIN (name, 1), env]
      | _        -> 
        case lookupFun (env, name) of
          Fun (lab, argsize) -> [argcode <+ CALL (lab, argsize), env]
        esac
      esac
  esac
}

fun compileFunctions (env) {
  fun iter (env, code, funclist) {
    case funclist of
    {}                                   -> case getFuns(env) of
                                              [{}, env]    -> code
                                            | [flist, env] -> iter (env, code, flist)
                                            esac
    | Fun (name, args, body, state):tail -> case compileSMBuffer (body, addArgs(beginFun (env, state), args)) of
                                              [fcode, env] -> iter (env, code 
                                                                         <+ LABEL (name) 
                                                                         <+ BEGIN (name, args.size, getLocals(env))
                                                                         <+> fcode
                                                                         <+ END,
                                                                         tail)
                                            esac
    esac
  }
  iter (env, {}, {})
}

fun compileString (String (value), env) {
  [singletonBuffer (STRING (value)), env]
}

fun compileArray (Array (expList), env) {
  case compileList (expList, env) of
    [code, env] -> [singletonBuffer (CONST (size (expList))) <+> code <+ ARRAY (size (expList)), env]
  esac
}

fun compileElem (Elem (arr, index), env) {
  case compileList ({arr, index}, env) of
    [code, env] -> [code <+ ELEM, env]
  esac
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

public fun compileSM (expr) {
  case compileSMBuffer (expr, 
    foldl (addFun, beginScope (initCompEnv ()), 
    {Fun ("read", {}), 
     Fun ("write", {"x"}), 
     Fun ("length", {"x"})
    })) of
    [code, env] -> var func = compileFunctions (env); 
                   getBuffer(
                       singletonBuffer (LABEL ("main")) 
                       <+ BEGIN ("main", 0, getLocals (env)) 
                       <+> code 
                       <+ END
                       <+> func)
  esac
}

public fun compileSMBuffer (expr, env) {
  case expr of
    Skip              -> [emptyBuffer (), env]
  | Assn    (_, _)    -> compileAssn      (expr, env)
  | Seq     (_, _)    -> compileSeq       (expr, env)
  | If      (_, _, _) -> compileIf        (expr, env)
  | While   (_, _)    -> compileWhile     (expr, env)
  | DoWhile (_, _)    -> compileDoWhile   (expr, env)
  | Var     (_)       -> compileVar       (expr, env)
  | Const   (_)       -> compileConst     (expr, env)
  | Binop   (_, _, _) -> compileBinop     (expr, env)
  | Ref     (_)       -> compileRef       (expr, env)
  | Ignore  (_)       -> compileIgnore    (expr, env)
  | Scope (_, _)      -> compileScope     (expr, env)
  | Call (_, _)       -> compileCall      (expr, env)
  | String (_)        -> compileString    (expr, env)
  | Array (_)         -> compileArray     (expr, env)
  | Elem (_, _)       -> compileElem      (expr, env)
  | _                 -> failure          ("Invalid compiling statement: %s", expr.string)
  esac
}
