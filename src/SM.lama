-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    READ : ins      -> case readWorld (c[2]) of
        [n, w] -> eval([n : c[0], c[1], w], ins)
      esac
  | WRITE : ins     -> case c[0] of
        n : s -> eval ([s, c[1], writeWorld (n, c[2])], ins)
      esac
  | BINOP (s) : ins -> case c[0] of
        y : x : xs -> eval ([evalOp (s, x, y) : xs, c[1], c[2]], ins)
      esac
  | LD    (v) : ins -> case c[1] (v) of
        x -> eval ([x : c[0], c[1], c[2]], ins)
      esac
  | ST    (v) : ins -> case c[0] of
        x : xs -> eval ([xs, c[1] <- [v, x], c[2]], ins)
      esac
  | CONST (n) : ins -> eval ([n : c[0], c[1], c[2]], ins)
  | _ -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  compileExprReq (expr) . getBuffer
}

fun compileExprReq (expr) {
  case expr of
    Var   (v)          -> singletonBuffer (LD (v))
  | Const (n)          -> singletonBuffer (CONST (n))
  | Binop (op, e1, e2) -> compileExprReq (e1) <+> compileExprReq (e2) <+> singletonBuffer (BINOP (op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compileSMReq (stmt) {
    case stmt of
      Assn  (v, e)   -> addBuffer (compileExprReq (e), ST (v))
    | Seq   (s1, s2) -> compileSMReq (s1) <+> compileSMReq (s2)
    | Read  (v)      -> listBuffer ({READ, ST (v)})
    | Write (e)      -> addBuffer (compileExprReq (e), WRITE)
    esac
  }

  compileSMReq (stmt) . getBuffer
}
