-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[s, st, w], insns) {
  case insns of
    {} -> c
  | i: insns0 -> 
    eval (
      case i of
        READ -> case readWorld (w) of [z, w0] -> [z: s, st, w0] esac
      | WRITE -> case s of z: s0 -> [s0, st, writeWorld (z, w)] esac
      | BINOP (op) -> case s of y: x: s0 -> [evalOp (op, x, y): s0, st, w] esac
      | LD (x) -> [st (x): s, st, w]
      | ST (x) -> case s of z: s0 -> [s0, st <- [x, z], w] esac
      | CONST (n) -> [n: s, st, w]
      esac,
      insns0
    )
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x) -> {LD (x)}
  | Const (n) -> {CONST (n)}
  | Binop (op, x, y) -> compileExpr (x) +++ compileExpr (y) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (x, e) -> compileExpr (e) +++ {ST (x)}
  | Seq (x, y) -> compileSM (x) +++ compileSM (y)
  | Skip -> {}
  | Read (x) -> {READ, ST (x)}
  | Write (e) -> compileExpr (e) +++ {WRITE}
  esac
}
