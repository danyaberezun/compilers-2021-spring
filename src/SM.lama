-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}


public fun evalInst (c@[stk, st, w], inst) {
  case inst of 
        READ -> case readWorld (w) of
                  [v,w2] -> [v:stk, st, w2]
                esac
      | WRITE -> case stk of 
                    v:newStk ->  [newStk, st, writeWorld (v, w)]
                esac
      | CONST (v) -> [v:stk, st, w]
      | BINOP (op) -> case stk of
                          snd:fst:rest -> (
                                    var value = evalOp (op, fst, snd);
                                    [evalOp (op, fst, snd):rest, st, w]
                                          )
                      esac
      | LD (x) -> [st (x):stk, st, w]
      | ST (x) ->  case stk of
                      v:rest -> [stk, st <- [x, v], w]
                    esac
      | LABEL (_) -> c
  
      | DROP ->  case stk of
                  head:rest -> [rest, st, w]
                esac
      | DUP -> case stk of
                  head:rest -> [head:stk, st, w]
              esac
      | LDA (x) -> [Ref (x):stk, st, w]
      | STI ->  case stk of
                v:Ref (x):rest -> [v:rest, st <- [x, v], w  ]
              esac
      esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stk, st, w], insns) {
  case insns of 
    {} -> c
  | JMP (l) : insns     -> eval (env, c, fromLabel (env, l)) 
  | LABEL (l) : insns   -> eval (env, c, insns)
  | CJMP (type, label):rest ->
        case stk of
          top:tail -> (
            var tJ = case type of
                  "nz" -> top != 0
                | "z"  -> top == 0
                | _    -> failure ("failure")
                esac;
            if tJ then
              eval (env, [tail, st, w], fromLabel (env, label))
            else
              eval (env, [tail, st, w], rest)
            fi
          )
        esac
    | inst:others -> eval (env, evalInst (c, inst), others)    
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  -- printf ("%s\n", showSM (insns));
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

fun compileWhile(env, expr, body) {
  case genLabels (env, 2) of
      [cond, endL, env] -> 
        case compile(env, expr) of
          [env, exprc] ->
            case compile (env, body) of
              [env, bodyc] -> [env, 
                  singletonBuffer (LABEL (cond)) <+> exprc <+ 
                            CJMP ("z", endL) <+> bodyc <+ 
                            JMP (cond) <+ 
                            LABEL (endL)]
            esac
        esac
  esac
}

fun compileDoWhile(env, body, expr) {
    case genLabel (env) of
            [thenL, env] -> 
              case compile(env, body) of
                [env, bodyc] ->
                  case compile (env, expr) of
                    [env, exprc]   -> [env,  singletonBuffer (LABEL (thenL)) <+> bodyc <+> exprc <+  CJMP ("nz", thenL)]
                esac
            esac
      esac
}

fun compileIf(env, expr, ifT, ifF) {
  case genLabels (env, 3) of
      [ifStmt, thenStart, thenEnd, env] -> 
        case compile (env, expr) of
          [env, exprc] -> 
            case compile(env, ifT) of
              [env, tc] -> 
                case compile(env, ifF) of 
                  [env, fc] -> 
                          [env, exprc <+  CJMP ("z", thenStart) <+  LABEL (ifStmt) <+> tc <+  JMP (thenEnd) <+  LABEL (thenStart) <+> fc  <+ LABEL (thenEnd)]
              esac
          esac  
      esac
  esac 
}

-- Compiles a statement(expression) into a stack machine code.
-- Takes a statement, returns a buffer
-- of stack machine instructions and enviroment
fun compile (env, stmt) {
  case stmt of
    Var (x) -> [singletonBuffer (LD (x)), env]
  | Const (c) -> [singletonBuffer (CONST (c)), env]
  | Binop (op, l, r) -> 
        case compile (env, l) of [codel, env1] ->
            case compile (env1, r) of [coder, env2] -> 
                [codel <+> coder <+ BINOP (op), env2]
            esac 
        esac
  | Seq (x, y) -> 
        case compile (env, x) of [codex, env1] ->
            case compile (env1, y) of [codey, env2] ->
              [codex <+> codey, env2]
            esac 
        esac
  | Assn (x, y) -> 
        case compile (env, x) of [codex, env1] ->
            case compile (env1, y) of [codey, env2] ->
                [codex <+> codey <+ STI, env2]
        esac esac
  | Skip -> [emptyBuffer (), env]
  | Read (x) -> [listBuffer ({READ, ST (x), DROP}), env]
  | Write (expr) -> case compile (env, expr) of [code, env1] -> [code <+ WRITE, env1] esac
  | Ref (x) -> [singletonBuffer (LDA (x)), env]
  | If (expr, ifT, ifF) -> compileIf (env, expr, ifT, ifF)
  | While (expr, body) ->  compileWhile(env, expr, body)
  | DoWhile (body, expr) -> compileDoWhile(env, body, expr)
  | Ignore (e) -> case compile (env, e) of [code, env] -> [code <+ DROP, env] esac
  esac
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  getBuffer ((compile (initCompEnv (), stmt))[0])
}
