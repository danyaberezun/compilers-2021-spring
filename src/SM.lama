-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun evalInst([stk, cstk, st, w], instruction) {
      case instruction of
        BINOP(op) ->
          case stk of
            rhs:lhs:tail ->
              stk := evalOp(op, lhs, rhs) : tail
          esac |
        LD(x) -> stk := lookup(st, x) : stk |
        LDA(x) -> stk := Ref(x) : stk |
        ST(x) ->
          case stk of
            v : _ ->
              assign(st, x, v);
              stk
          esac |
        STI ->
          case stk of
            v : Ref(x) : tail ->
              assign(st, x, v);
              stk := v : tail
          esac |
        STA ->
          case stk of
            arr : v : index : tail ->
              arr[index] := v;
              stk := v : tail
          esac |

        CONST(v) ->
          stk := (v : stk) |
        STRING(v) ->
          stk := v : stk |
        ARRAY(vsN) ->
          case take(stk, vsN) of
            [tail, vs] ->
              stk := listArray(vs) : tail.tl
          esac |
        ELEM ->
          case stk of
            index : arr : stkTail ->
              stk := arr[index] : stkTail
          esac |
        GLOBAL(_) ->
          skip |
        DROP ->
          case stk of
            head : tail ->
              stk := tail
          esac |

        BUILTIN(name, argsN) ->
          case take(stk, argsN) of [newstk, vals] ->
            case evalBuiltin(name, vals, w) of [v, neww] ->
              stk := v : newstk;
              w := neww
            esac
          esac |

        BEGIN(label, argsN, localsN)   ->
            case take(stk, argsN) of [tail, argVals] ->
              stk := tail;
              st := makeState(argsN, localsN);
              for var i; i := 0, i < argsN, i := i+1 do
                assign(st, Arg(i), argVals[0]);
                argVals := argVals[1]
              od
            esac |
        _ -> skip
      esac;
      [stk, cstk, st, w]
    }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stk, cstk, st, w], insns) {
    case insns of
      {} -> c
    | JMP (l) : _                -> eval (c, fromLabel (env, l))
    | CJMP (cond, l) : insnsTail ->
        case stk of
          z:s -> if (compare(cond, "nz") == 0 && z != 0) !! (compare(cond, "z") == 0 && z == 0)
                 then eval ([s, cstk, st, w], fromLabel (env, l))
                 else eval ([s, cstk, st, w], insnsTail)
                 fi
        esac
    | CALL (f, _) : p -> eval ([stk, [st, p]: cstk, st, w], fromLabel (env, f))
    | END : rest ->
        case cstk of
          {} -> c
        | [localState, newProgram] : rest -> eval([stk, rest, localState, w], newProgram)
        esac
    | inst : insnsTail -> eval(evalInst (c, inst), insnsTail)

    esac
  }
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expression) {

  fun compileDefs(defs) {
    var globals = emptyBuffer();
    environment := foldl(fun([env, globals], def) {
      case def of
          Var(vars) ->
              if isGlobal(env) then
                globals := foldl(fun(buff, variable) { buff <+ GLOBAL(variable) }, globals, vars)
              fi;
              [env.addVars(vars), globals] 
          | Fun(name, args, body) ->
              [case genFunLabel(env, name) of [fLabel, newEnv] ->
                addFun(newEnv, name, fLabel, size(args))
              esac, globals] 
      esac
    }, [environment, globals], defs);
    globals := environment[1];
    environment := environment[0];
    environment := foldl(fun(env, def) {
      case def of
        Fun(name, args, body) ->
          case lookupFun(env, name) of Fun(fLabel, _) ->
            rememberFun(env, fLabel, args, body)
          esac 
        |Var(_) -> env 
      esac
    }, environment, defs);

    globals
  }

  fun compileCall(f, args) {
      foldl(fun(insns, args) {
          insns <+> compileExprAux(args)
        }, emptyBuffer(), args)
          <+
        case f of
          "read"   -> BUILTIN(f, 0) |
          "write"  -> BUILTIN(f, 1) |
          "length" -> BUILTIN(f, 1) |
          _ ->
            case lookupFun(environment, f) of Fun(fLabel, argsN) ->
              CALL(fLabel, argsN)
            esac
        esac
  }
  fun compileWhile(cond, body) {
    case environment.genLabels(2) of
          [labelStart, labelBody, newEnv] ->
            environment := newEnv;
            singletonBuffer(JMP(labelStart)) <+ LABEL(labelBody)
              <+> compileExprAux(body) <+ LABEL(labelStart)
              <+> compileExprAux(cond) <+ CJMP("nz", labelBody)
    esac
  }
  fun compileDoWhile(body, cond) {
      case environment.genLabels(1) of [labelBody, newEnv] ->
              environment := newEnv;
              singletonBuffer(LABEL(labelBody)) <+> compileExprAux(body) <+> compileExprAux(cond) <+ CJMP("nz", labelBody)
      esac
  }
  fun compileIf(cond, ifE, elseE) {
      case environment.genLabels(2) of
          [labelAlternative, labelEnd, newEnv] ->
            environment := newEnv;
            compileExprAux(cond)
              <+ CJMP("z", labelAlternative)
              <+> compileExprAux(ifE)
              <+ JMP(labelEnd) <+ LABEL(labelAlternative)
              <+> compileExprAux(elseE)
              <+ LABEL(labelEnd)
      esac
  }
  fun compileScope(defs, expr){
      var result;
        if size(defs) == 0 then
          compileExprAux(expr)
        else
          var globals;
          environment := beginScope(environment);
          globals := compileDefs(defs);
          result := globals <+> compileExprAux(expr);
          environment := endScope(environment);
          result
      fi
  }
  fun compileFun(f, args, body, fSt) {
      var bodyInsns;
        environment := addArgs(beginFun(environment, fSt), args);
        bodyInsns := compileExprAux(body);
        singletonBuffer(LABEL(f)) <+ BEGIN(f, size(args), getLocals(environment)) <+> bodyInsns <+ END
  }
  fun compileExprAux(expression) {
    case expression of
      Const(n) -> singletonBuffer(CONST(n))
      |Var(x) -> singletonBuffer(LD (lookupVar(environment, x)))
      | Ref(x) -> singletonBuffer(LDA(lookupVar(environment, x)))
      | Elem(arrExpr, indexExpr) -> compileExprAux(arrExpr) <+> compileExprAux(indexExpr) <+ ELEM
      | String(v) -> singletonBuffer(STRING(v))
      | Array(vexpr) ->
        foldl(fun(buf, expr) { buf <+> compileExprAux(expr) }, singletonBuffer(CONST(size(vexpr))), vexpr)
          <+ ARRAY(size(vexpr))
      | Seq (e1, e2) ->  compileExprAux(e1) <+> compileExprAux(e2)
      | Assn (Ref(x), expression) -> compileExprAux(expression) <+ ST(lookupVar(environment, x))
      | Assn (ElemRef(arrExpr, arrIndexExpr), valueExpr) -> compileExprAux(arrIndexExpr) <+> compileExprAux(valueExpr) <+> compileExprAux(arrExpr) <+ STA
      | Assn (destination, expression) ->
        compileExprAux(destination) <+> compileExprAux(expression) <+ STI
      | Binop(operation, e1, e2) -> compileExprAux(e1) <+> compileExprAux(e2)  <+ BINOP(operation)
      | While (cond, body) -> compileWhile(cond, body)
      | DoWhile(body, cond) -> compileDoWhile(body, cond)
      | If (cond, ifE, elseE) -> compileIf(cond, ifE, elseE)
      | Call(f, args) -> compileCall(f, args)
      | Scope(defs, expr) -> compileScope(defs, expr)
      | Fun(f, args, body, fSt) -> compileFun(f, args, body, fSt)
      | Ignore (expr) -> compileExprAux(expr) <+ DROP 
      | Skip -> emptyBuffer()
      | _ -> failure ("Unknown expression SM'" ++ string(expression) ++ "'\n")
    esac
  }

  fun tmp(instructions, [funs, env]) {
    environment := env;
    singletonBuffer(LABEL("main")) <+ BEGIN("main", 0, getLocals(environment))
      <+> instructions
      <+ END 
      <+> foldl(fun(buffer, function){ buffer <+> compileExprAux(function) }, emptyBuffer(), funs)
  }
  getBuffer(tmp(compileExprAux(expression), getFuns(environment)) )
}

var environment;

public fun compileSM (expr) {
  environment := initCompEnv();
  environment := foldl(addFun, beginScope(environment), {
    Fun("read", {}), Fun("write", {"x"}), Fun("length", {"x"})
  });
  compileExpr(expr)
}
