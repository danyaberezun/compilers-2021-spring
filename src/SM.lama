-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    Read      -> sprintf ("READ")
  | Write     -> sprintf ("WRITE")
  | Binop (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | Const (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl (evalInsn, c, insns)
}

fun evalInsn(c, insn) {
  case insn of
    Read -> (
      var newWorld = readWorld(c[2]);
      [newWorld[0] : c[0], c[1], newWorld[1]]
    ) |
    -- stack top : end
    Write -> [c[0].tl, c[1], writeWorld (c[0].hd, c[2])] |
    -- stack sec : fst : end
    Binop (s) -> [evalBinop (s, c[0].tl.hd, c[0].hd) : c[0].tl.tl, c[1], c[2]] |
    LD (x) -> [c[1] (x) : c[0], c[1], c[2]] |
    -- stack top : end
    ST (x) -> [c[0].tl, c[1] <- [x, c[0].hd], c[2]] |
    Const (n) -> [n : c[0], c[1], c[2]]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  getBuffer (compileExprForBuffer (expr))
}

fun compileExprForBuffer (expr) {
  case expr of
    Var (v) -> singletonBuffer (LD (v)) |
    Const (c) -> singletonBuffer (Const (c)) |
    Binop (s, e1, e2) -> compileExprForBuffer(e1) <+> compileExprForBuffer (e2) <+> singletonBuffer (Binop (s))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  getBuffer (compileSMForBuffer (stmt))
}

public fun compileSMForBuffer (stmt) {
  case stmt of
    Assn (s, e) -> compileExprForBuffer(e) <+> singletonBuffer (ST (s)) |
    Seq (st1, st2) ->  compileSMForBuffer (st1) <+> compileSMForBuffer (st2) |
    Skip -> emptyBuffer () |
    Read (s) -> singletonBuffer (Read) <+> singletonBuffer (ST (s)) |
    Write (e) -> compileExprForBuffer (e) <+> singletonBuffer (Write)
  esac
}
