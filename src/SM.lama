-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    Binop  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | Const  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
    fun oldInsnsCheck (c, insn) {
        -- printf ("old %s %s\n", insn.string, c[0].string);
        case insn of
         --   Read -> (
           --   var newWorld = readWorld(c[3]);
            --  [newWorld[0] : c[0], c[1], c[2], newWorld[1]]
           -- ) |
           -- Write -> [c[0].tl, c[1], c[2], writeWorld (c[0].hd, c[3])] |
            Binop (s) -> [evalBinop (s, c[0].tl.hd, c[0].hd) : c[0].tl.tl, c[1], c[2], c[3]] |
            LD (x) -> [lookup (c[2], x) : c[0], c[1], c[2], c[3]] |
            LDA (x) -> [Ref (x) : c[0], c[1], c[2], c[3]] |
            ST (x) ->
             case c[0] of
               hd : _ ->
                 assign(c[2], x, hd);
                 [c[0], c[1], c[2], c[3]]
               esac |
            -- [c[0], c[1], c[2] <- [x, c[0].hd], c[3]] |
            STI ->
              case c[0] of
                hd : Ref (x) : tl ->
                  assign(c[2], x, hd);
                  [hd : tl, c[1], c[2], c[3]]
              esac |
             -- case c[0] of
               -- hd : Ref(x) : tl -> [hd : tl, c[1], c[2] <- [x, hd], c[3]]
             -- esac |
            STA ->
              -- printf("q %s\n", c[0].string);
              case c[0] of
                Ref(x) : value : tl ->
                  assign(c[2], x, value);
                  [value : tl, c[1], c[2], c[3]] |
                hd : ind : value : tl ->
                  hd[ind] := value;
                  [value : tl, c[1], c[2], c[3]]
                esac |
            Const (n) -> [n : c[0], c[1], c[2], c[3]] |
            DROP -> [c[0].tl, c[1], c[2], c[3]] |
            STRING (v) -> [v : c[0], c[1], c[2], c[3]] |
            ARRAY (n) -> case take (c[0], n) of [tl, vs] ->
                -- printf("q1vs %s\n", vs.string);
                -- printf("q1tl %s\n", tl.string);
                [listArray (vs) : tl, c[1], c[2], c[3]]
              esac |
            ELEM -> case c[0] of ind : arr : tl ->
                [arr[ind] : tl, c[1], c[2], c[3]]
              esac |
            BUILTIN (f, n) -> case take (c[0], n) of [stack, vals] ->
              case evalBuiltin (f, vals, c[3]) of [value, world] ->
                  [value : stack, c[1], c[2], world]
                esac
              esac |
            _ -> [c[0], c[1], c[2], c[3]]
        esac
      }

      fun newInsnsCheck (c@[stack, cstack, state, world], insns) {
        -- printf ("new %s %s\n", insns.hd.string, c[0].string);
        case insns.hd of
          JMP (l) -> [[c[0], c[1], c[2], c[3]], env.fromLabel (l)] |
          CJMP (cond, l) -> (
            if (compare("nz", cond) == 0 && c[0].hd != 0 !! compare("z", cond) == 0 && c[0].hd == 0)
            then [[c[0].tl, c[1], c[2], c[3]], env.fromLabel (l)]
            else [[c[0].tl, c[1], c[2], c[3]], insns.tl]
            fi
          ) |
          CALL (name, _) -> [[stack, [state, insns.tl] : cstack, state, world], env.fromLabel(name)] |
          BEGIN(label, argsN, localsN) ->
            case take(c[0], argsN) of [tail, argVals] ->
              c[0] := tail;
              c[2] := makeState(argsN, localsN);
              for var i; i := 0, i < argsN, i := i+1 do
                assign(c[2], Arg(i), argVals[0]);
                argVals := argVals[1]
              od
            esac;
           [[c[0], c[1], c[2], c[3]], insns.tl] |
          END ->
            var insnsTail = insns.tl;
            case c[1] of
              {} -> insnsTail := {} |
              [prevState, prevInstructions] : tail ->
                c[1] := tail;
                c[2] := prevState;
                insnsTail := prevInstructions
            esac;
          [[c[0], c[1], c[2], c[3]], insnsTail] |
          _ -> [[c[0], c[1], c[2], c[3]], insns.tl]
        esac
      }

      -- printf("1");
      while size(insns) > 0 do
        -- printf("123 %s\n", insns.hd.string);
        case insns of
          _ -> (
            var newData = newInsnsCheck (oldInsnsCheck (c, insns.hd), insns);
            c := newData[0];
            insns := newData[1]
          )
        esac
      od;
      -- printf("3");
      c
  }

  (* End *)
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}


-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).


public fun compileSM (stmt) {
  var env = initCompEnv ();
  env := foldl (addFun, beginScope (env), {
      Fun ("read", {}),
      Fun ("write", {"x"}),
      Fun ("length", {"x"})
  });
  getBuffer (compileAllExpr (stmt, env)[0])
}


public fun compileAllExpr (expr, environment) {
  -- printf("4");
  fun compileAllExpr (stmt, env) {
    -- printf("1 %s\n", stmt.string);
    case stmt of
      Var (v) -> [singletonBuffer (LD (lookupVar (env, v))), env] |
      Const (c) -> [singletonBuffer (Const (c)), env] |
      Ref(s) -> [singletonBuffer (LDA (lookupVar (env, s))), env] |
      Binop (s, e1, e2) ->
        var comp1 = compileAllExpr (e1, env);
        var comp2 = compileAllExpr (e2, comp1[1]);
        [comp1[0] <+> comp2[0] <+> singletonBuffer (Binop (s)), comp2[1]] |
      ElemRef (arrE, indE) ->
        var comp1 = compileAllExpr (indE, env);
        var comp2 = compileAllExpr (arrE, comp1[1]);
        [comp1[0] <+> comp2[0], comp2[1]] |
      Assn (s, e) ->
        case s of
          Ref (x) ->
            var comp1 = compileAllExpr (e, env);
            [comp1[0] <+ ST (lookupVar (comp1[1], x)), comp1[1]] |
          _ ->
            var comp1 = compileAllExpr(e, env);
            var comp2 = compileAllExpr(s, comp1[1]);
            [comp1[0] <+> comp2[0] <+ STA, comp2[1]]
        esac |
      Seq (st1, st2) ->
        var comp1 = compileAllExpr (st1, env);
        var comp2 = compileAllExpr (st2, comp1[1]);
        [comp1[0] <+> comp2[0], comp2[1]] |
      Skip -> [emptyBuffer (), env] |
     -- Read (s) -> [singletonBuffer (Read)
      --  <+> singletonBuffer (ST (lookupVar(env, s))) <+ DROP, env] |
     -- Write (e) ->
       -- var comp = compileAllExpr (e, env);
       -- [comp[0] <+> singletonBuffer (Write), comp[1]] |
      While (c, s) ->
        case env.genLabels(2) of [l1, l2, newEnv] ->
          var newData = compileAllExpr (s, newEnv);
          var comp = compileAllExpr (c, newData[1]);
          [singletonBuffer (JMP (l1)) <+ LABEL (l2) <+> newData[0] <+ LABEL (l1)
            <+> comp[0] <+ CJMP ("nz", l2), comp[1]]
        esac |
      DoWhile(s, c) ->
        case env.genLabels(1) of [l, newEnv] ->
          var newData = compileAllExpr (s, newEnv);
          var comp = compileAllExpr (c, newData[1]);
          [singletonBuffer (LABEL (l)) <+> newData[0] <+> comp[0] <+ CJMP ("nz", l), comp[1]]
        esac |
      If (c, st1, st2) ->
        case env.genLabels(2) of [l1, l2, newEnv] ->
          var comp1 = compileAllExpr (c, newEnv);
          var comp2 = compileAllExpr (st1, comp1[1]);
          var comp3 = compileAllExpr (st2, comp2[1]);
          [comp1[0] <+ CJMP ("z", l1) <+> comp2[0] <+ JMP (l2) <+ LABEL (l1) <+> comp3[0] <+ LABEL (l2), comp3[1]]
        esac |
      Ignore (e) ->
        var comp = compileAllExpr (e, env);
        [comp[0] <+ DROP, comp[1]] |
      Call(fName, argExprs) ->
        var comp;
        var buffer = emptyBuffer();
        while size (argExprs) > 0 do
          comp := compileAllExpr(argExprs.hd, env);
          env := comp[1];
          buffer := buffer <+> comp[0];
          argExprs := argExprs.tl
        od;
         case fName of
          "read"   -> buffer := buffer <+ BUILTIN(fName, 0) |
          "write"  -> buffer := buffer <+ BUILTIN(fName, 1) |
          "length" -> buffer := buffer <+ BUILTIN(fName, 1) |
          _ ->
            case lookupFun (env, fName) of Fun (fLabel, argsN) ->
              buffer := buffer <+ CALL (fLabel, argsN)
            esac
        esac;
        [buffer, env] |
      Scope (defs, expr) ->
        var result;
        if size(defs) == 0 then
          compileAllExpr(expr, env)
        else
          var globals;
          var comp;
          globals := bindSymbols(defs, beginScope (env));
          comp := compileAllExpr(expr, globals[1]);
          [globals[0] <+> comp[0], endScope (comp[1])]
        fi |
      Fun(fLabel, args, body, fState) ->
        var bodyInsns;
        env := addArgs (beginFun (env, fState), args);
        bodyInsns := compileAllExpr(body, env);
        [singletonBuffer(LABEL(fLabel)) <+ BEGIN (fLabel, size(args),
          getLocals (bodyInsns[1])) <+> bodyInsns[0] <+ END, bodyInsns[1]] |
      Elem (arr, ind) ->
        var comp1 = compileAllExpr (arr, env);
        var comp2 = compileAllExpr (ind, comp1[1]);
        [comp1[0] <+> comp2[0] <+ ELEM, comp2[1]] |
      String (v) -> [singletonBuffer (STRING (v)), env] |
      Array (exprs) ->
        var comp;
        var exprsSize = size (exprs);
        var buffer = singletonBuffer (Const (exprsSize));
        while size (exprs) > 0 do
          comp := compileAllExpr (exprs.hd, env);
          env := comp[1];
          buffer := buffer <+> comp[0];
          exprs := exprs.tl
        od;
        [buffer <+ ARRAY (exprsSize), env]
    esac
  }
  var comp = compileAllExpr (expr, environment);
  var mainWrap = singletonBuffer(LABEL("main")) <+ BEGIN("main", 0, getLocals (comp[1])) <+> comp[0] <+ END;
  var funs = getFuns (comp[1]);
  var insns = funs[0];
  var buffer = emptyBuffer();
  environment := funs[1];
  while size (insns) > 0 do
    comp := compileAllExpr (insns.hd, environment);
    environment := comp[1];
    buffer := buffer <+> comp[0];
    insns := insns.tl
  od;
  [mainWrap <+> buffer, environment]
}

fun bindSymbols(defs, environment) {
  var globals = emptyBuffer();
  environment := foldl(fun([env, globals], def) {
    case def of
      Var(vars) ->
        if isGlobal(env) then
          globals := foldl(fun(buff, variable) { buff <+ GLOBAL(variable) }, globals, vars)
        fi;
        [env.addVars(vars), globals] |
      Fun(name, args, body) ->
        [case genFunLabel(env, name) of [fLabel, newEnv] ->
          addFun(newEnv, name, fLabel, size(args))
        esac, globals] |
      _ -> failure("Can't bind " ++ def.string ++ "\n")
    esac
  }, [environment, globals], defs);
  globals := environment[1];
  environment := environment[0];

  -- Traverse again to rememberFun
  environment := foldl(fun(env, def) {
    case def of
      Fun(name, args, body) ->
        case lookupFun(env, name) of Fun(fLabel, _) ->
          rememberFun(env, fLabel, args, body)
        esac |
      Var(_) -> env |
      _ -> failure("Can't bind fun symbol " ++ def.string ++ "\n")
    esac
  }, environment, defs);

  [globals, environment]
}
(* End *)
