-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s, f)    -> sprintf ("LABEL %s, %d", s, f)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  | META (m)         -> sprintf ("META %s", m.string)
  | PATT (p)         -> sprintf ("PATT %s", p.string)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}                  -> m
            | LABEL (lab, _) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl              -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, s, w], insns) {
    case insns of 
      BINOP (bp):tl -> 
  	    case st of
          y:x:st -> eval ([ binop(bp, x,y):st, cst, s, w], tl)
        esac
    | GLOBAL (x):tl ->
       assign(s, Glb(x), 0);
       eval(c, tl)
    | CONST (n):tl -> 
        eval([n:st, cst, s, w], tl)
    | LD (x):tl -> eval ([lookup(s, x):st, cst, s, w], tl)
    | LDA (x): tl -> eval ([Ref (x):st, cst, s, w], tl)
    | ST (x):tl -> 
        assign(s, x, st[0]); 
        eval (c, tl)
    | STI :tl ->
        case st of
          v:x:st -> assign(s, x, v); eval ([v:st, cst, s, w], tl)
        esac
    | STA :tl ->
        case st of
          v:Ref (x):st -> assign(s, x, v); eval ([v:st, cst, s, w], tl)
        | v:i:x:st -> x[i] := v; eval ([v:st, cst, s, w], tl)
        esac

    | DUP :tl ->
        case st of
          z:_ -> eval ([ z:st, cst, s, w], tl)
        esac
    | DROP :tl ->
        case st of
          z:st -> eval ([st, cst, s, w], tl)
        | st   -> eval ([st, cst, s, w], tl)
        esac
  
    | LABEL (s, _) :tl -> eval (c, tl)
    | JMP (l) :tl -> 
        eval (c, fromLabel (env, l) )
    
    | CJMP (cond, l) :tl ->
        case st of
          0:tail -> eval ([tail, cst, s, w], if compare (cond, "z")==0 then fromLabel (env, l) else tl fi)
        | _:tail -> eval ([tail, cst, s, w], if compare (cond,"nz")==0 then fromLabel (env, l) else tl fi)
        esac

    | CALL (f, l) :tl ->
       eval ([st, s:tl:cst, s, w], fromLabel(env, f))


    | BEGIN (f, a, l) :tl -> 
        s := makeState (a, l);
        case take (st, a) of [st, args] ->
           
           foldl (fun (i, a) {assign (s, Arg (i), a); i+1}, 0, args);
           eval ([st, cst, s, w], tl)
        esac
    | END :tl ->
        case cst of 
          s:ret:cst -> eval ([st, cst, s, w], ret)
        | 0 -> c
        esac


    | BUILTIN ("read", n) :tl ->
        var n = readWorld (w);
        eval ([n[0]:st, cst, s, n[1]], tl)
    | BUILTIN ("write", n) :tl ->
        case st of
          z:st -> eval([st, cst, s, writeWorld(z, w)], tl)
        esac
    | BUILTIN ("length", n) :tl ->
        case st of
          z:st -> eval([length (case z of Sexp(_, z) ->z | z -> z esac):st, cst, s, w], tl )
        esac
    
  
    | STRING (x) : tl -> eval([x:st, cst, s, w], tl)

    | ELEM :tl ->
        case st of i:x:st ->
          case x of 
            Sexp (l, x) -> eval ([x[i]:st, cst, s, w], tl)
          | x -> eval ([x[i]:st, cst, s, w], tl)
          esac
        esac
    | ARRAY (x) : tl ->
        case take(st, x) of
          [st, args] -> eval ([listArray(args):st, cst, s, w], tl)
        esac
    
    | SEXP (sH, n) : tl ->
        case take(st, n) of
          [st, args] -> eval ([Sexp (sH, listArray(args)):st, cst, s, w], tl)
        esac

    | PATT (x) : tl->
        case x of
          Sexp (l1, x) -> 
            case st of
              Sexp (l2, mas): st -> eval([(compare(l1, l2)==0 && x==length(mas)):st, cst, s, w], tl) 
            | _ -> eval ([0:st, cst, s, w], tl)
            esac
        | Array (x) ->
            case st of 
              (mas@#array): st -> eval([x==length(mas):st, cst, s, w], tl)
            | _ -> eval ([0:st, cst, s, w], tl)
            esac
        esac

    | META(p) :tl ->
        failure ("\nCaseError\n%s\n\n", st.string)

    | _ -> failure ("\n\n%s\n\n", insns.string)
    esac
  }
  

  -- printf ("%s\n", showSM (insns));
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (expr) {
  -----
  fun addPredefFun(env){
    var pf = {
        Fun ("read", {}),
        Fun ("write", {"a"}),
        Fun ("length", {"a"})
      };
    env := beginScope(env);

    while size(pf) > 0 do 
      env := case pf[0] of Fun (f, args) ->
               addFun(env, f, f, size (args))
             esac;
      pf := pf.tl
    od;
    env
  }
  -------
    fun createFuns([fs, env]){
      var code = emptyBuffer();
      while size(fs) >0 do
        case fs[0] of Fun (l, args, body, st) ->
          case cmpSM(addArgs(beginFun (env, st), args), body) of [nenv, body] ->
            env := nenv;
            code := code
                  <+  LABEL (l, false)
                  <+  BEGIN (l, size(args), getLocals (env))
                  <+> body
                  <+  END
            
          esac
        esac;
        fs := fs.tl
      od;
      code
    }
    -----
  
    getBuffer(
      case cmpSM (addPredefFun(initCompEnv()), expr) of [env, code] ->
        emptyBuffer()
          <+  LABEL ("main", false)
          <+  BEGIN ("main", 0, getLocals(env))
          <+> code
          <+  END
          <+> createFuns(getFuns(env))
      esac
    )
  }
  
  fun cmpIf(env, e, s1, s2){
    case s2 of
      Skip ->
        var ls = genLabels(env, 1);
        var p = cmpSM (ls[1], s1);
  
        [p[0], cmpSM(p[0], e)[1]
          <+  CJMP ("z", ls[0])
          <+> p[1]
          <+  LABEL (ls[0], false)
        ]
    | _ ->
        var ls = genLabels(env, 2);
        var p2 = cmpSM(ls[2], s2);
        var p1 = cmpSM(p2[0], s1);
  
        [p1[0], cmpSM(p1[0], e)[1]
          <+  CJMP ("nz", ls[0])
          <+> p2[1]
          <+  JMP (ls[1])
          <+  LABEL (ls[0], false)
          <+> p1[1]
          <+  LABEL (ls[1], false)
        ]
    esac
  }
  
  
  fun cmpSM(env, stmt){
    case stmt of
      Assn (s, e) -> case s of 
          Ref (s) -> [env, cmpSM(env, e)[1] <+ ST(lookupVar (env, s))]
        | _ -> 
            var s1 = cmpSM(env, s);
            var e1 = cmpSM(s1[0], e);
            [e1[0], s1[1] <+> e1[1] <+ STA]
        esac
  
  
    | Seq (e1,e2) ->
        var p1 = cmpSM(env, e1);
        var p2 = cmpSM(p1[0], e2);
        [p2[0], p1[1] <+> p2[1] ]
  
    | Skip -> [env, emptyBuffer()]
  
  
    | Var (x) -> [env, singletonBuffer(LD (lookupVar (env, x)))]
    | Const (n) -> [env, singletonBuffer(CONST (n))]
    | Ref (x) -> [env, singletonBuffer(LDA (lookupVar (env, x)))]
  
    | Binop (op, e1, e2) -> 
        var p1 = cmpSM(env, e1);
        var p2 = cmpSM(p1[0], e2);
        [p2[0], p1[1] <+> p2[1] <+ BINOP (op)]
    
    | Ignor (x) -> 
        var p = cmpSM (env, x);
        [p[0], p[1] <+ DROP]
        
  
    | While (e1, e2) -> 
        var ls = genLabels(env, 2);
        var p = cmpSM (ls[2], e2);
        
        [p[0], emptyBuffer()
          <+  JMP (ls[0])
          <+  LABEL (ls[1], true)
          <+> p[1]
          <+  LABEL (ls[0], false)
          <+> cmpSM (p[0], e1)[1]
          <+  CJMP ("nz", ls[1])
        ]
    | If (e, s1, s2) -> cmpIf (env, e, s1, s2)
  
  
    | Scope (defs, expr) ->
        -------
        fun initDefs (env, d){
          var funcs = {};
          while size(d) > 0 do
            env := case d[0] of
                     Var (x) -> addVars(env, x)
                   | Fun (f, args, body) -> 
                       case genFunLabel (env, f) of [label, env] ->
                         funcs := [f, args, body, label]:funcs; 
                         addFun (env, f, label, size (args))
                       esac
                   esac;
            d := d.tl
          od;
          while size (funcs) > 0 do
            env := case funcs[0] of [f, args, body, label] ->
                     rememberFun (
                       env,
                       label,
                       args,
                       body
                     )
                   esac;
            funcs := funcs.tl
          od;
          env
        }
        -------
        fun createGlobals (env, d){
          var code = emptyBuffer();
          if isGlobal (env) then
            while size(d) > 0 do
              case d[0] of
                Var (x) -> 
                  while size(x) > 0 do
                    code := code <+ GLOBAL (x[0]);
                    x := x.tl
                  od
              | Fun (f, args, body) -> skip
              esac;
              d := d.tl
            od
          fi;
          code
        }
        -------
        var codeDefs;
        env := initDefs (beginScope (env), defs);
        codeDefs := createGlobals (env, defs);
        
        case cmpSM (env, expr) of [env, code] ->
          [if isGlobal(env) then env else endScope(env) fi, codeDefs <+> code]
        esac
  
    | Call (f, args) ->
        
        var code = emptyBuffer();
        while size(args) >0 do
          var r;
          r := cmpSM (env, args[0]);
          env := r[0];
          code := code <+> r[1];
          args := args.tl
        od;
        
        case lookupFun(env, f) of Fun (f, l) ->
          [env, code <+ 
                  case stmt of
                    Call ("read", _) -> BUILTIN (f, size (args))
                  | Call ("write", _) -> BUILTIN (f, size (args))
                  | Call ("length", _) -> BUILTIN (f, size (args))
                  | _                   -> CALL (f, l)
                  esac
          ]
        esac
  
    | Builtin (f, n) -> [env, singletonBuffer(BUILTIN (f, n))]
  
    | String (x) -> [env, singletonBuffer(STRING (x))]
    | Elem (e1, e2) -> 
        case cmpSM (env, e1) of [env, e1] ->
        case cmpSM (env, e2) of [env, e2] ->
          [env, e1 <+> e2 <+ ELEM]
        esac esac
    | ElemRef (e1, e2) -> 
        case cmpSM (env, e1) of [env, e1] ->
        case cmpSM (env, e2) of [env, e2] ->
          [env, e1 <+> e2]
        esac esac
    | Array (list) ->
       var elem;
       var sz = size(list);
       var code = emptyBuffer();
       while size(list) > 0 do
         elem := cmpSM(env, list[0]);
         env := elem[0];
         code := code <+> elem[1];
         list := list.tl
       od;
       [env, code <+ ARRAY (sz)]
    
    | Sexp (s, list) ->
        var elem;
        var sz = size(list);
        var code = emptyBuffer();
        while size(list) > 0 do
          elem := cmpSM(env, list[0]);
          env := elem[0];
          code := code <+> elem[1];
          list := tl(list)
        od;
        [env, code <+ SEXP (s, sz)]

    | Case (e, ps) ->
        -----------------------
        fun matchList(env, p) {
          var i = 0;
          var ds = emptyBuffer();
          var dp = emptyBuffer();
          var dl = emptyBuffer();
          while size(p) > 0 do
            var tmp = match(env, p[0]); 
            env := tmp[0];

            if size(getBuffer(tmp[1])) > 0 then
              dp := dp <+> listBuffer({DUP, CONST (i), ELEM}) <+> tmp[1];
              ds := singletonBuffer(DROP) <+> ds;
              tmp[3] := tmp[3] <+ DROP
            fi;
            if size(getBuffer(tmp[2])) > 0 then
              ds := ds <+> listBuffer({DUP, CONST (i), ELEM}) <+> tmp[2]
            fi;
    
            dl := dl <+> tmp[3];

            i := i+1;
            p := tl(p)
          od;
          [env, dp, ds, dl]
        }
        -----------------------
        fun match(env, p) {
          case p of 
            Sexp (l, x) -> 
              case genLabel(env) of [label, env] ->
                var tmp = matchList(env, x);
                [
                  tmp[0],
                  singletonBuffer(DUP) <+ PATT (Sexp (l, size(x))) <+ CJMP ("z", label) <+> tmp[1],
                  tmp[2] <+ DROP,
                  tmp[3] <+ LABEL (label, false)
                ]
              esac
          | Array (x) ->
              case genLabel(env) of [label, env] ->
                var tmp = matchList(env, x);
                [
                  tmp[0],
                  singletonBuffer(DUP) <+ PATT (Array (size(x))) <+ CJMP ("z", label) <+> tmp[1],
                  tmp[2] <+ DROP,
                  tmp[3] <+ LABEL (label, false)
                ]
              esac
          | Decimal (x) ->
              case genLabel(env) of [label, env] ->
              [
                env,
                listBuffer({DUP, CONST (x), BINOP("=="), CJMP ("z", label)}),
                singletonBuffer(DROP),
                singletonBuffer(LABEL (label, false))
              ]
              esac
          | Named (x) ->
              [
                env,
                emptyBuffer(),
                listBuffer({ST(lookupVar (env, x)), DROP}),
                emptyBuffer()
              ]
          | NamedPattern (x, p) ->
              var tmp = match (env, p);
              [
                tmp[0],
                tmp[1],
                singletonBuffer(DUP) <+> tmp[2] <+> listBuffer({ST(lookupVar (env, x)), DROP}),
                tmp[3]
              ]
          | Wildcard -> [env, emptyBuffer(), emptyBuffer(), emptyBuffer()]
          esac
        }
        ----------------------

        case genLabel (env) of [lEnd, env] ->
        case cmpSM (env, e) of [env, e] ->
          var patterns = emptyBuffer();
          var scopes = emptyBuffer();
          var code = emptyBuffer();
          var tmp;

          while size (ps) >0 do 
            
            case beginScope(env) of pEnv ->
              env := pEnv;
              case ps[0] of [p, s] ->
                for var vs; vs := p[1], size(vs) >0, vs := tl(vs) do 
                case vs[0] of Var (x) -> env := addVars(env, x) esac
                od;

                case cmpSM (env, s) of [sEnv,s] ->
                  var tmp = match(sEnv, p[0]);
                  env := tmp[0];
                  code := code <+> tmp[1] <+> tmp[2] <+> s <+ JMP (lEnd) <+> tmp[3] 
                esac

              esac;
              env := endScope(env)
            esac;
            ps := tl(ps) 
          od;
         [env, e <+> code <+ META (lEnd) <+ LABEL (lEnd, true)] 

        esac
        esac
  
    | _ -> failure("\n\nFTF:  %s\n\n", stmt.string)
  
    esac
}
