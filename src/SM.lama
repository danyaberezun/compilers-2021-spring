-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
  case insns of 
      READ : other -> case readWorld( world) of [value, new_world] -> eval (
        env,
        [value : stack, state, new_world],
        other
      ) esac
    | WRITE : other -> case stack of top : other_stack -> eval (
        env,
        [other_stack, state, writeWorld (top, world)],
        other
      ) esac
    | BINOP (oper) : other -> case stack of b : a : other_stack -> eval (
        env,
        [evalBinop (oper, a, b) : other_stack, state, world],
        other
      ) esac
    | LD (name) : other -> eval (
        env,
        [state (name) : stack, state, world],
        other
      )
    | ST (name) : other -> case stack of top : other_stack -> eval (
        env,
        [other_stack, state <- [name, top], world],
        other
      ) esac
    | CONST (value) : other -> eval (
        env,
        [value : stack, state, world],
        other
      )
    | LABEL (label) : other -> eval (
        env,
        c,
        other
      )
    | JMP (label) : other -> eval (
        env,
        c,
        fromLabel (env, label)
      )
    | CJMP (cond, label) : other -> case stack of top : other_stack -> (
        var need_jump = case cond of 
            "nz" -> top != 0
          | "z" -> top == 0
          | _ -> failure ("unrecognized condition")
        esac;
        if need_jump then
          eval (env, [other_stack, state, world], fromLabel (env, label))
        else
          eval (env, [other_stack, state, world], other)
        fi
      ) esac
    | _ -> [stack, state, world]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (name) -> singletonBuffer (LD (name))
    | Const (value) -> singletonBuffer (CONST (value))
    | Binop (op, a, b) -> compileExpr (a) <+> compileExpr (b) <+ BINOP (op)
  esac
}

fun compileSMBuf (env, stmt) {
  case stmt of 
      Assn (name, e) -> [env, compileExpr (e) <+ ST (name)]
    | Read (name) -> [env, singletonBuffer (READ) <+ ST (name)]
    | Write (e) -> [env, compileExpr (e) <+ WRITE]
    | Seq (s1, s2) -> 
      case compileSMBuf (env, s1) of [env_1, code_1] ->
        case compileSMBuf (env_1, s2) of [env_2, code_2] -> 
          [env_2, code_1 <+> code_2]
        esac
      esac
    | Skip -> [env, emptyBuffer ()]
    | While (cond, body) -> 
        case env.genLabels (2) of [cond_label, body_label, env_1] ->
          case compileSMBuf (env_1, body) of [env_2, code] ->
            [env_2, singletonBuffer (JMP (cond_label))
              <+ LABEL (body_label)
              <+> code
              <+ LABEL (cond_label)
              <+> compileExpr (cond)
              <+ CJMP ("nz", body_label)
            ]
          esac
        esac
    | If (cond, if_branch, else_branch) ->
        case env.genLabels (2) of [else_label, end_label, env_1] ->
          case compileSMBuf (env_1, if_branch) of [env_2, if_code] ->
            case compileSMBuf (env_2, else_branch) of [env_3, else_code] ->
              [env_3, compileExpr (cond) 
                <+ CJMP ("z", else_label) 
                <+> if_code 
                <+ JMP (end_label) 
                <+ LABEL (else_label) 
                <+> else_code 
                <+ LABEL (end_label)
              ]
            esac
          esac
        esac
    | DoWhile (body, cond) -> 
        case env.genLabel of [body_label, env_1] ->
          case compileSMBuf (env_1, body) of [env_2, code] ->
            [env_2, singletonBuffer (LABEL (body_label)) 
              <+> code 
              <+> compileExpr (cond) 
              <+ CJMP ("nz", body_label)]
          esac
        esac
    | _ -> failure ("Unrecognised statement %s\n", stmt.string)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  getBuffer (compileSMBuf (initCompEnv(), stmt).snd)
} 
