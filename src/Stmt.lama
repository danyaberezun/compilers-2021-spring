-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
-- 
fun eval ([state, world], stmt) {
  case stmt of
    Skip -> [state, world]
    | Assn (v, e) -> [state <- [v, evalExpr (state, e)], world]
    | Read (v) -> 
        case readWorld (world) of
          [n, w_new] -> [state <- [v, n], w_new]
        esac
    | Write (e) -> [state, writeWorld (evalExpr (state, e), world)]
    | Seq (s1, s2) ->
        case eval ([state, world], s1) of
          [s_tmp, w_tmp] -> eval ([s_tmp, w_tmp], s2)
        esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}

