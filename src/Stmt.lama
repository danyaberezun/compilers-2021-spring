-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun evalStmtAssn ([st, w], Assn (varName, expr)) {
  [st <- [varName, evalExpr (st, expr)], w]
}

fun evalStmtSeq (c, Seq (stmt0, stmt1)) {
  eval (eval (c, stmt0), stmt1)
}

fun evalStmtRead ([st, w], Read (varName)) {
  var readResult = readWorld (w);
  [st <- [varName, readResult[0]], readResult[1]]
}

fun evalStmtWrite ([st, w], Write (expr)) {
  [st, writeWorld (evalExpr (st, expr), w)]
}

fun evalStmtIf ([st, w], If (cond, ifBr, elseBr)) {
  case evalExpr (st, cond) of
    0 -> eval ([st, w], elseBr) |
    _ -> eval ([st, w], ifBr)
  esac
}

fun evalStmtWhile ([st, w], While (cond, body)) {
  case evalExpr (st, cond) of
    0 -> [st, w] |
    _ -> evalStmtWhile (eval ([st, w], body), While (cond, body))
  esac
}

fun evalStmtDoWhile ([st, w], DoWhile (body, cond)) {
  evalStmtWhile (eval ([st, w], body), While (cond, body))
}


fun eval (c, stmt) {
  case stmt of
    Assn  (_, _)   -> evalStmtAssn    (c, stmt) |
    Seq   (_, _)   -> evalStmtSeq     (c, stmt) |
    Skip           -> c                         |
    Read  (_)      -> evalStmtRead    (c, stmt) |
    Write (_)      -> evalStmtWrite   (c, stmt) |
    If (_, _, _)   -> evalStmtIf      (c, stmt) |
    While (_, _)   -> evalStmtWhile   (c, stmt) |
    DoWhile (_, _) -> evalStmtDoWhile (c, stmt) |
    _              -> failure ("Stmt eval not implemented\n")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
