-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  var state = c.fst;
  var world = c.snd;
  case stmt of
        Assn (name, expr)   -> [state <- [name, evalExpr (state, expr)], world]
    |   Seq (stmt1, stmt2)  -> c.eval (stmt1) . eval (stmt2)
    |   Skip                -> [state, world]
    |   Read (name)         -> (
          var readResult = readWorld (world);
          [state <- [name, readResult.fst], readResult.snd]
        )
    |   Write (expr)        -> [state, writeWorld (evalExpr (state, expr), world)]
    esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
