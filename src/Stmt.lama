- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  var s = c.fst;
  var w = c.snd;
  case stmt of
    Assn (varName, expr) -> (
      var varValue = evalExpr(s, expr);
      var news = s <- [varName, varValue];
      [news, w]
    )
  | Seq (stmt1, stmt2) -> (
      var news = eval(c, stmt1);
      eval (news, stmt2)
    )
  | Skip -> c
  | Read (varName) -> (
      var readRes = readWorld(w);
      case readRes of
        [varValue, neww] -> (
          var news = s <- [varName, varValue];
          [news, neww] 
        )
      esac
    )
  | Write (expr) -> (
      var exprVal = evalExpr(s, expr);
      var neww = writeWorld(exprVal, w);
      [s, neww]
    )
  | While (whileCond, whileStmt) -> (
      case evalExpr (s, whileCond) of
        0 -> [s, w]
        | _ -> (
           var newc = eval (c, whileStmt); 
           eval (newc, stmt)
        )
      esac
    )
  | DoWhile (whileStmt, whileCond) -> (
      var newc = eval (c, whileStmt);
      eval (newc, While (whileCond, whileStmt))
    )
  | If (ifCond, thenStmt, elseStmt) -> (
      case evalExpr(s, ifCond) of
           0 -> eval (c, elseStmt)
        |  _ -> eval (c, thenStmt) 
      esac
    )
  esac
}

--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}