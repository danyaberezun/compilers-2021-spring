-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun evalAssn ([state, world], Assn (variable, expr)) {
  [state <- [variable, evalExpr (state, expr)], world] 
}

fun evalSeq (c, Seq (stmt1, stmt2)) {
  eval (eval (c, stmt1), stmt2) 
}

fun evalRead ([state, world], Read (variable)) {
  var readRes = readWorld (world);
  [state <- [variable, readRes[0]], readRes[1]] 
}

fun evalWrite ([state, world], Write(expr)) {
  [state, writeWorld(evalExpr (state, expr), world)]
}

fun eval (c, stmt) {
  case stmt of
    Assn  (_, _) -> evalAssn  (c, stmt)
  | Seq   (_, _) -> evalSeq   (c, stmt)
  | Skip         -> c
  | Read  (_)    -> evalRead  (c, stmt)
  | Write (_)    -> evalWrite (c, stmt)
  | _            -> failure   ("Invalid statement!")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
