-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

public fun evalStmtAssn ([st, w], Assn (name, expr)) {
  [st <- [name, evalExpr (st, expr)], w]
}

public fun evalStmtSeq (c, Seq (stmtLeft, stmtRight)) {
  eval (eval (c, stmtLeft), stmtRight)
}

public fun evalStmtSkip (c, Skip) {
  c
}

public fun evalStmtRead ([st, w], Read (name)) {
  var world = readWorld (w);
  [st <- [name, world[0]], world[1]]
}

public fun evalStmtWrite ([st, w], Write (expr)) {
  [st, writeWorld (evalExpr (st, expr), w)]
}

fun eval (c, stmt) {
  case stmt of 
	Assn (_, _) -> evalStmtAssn (c, stmt) |
	Seq (_, _) 	-> evalStmtSeq (c, stmt) |
	Skip 		-> evalStmtSkip (c, stmt) |
	Read (_) 	-> evalStmtRead (c, stmt) |
	Write (_) 	-> evalStmtWrite (c, stmt) |
	_ 			-> failure ("Eval is not implemented for this operation\n")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
