-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  case stmt of
    Assn (s, e) -> [c.fst <- [s, evalExpr (c.fst, e)], c.snd]    |
    Seq (st1, st2) -> eval (eval (c, st1), st2)                  |
    Skip -> c                                                    |
    Read (s) -> (
      var newWorld = readWorld (c.snd);
      [c.fst <- [s, newWorld[0]], newWorld[1]]
    )                                                            |
    Write (e) -> [c.fst, writeWorld (evalExpr(c.fst, e), c.snd)] |
    If (e, st1, st2) ->
      case evalExpr (c.fst, e) of
        0 -> eval (c, st2) |
        _ -> eval (c, st1)
      esac                                                       |
    While (e, st) ->
      case evalExpr (c.fst, e) of
        0 -> c |
        _ -> eval (eval (c, st), While (e, st))
      esac                                                       |
    DoWhile (st, e) -> eval (eval (c, st), While (e, st))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
