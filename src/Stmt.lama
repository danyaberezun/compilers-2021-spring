-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  case stmt of
    Assn    (v, e)      -> [c.fst <- [v, evalExpr (c.fst, e)], c.snd]
  | Seq     (s1, s2)    -> eval (eval (c, s1), s2)
  | Skip                -> c
  | Read    (v)         -> case readWorld (c.snd) of
                             [n, w] -> [c.fst <- [v, n], w]
                           esac
  | Write   (e)         -> [c.fst, writeWorld (evalExpr (c.fst, e), c.snd)]
  | If      (e, s1, s2) -> if evalExpr (c.fst, e) != 0 then eval (c, s1) else eval (c, s2) fi
  | While   (e, s)      -> if evalExpr (c.fst, e) != 0 then eval (eval (c, s), stmt) else c fi
  | DoWhile (s, e)      -> case eval (c, s) of
                             [n, w] -> if evalExpr (n, e) then eval ([n, w], stmt) else [n, w] fi
                           esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
