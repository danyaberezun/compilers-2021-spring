-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  case stmt of
    Assn (s, expr) -> (
      var curState = c.fst;
      var curWorld = c.snd;

      var expRes = evalExpr(curState, expr);
      var nextState = curState <- [s, expRes];
      [nextState, curWorld] 
    ) 
  | Seq (stmtLeft, stmtRight) -> (
    var cLeft = eval(c, stmtLeft);
    eval(cLeft, stmtRight)
    )
  | Skip -> c
  | Read (s) -> (
      var curState = c.fst;
      var curWorld = c.snd;
      
      var readResult = readWorld(curWorld);
      var newVarValue = readResult.fst;
      var newWorld = readResult.snd;

      var newState = curState <- [s, newVarValue];
      [newState, newWorld]
    )
  | Write (expr) ->  (
      var curState = c.fst;
      var curWorld = c.snd;

      var expRes = evalExpr(curState, expr);
      var newWorld = writeWorld(expRes, curWorld);
      [curState, newWorld]
    )
  | _ -> failure("No such statement.")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
