-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  case stmt of
    Assn (x, expr) -> assn (c, x, expr)
  | Seq (stmt1, stmt2) -> eval (eval (c, stmt1), stmt2)
  | Skip -> c
  | Read (x) -> read (c, x)
  | Write (expr) -> write (c, expr)
  esac
}

fun assn (c@[st, w], x, expr) {
   [st <- [x, evalExpr (st, expr)], w]
}

fun read (c@[st, w], x) {
  var r = readWorld (w);
  [st <- [x, r[0]], r[1]]
}

fun write (c@[st, w], expr) {
  [st, writeWorld (evalExpr (st, expr), w)]
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
