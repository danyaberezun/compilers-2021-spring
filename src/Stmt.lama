-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  var st = c.fst;
  var w = c.snd;
  case stmt of
    Assn (varName, expr) -> (
      var varValue = evalExpr (st, expr);
      var newSt = st <- [varName, varValue];
      [newSt, w]
    )
  | Seq (stmt1, stmt2) -> (
    var c1 = eval (c, stmt1);
    eval (c1, stmt2)
  )
  | Skip -> c
  | Read (varName) -> (
    var tmp = readWorld (w);
    var varValue = tmp.fst;
    var newW = tmp.snd;
    [st <- [varName, varValue], newW]
  )
  | Write (expr) -> (
    var value = evalExpr (st, expr);
    var newW = writeWorld (value, w);
    [st, newW] 
  )
  | If (cond, trueStmt, falseStmt) -> 
    case evalExpr (st, cond) of
      0 -> eval (c, falseStmt)
    | _ -> eval (c, trueStmt)
    esac
  | While (cond, body) ->
    case evalExpr (st, cond) of
      0 -> c
    | _ -> (
        var c1 = eval (c, body);
        eval (c1, stmt) -- stmt here is same While (cond, body)
    )
    esac
  | DoWhile (body, cond) -> (
    var c1 = eval (c, body);
    eval (c1, While (cond, body))
  )
  esac 
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
