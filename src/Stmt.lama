-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[state, world], stmt) {

  case stmt of
  	Skip -> c
  |	Assn (string, expr) -> [state <- [string, evalExpr(state, expr)], world]
  |	Seq (stm1, stm2) -> eval(eval(c, stm1), stm2)
  |	Read (x) -> case readWorld(world) of [n, w] -> [state <- [x, n], w] esac
  |	Write (expr) -> [state, writeWorld(evalExpr(state, expr), world)]
  | If (expr, ifTrue, ifFalse) -> 
  		if (evalExpr(state, expr) != 0) 
  		then eval([state, world], ifTrue) 
  		else eval([state, world], ifFalse) 
  		fi
  | While (expr, body) -> 
  		if (evalExpr(state, expr) != 0) 
  		then eval((* c' = *) eval([state, world], body), stmt)
  		else [state, world]
  		fi
  | DoWhile (body, expr) -> 
  		case eval([state, world], body) of 
  			[newState, newWorld] -> 
  				if (evalExpr(newState, expr) != 0) 
  				then eval([newState, newWorld], stmt)
  				else [newState, newWorld] 
  				fi
  		esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
