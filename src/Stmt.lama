-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |


fun prisv (a, x, [st, w]) {
	[st <- [a, x], w]
}

fun read (a, [st, w]) {
	var res = readWorld(w);
	[st <- [a, res[0]], res[1]] 
}


fun eval (c, stmt) {
	case stmt of
		Skip -> c |
		Assn(a, expr) -> prisv(a, evalExpr(c[0], expr), c) |
		Seq(stmt1, stmt2) -> eval(eval(c, stmt1), stmt2) |
		Read(a) -> read(a, c) |
		Write(expr) -> [c[0], writeWorld(evalExpr(c[0], expr), c[1])] |
		_ -> failure("The statement is not recognised!")
	esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
