-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  case c of
    [state, world] -> case stmt of
      Assn (st, expr) -> [state <- [st, evalExpr(state, expr)], world]
    | Read (st) -> case readWorld (world) of [n, w] -> [state <- [st, n], w] esac
    | Write (expr) -> [state, writeWorld (evalExpr (state, expr), world)]
    | Skip -> c
    | Seq (stmt0, stmt1) -> eval (eval (c, stmt0), stmt1)
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
