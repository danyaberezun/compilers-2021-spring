--Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c@[st,w], stmt) {
  case stmt of
	Assn (x, expr) -> [st <- [x, evalExpr (st, expr)], w]
    | Seq (st1, st2) -> eval (eval (c, st1), st2)
    | Skip -> [st,w]
    | Read (x) -> (
      var tmp = readWorld (w);
      var v = tmp.fst;
      var w2 = tmp.snd;
      [st <- [x, v], w2]
    )
    | Write (expr) -> [st, writeWorld (evalExpr(st,expr), w)]
    | If (expr, st1, st2) -> if evalExpr(st, expr) != 0 then eval(c, st1) else eval(c, st2) fi
    | While (expr, st1) -> if evalExpr(st, expr) != 0 then eval(eval(c, st1), stmt) else c fi
    | DoWhile (st1, expr) -> (
    	var c = eval([st, w], st1);
    	if evalExpr(c.fst, expr) != 0 then eval(c , stmt) else c fi
    )
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}

