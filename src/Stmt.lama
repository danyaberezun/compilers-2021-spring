-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval ([st, wd], stmt) {
  case stmt of
    Skip             -> [st, wd]
  | Assn  (vn, expr) -> [st <- [vn, st.evalExpr (expr)], wd]
  | Read  (vn)       ->
      var read = readWorld (wd);
      [st <- [vn, read.fst], read.snd]
  | Write (expr)     -> [st, writeWorld (st.evalExpr (expr), wd)]
  | Seq   (l, r)     -> [st, wd].eval (l).eval (r)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
