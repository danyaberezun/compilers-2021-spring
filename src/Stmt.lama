-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
	var state = c.fst;
	var world = c.snd;
	case stmt of
		Assn (varName, expr) -> (
			var result = evalExpr (state, expr);
			var newState = state <- [varName, result];
			[newState, world]
		)
	|	Seq (a, b) -> (
			var newC = eval (c, a);
			eval (newC, b)
		)
	| 	Skip -> c
	| 	Read (varName) -> (
			var readResult = readWorld (world);
			var value = readResult.fst;
			var newWorld = readResult.snd;
			var newState = state <- [varName, value];
			[newState, newWorld]
		)
	|	Write (expr) -> (
			var exprRes = evalExpr (state, expr);
			var newWorld = writeWorld (exprRes, world);
			[state, newWorld]
		)
	esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}