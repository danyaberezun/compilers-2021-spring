-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  case stmt of
    Assn (s, e) -> [c[0] <- [s, evalExpr (c[0], e)], c[1]] |
    Seq (st1, st2) -> eval (eval (c, st1), st2) |
    Skip -> c |
    Read (s) -> (
      var newWorld = readWorld (c[1]);
      [c[0] <- [s, newWorld[0]], newWorld[1]]
     ) |
    Write (e) -> [c[0], writeWorld (evalExpr(c[0], e), c[1])]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
